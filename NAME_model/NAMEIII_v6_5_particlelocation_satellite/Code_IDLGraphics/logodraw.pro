
PRO logodraw, x, y, ysize, $
	      bw=bw, height=height, keepaspect=keepaspect, $ 
              map=map, noplot=noplot, normal=normal, return=return,$
	      table_origin=table_origin, trace=trace, verbose=verbose,$
	      onwhite=onwhite, transparent=transparent,$
	      mimick_logodraw2=mimick_logodraw2



;+
; NAME:    LOGODRAW
; PURPOSE: Draw the Met Office logo
; CATEGORY: Graphics
; CLASSIFICATION KEYWORDS:
;
; IMPORTANT:  The Met Office has restrictions on the use of its logo, relating
;             to colour, placement, etc. 
;             Please contact Communications branch or the Branding Officer
;             for more information about the do's and don'ts.
;
; CALLING SEQUENCE: 
;          logodraw, x, y, height
; INPUTS:  
;           x, y -  	Coordinates of top left hand corner of the 
;   	    	    	logo (data/normalised co-ordinates)
; OPTIONAL INPUT PARAMETERS: 
;           height - 	height of the logo (data/normalised distance)
; KEYWORD PARAMETERS:
;  
;   /onwhite - Use a white background with black text and green(or black) waves.
;              Without this keyword : black bg, white text, green(or white) waves.
;   /bw      - Use black and white rather than approved colour scheme
;   /noplot  - NO LONGER USED. Don't run GIP_PLOT directly afterwards to plot it.
;   /normal  - Input coordinates (& height) are normalised, not data.
;   /map     - Input coordinates are lat/lon values, (MAP needs to be run)
;
;   /keepaspect - Keep aspect ratio if window is not square (can cause
;                 squashed' plots)
;
;   /verbose - Additional information
;      trace - NO LONGER USED. Pass this parameter to the Fortran:
;              0 - No TRACE output
;              1 - Error/warning messages
;              2 - Above, plus input and output arguments
;              3 - Above, plus variable trace for diagnostic purposes
;
;  table_origin - NO LONGER USED. The colour table index from which to allocate the four
;                 approved logo colours. Can be specified if clashes with 
;   	    	  other used colours occurs. (Default !d.table_size - 5)
;
; OPTIONAL OUTPUT PARAMETERS: 
;     return - NO LONGER USED. Return code. Now it always returns 0.
; 
; EXAMPLES:
;     logodraw
;
;
;  Author : Byron Blay (itbb)
;  Date   : 12/12/07
; MODIFICATION HISTORY: Byron Blay, Graphics Team, 12/12/07
;                       Rewritten to use vectors, instead of an image.
;                       Calls POLYFILL. GIP is no longer used.
;   	    	    	
;-
;
;



	;ITBB
	;SET THIS TO 1 TO MIMICK LOGODRAW2 FUNCTIONALITY.
	;Breaks the size, aspect ratio and positioning in many instances, to match logodraw2.
	;Adds an extra pixel in width and height, to match logodraw2.
	;Draws from top left, not bottom left, to mimick logodraw2.
	;
	;(now a keyword)
	;
	;MIMICK_LOGODRAW2 = 1

	MimickOn = 0
	IF KEYWORD_SET(mimick_logodraw2) GT 0 THEN BEGIN
		MimickOn=1
	ENDIF
	mimick_logodraw2 = MimickOn



	IF (N_PARAMS() LT 2) THEN BEGIN
		message, 'Need to specify x, y coordinates'
	ENDIF



WhiteBoxX = [     0.699997     , 0.199997     , 0.199997     , 0.699997     , 0.699997]
WhiteBoxY = [     0.199997     , 0.199997     , 0.699997     , 0.699997     , 0.199997]
BlueBoxX = [     0.690399     , 0.209595     , 0.209595     , 0.690399     , 0.690399]
BlueBoxY = [     0.209610     , 0.209610     , 0.690369     , 0.690369     , 0.209610]
 
Wave0X = [      0.305313     , 0.310516     , 0.315643     , 0.320740$
     , 0.325821     , 0.330856     , 0.335876     , 0.340881     , 0.345871     , 0.350876$
     , 0.355850     , 0.360855     , 0.365891     , 0.370911     , 0.375992     , 0.381104$
     , 0.386246     , 0.391449     , 0.396698     , 0.402023     , 0.407394     , 0.412827$
     , 0.418381     , 0.423996     , 0.429703     , 0.435516     , 0.441452     , 0.447479$
     , 0.453613     , 0.459885     , 0.466309     , 0.472839     , 0.479507     , 0.486343$
     , 0.493347     , 0.500504     , 0.507828     , 0.515320     , 0.522995     , 0.530823$
     , 0.538681     , 0.546570     , 0.554504     , 0.562439     , 0.570358     , 0.578262$
     , 0.586121     , 0.593933     , 0.601700     , 0.609375     , 0.616959     , 0.624435$
     , 0.631805     , 0.639038     , 0.646118     , 0.653015     , 0.659775     , 0.666321$
     , 0.672699     , 0.678833     , 0.684738     , 0.690399     , 0.690399     , 0.688843$
     , 0.686707     , 0.684052     , 0.680878     , 0.677216     , 0.673065     , 0.668472$
     , 0.663437     , 0.658020     , 0.652191     , 0.646011     , 0.639465     , 0.632629$
     , 0.625488     , 0.618027     , 0.610336     , 0.602402     , 0.594254     , 0.585938$
     , 0.577408     , 0.568741     , 0.559921     , 0.551041     , 0.542038     , 0.532974$
     , 0.523865     , 0.514740     , 0.505600     , 0.496506     , 0.487442     , 0.478439$
     , 0.470749     , 0.463242     , 0.455933     , 0.448776     , 0.441788     , 0.434952$
     , 0.428268     , 0.421722     , 0.415329     , 0.409058     , 0.402893     , 0.396866$
     , 0.390961     , 0.385147     , 0.379440     , 0.373825     , 0.368271     , 0.362839$
     , 0.357437     , 0.352142     , 0.346863     , 0.341690     , 0.336548     , 0.331406$
     , 0.326355     , 0.321304     , 0.316299     , 0.311295     , 0.306290     , 0.301315$
     , 0.296310     , 0.291306     , 0.286301     , 0.281250     , 0.276184     , 0.271057$
     , 0.265930     , 0.260727     , 0.252121     , 0.243546     , 0.235031     , 0.226532$
     , 0.218063     , 0.209595     , 0.209595     , 0.217087     , 0.224503     , 0.231873$
     , 0.239227     , 0.246552     , 0.253876     , 0.261169     , 0.268478     , 0.275772$
     , 0.283127     , 0.290466     , 0.297867     , 0.305313     , 0.305313]

Wave0Y = [      0.554245     , 0.555527     , 0.557129     , 0.559006$
     , 0.561127     , 0.563461     , 0.566040     , 0.568771     , 0.571640     , 0.574677$
     , 0.577820     , 0.581055     , 0.584335     , 0.587692     , 0.591034     , 0.594406$
     , 0.597717     , 0.600998     , 0.604187     , 0.607300     , 0.610275     , 0.613098$
     , 0.615768     , 0.618225     , 0.620499     , 0.622528     , 0.624283     , 0.625778$
     , 0.626953     , 0.627777     , 0.628265     , 0.628387     , 0.628098     , 0.627380$
     , 0.626205     , 0.624603     , 0.622482     , 0.619843     , 0.616669     , 0.613373$
     , 0.610443     , 0.607849     , 0.605576     , 0.603638     , 0.601990     , 0.600601$
     , 0.599503     , 0.598633     , 0.598007     , 0.597626     , 0.597427     , 0.597427$
     , 0.597626     , 0.597961     , 0.598450     , 0.599091     , 0.599854     , 0.600708$
     , 0.601654     , 0.602676     , 0.603775     , 0.604919     , 0.649872     , 0.649307$
     , 0.648560     , 0.647644     , 0.646591     , 0.645447     , 0.644211     , 0.642914$
     , 0.641571     , 0.640182     , 0.638809     , 0.637466     , 0.636154     , 0.634903$
     , 0.633759     , 0.632706     , 0.631805     , 0.631042     , 0.630463     , 0.630096$
     , 0.629929     , 0.630020     , 0.630356     , 0.631027     , 0.631973     , 0.633240$
     , 0.634888     , 0.636902     , 0.639328     , 0.642151     , 0.645447     , 0.649185$
     , 0.652359     , 0.654999     , 0.657120     , 0.658752     , 0.659897     , 0.660614$
     , 0.660904     , 0.660782     , 0.660294     , 0.659470     , 0.658295     , 0.656799$
     , 0.655045     , 0.653015     , 0.650742     , 0.648285     , 0.645630     , 0.642792$
     , 0.639816     , 0.636719     , 0.633514     , 0.630249     , 0.626923     , 0.623581$
     , 0.620209     , 0.616867     , 0.613571     , 0.610336     , 0.607224     , 0.604172$
     , 0.601288     , 0.598557     , 0.595993     , 0.593643     , 0.591522     , 0.589645$
     , 0.588058     , 0.586731     , 0.585175     , 0.584335     , 0.584244     , 0.584763$
     , 0.585831     , 0.587387     , 0.568039     , 0.565491     , 0.563049     , 0.560715$
     , 0.558563     , 0.556610     , 0.554916     , 0.553528     , 0.552505     , 0.551880$
     , 0.551682     , 0.551987     , 0.552826     , 0.554245     , 0.554245]
     
Wave1X = [      0.389618     , 0.394791     , 0.399948     , 0.405045$
     , 0.410126     , 0.415146     , 0.420181     , 0.425186     , 0.430161     , 0.435165$
     , 0.440155     , 0.445160     , 0.450180     , 0.455215     , 0.460297     , 0.465393$
     , 0.470551     , 0.475754     , 0.481003     , 0.486328     , 0.491699     , 0.497162$
     , 0.502670     , 0.508316     , 0.514038     , 0.519836     , 0.525742     , 0.531784$
     , 0.537933     , 0.544205     , 0.550598     , 0.557144     , 0.563843     , 0.570679$
     , 0.577652     , 0.584808     , 0.592133     , 0.599625     , 0.607315     , 0.614807$
     , 0.622360     , 0.629944     , 0.637573     , 0.645187     , 0.652802     , 0.660385$
     , 0.667969     , 0.675507     , 0.682983     , 0.690399     , 0.690399     , 0.683563$
     , 0.676575     , 0.669449     , 0.662201     , 0.654846     , 0.647385     , 0.639862$
     , 0.632248     , 0.624573     , 0.616867     , 0.609116     , 0.601364     , 0.593597$
     , 0.585831     , 0.578094     , 0.570404     , 0.562744     , 0.555069     , 0.547546$
     , 0.540222     , 0.533066     , 0.526093     , 0.519257     , 0.512573     , 0.506027$
     , 0.499634     , 0.493347     , 0.487198     , 0.481171     , 0.475266     , 0.469452$
     , 0.463730     , 0.458130     , 0.452576     , 0.447144     , 0.441742     , 0.436447$
     , 0.431198     , 0.425995     , 0.420837     , 0.415741     , 0.410660     , 0.405609$
     , 0.400604     , 0.395599     , 0.390594     , 0.385605     , 0.380600     , 0.375595$
     , 0.370590     , 0.365540     , 0.360489     , 0.355392     , 0.350235     , 0.345032$
     , 0.337936     , 0.330856     , 0.323822     , 0.316818     , 0.309814     , 0.302826$
     , 0.295837     , 0.288864     , 0.281845     , 0.274841     , 0.267792     , 0.260727$
     , 0.253601     , 0.246429     , 0.239197     , 0.231934     , 0.224548     , 0.217133$
     , 0.209595     , 0.209595     , 0.217331     , 0.224945     , 0.232468     , 0.239868$
     , 0.247177     , 0.254395     , 0.261536     , 0.268600     , 0.275574     , 0.282486$
     , 0.289368     , 0.296188     , 0.302948     , 0.309662     , 0.316345     , 0.323013$
     , 0.329681     , 0.336304     , 0.342941     , 0.349548     , 0.356171     , 0.362808$
     , 0.369476     , 0.376160     , 0.382858     , 0.389618     , 0.389618]
     
Wave1Y = [      0.496429     , 0.497726     , 0.499329     , 0.501190$
     , 0.503311     , 0.505661     , 0.508224     , 0.510956     , 0.513855     , 0.516891$
     , 0.520020     , 0.523254     , 0.526550     , 0.529877     , 0.533249     , 0.536591$
     , 0.539902     , 0.543182     , 0.546371     , 0.549484     , 0.552460     , 0.555298$
     , 0.557953     , 0.560440     , 0.562683     , 0.564713     , 0.566467     , 0.567963$
     , 0.569138     , 0.569962     , 0.570450     , 0.570572     , 0.570282     , 0.569565$
     , 0.568405     , 0.566788     , 0.564667     , 0.561996     , 0.558838     , 0.555679$
     , 0.552841     , 0.550339     , 0.548111     , 0.546188     , 0.544540     , 0.543152$
     , 0.542007     , 0.541107     , 0.540451     , 0.539963     , 0.573578     , 0.572998$
     , 0.572556     , 0.572250     , 0.572144     , 0.572189     , 0.572403     , 0.572845$
     , 0.573502     , 0.574387     , 0.575500     , 0.576874     , 0.578537     , 0.580490$
     , 0.582703     , 0.585266     , 0.588150     , 0.591354     , 0.594528     , 0.597183$
     , 0.599289     , 0.600922     , 0.602097     , 0.602798     , 0.603088     , 0.602966$
     , 0.602478     , 0.601654     , 0.600479     , 0.598999     , 0.597229     , 0.595215$
     , 0.592941     , 0.590469     , 0.587814     , 0.584976     , 0.582001     , 0.578903$
     , 0.575699     , 0.572433     , 0.569107     , 0.565735     , 0.562393     , 0.559052$
     , 0.555756     , 0.552536     , 0.549377     , 0.546356     , 0.543472     , 0.540741$
     , 0.538177     , 0.535828     , 0.533707     , 0.531830     , 0.530243     , 0.528946$
     , 0.527588     , 0.526749     , 0.526413     , 0.526505     , 0.527039     , 0.527924$
     , 0.529175     , 0.530685     , 0.532455     , 0.534439     , 0.536606     , 0.538910$
     , 0.541275     , 0.543716     , 0.546188     , 0.548599     , 0.550949     , 0.553223$
     , 0.555313     , 0.529968     , 0.529480     , 0.528671     , 0.527557     , 0.526169$
     , 0.524551     , 0.522720     , 0.520721     , 0.518600     , 0.516373     , 0.514084$
     , 0.511765     , 0.509445     , 0.507172     , 0.504944     , 0.502853     , 0.500900$
     , 0.499084     , 0.497528     , 0.496185     , 0.495102     , 0.494354     , 0.493942$
     , 0.493912     , 0.494308     , 0.495102     , 0.496429     , 0.496429]
     
Wave2X = [      0.459473     , 0.464661     , 0.469818     , 0.474915$
     , 0.479965     , 0.485031     , 0.490036     , 0.495041     , 0.500046     , 0.505020$
     , 0.510025     , 0.515030     , 0.520035     , 0.525085     , 0.530167     , 0.535278$
     , 0.540421     , 0.545624     , 0.550873     , 0.556168     , 0.561569     , 0.567001$
     , 0.572556     , 0.578171     , 0.583878     , 0.589691     , 0.595596     , 0.601624$
     , 0.607788     , 0.614059     , 0.620453     , 0.626999     , 0.633682     , 0.640518$
     , 0.647507     , 0.654663     , 0.661972     , 0.669479     , 0.677170     , 0.681564$
     , 0.685959     , 0.690399     , 0.690399     , 0.682144     , 0.673843     , 0.665543$
     , 0.657272     , 0.648987     , 0.640762     , 0.632584     , 0.624893     , 0.617401$
     , 0.610077     , 0.602921     , 0.595932     , 0.589096     , 0.582413     , 0.575867$
     , 0.569473     , 0.563202     , 0.557068     , 0.551041     , 0.545105     , 0.539291$
     , 0.533585     , 0.527969     , 0.522430     , 0.516983     , 0.511612     , 0.506287$
     , 0.501038     , 0.495850     , 0.490692     , 0.485580     , 0.480515     , 0.475479$
     , 0.470459     , 0.465454     , 0.460464     , 0.455460     , 0.450485     , 0.445480$
     , 0.440445     , 0.435425     , 0.430344     , 0.425232     , 0.420090     , 0.414902$
     , 0.408630     , 0.402405     , 0.396179     , 0.390015     , 0.383835     , 0.377670$
     , 0.371521     , 0.365372     , 0.359222     , 0.353073     , 0.346893     , 0.340698$
     , 0.334473     , 0.328217     , 0.321945     , 0.315613     , 0.309250     , 0.302826$
     , 0.296356     , 0.289841     , 0.283249     , 0.276581     , 0.269836     , 0.263031$
     , 0.256119     , 0.249115     , 0.242035     , 0.234863     , 0.227554     , 0.220154$
     , 0.212631     , 0.211609     , 0.210617     , 0.209595     , 0.209595     , 0.217026$
     , 0.224716     , 0.232590     , 0.240662     , 0.248871     , 0.257187     , 0.264709$
     , 0.272110     , 0.279419     , 0.286591     , 0.293686     , 0.300674     , 0.307587$
     , 0.314392     , 0.321136     , 0.327805     , 0.334396     , 0.340927     , 0.347397$
     , 0.353806     , 0.360168     , 0.366501     , 0.372772     , 0.379028     , 0.385254$
     , 0.391449     , 0.397629     , 0.403778     , 0.409958     , 0.416077     , 0.422226$
     , 0.428406     , 0.434555     , 0.440765     , 0.446960     , 0.453217     , 0.459473$
     , 0.459473]
     
Wave2Y = [      0.438614     , 0.439911     , 0.441498     , 0.443375$
     , 0.445496     , 0.447845     , 0.450409     , 0.453140     , 0.456024     , 0.459045$
     , 0.462204     , 0.465424     , 0.468719     , 0.472061     , 0.475403     , 0.478775$
     , 0.482101     , 0.485367     , 0.488541     , 0.491638     , 0.494629     , 0.497452$
     , 0.500137     , 0.502609     , 0.504883     , 0.506897     , 0.508652     , 0.510117$
     , 0.511292     , 0.512146     , 0.512634     , 0.512741     , 0.512466     , 0.511734$
     , 0.510590     , 0.508957     , 0.506821     , 0.504196     , 0.501022     , 0.499130$
     , 0.497406     , 0.495743     , 0.517136     , 0.518478     , 0.520126     , 0.522110$
     , 0.524429     , 0.527100     , 0.530121     , 0.533539     , 0.536713     , 0.539352$
     , 0.541473     , 0.543106     , 0.544250     , 0.544983     , 0.545258     , 0.545151$
     , 0.544678     , 0.543823     , 0.542648     , 0.541183     , 0.539398     , 0.537369$
     , 0.535126     , 0.532639     , 0.529968     , 0.527145     , 0.524170     , 0.521057$
     , 0.517868     , 0.514587     , 0.511276     , 0.507935     , 0.504578     , 0.501236$
     , 0.497940     , 0.494720     , 0.491562     , 0.488541     , 0.485657     , 0.482925$
     , 0.480362     , 0.478012     , 0.475891     , 0.474014     , 0.472427     , 0.471115$
     , 0.469894     , 0.469086     , 0.468643     , 0.468597     , 0.468857     , 0.469452$
     , 0.470306     , 0.471420     , 0.472778     , 0.474304     , 0.476013     , 0.477844$
     , 0.479828     , 0.481873     , 0.484009     , 0.486145     , 0.488297     , 0.490448$
     , 0.492554     , 0.494553     , 0.496460     , 0.498230     , 0.499878     , 0.501312$
     , 0.502533     , 0.503510     , 0.504242     , 0.504654     , 0.504776     , 0.504532$
     , 0.503891     , 0.503784     , 0.503647     , 0.503510     , 0.456757     , 0.460190$
     , 0.463348     , 0.466110     , 0.468399     , 0.470184     , 0.471405     , 0.472015$
     , 0.472260     , 0.472168     , 0.471725     , 0.471008     , 0.470016     , 0.468796$
     , 0.467346     , 0.465714     , 0.463928     , 0.462021     , 0.460022     , 0.457932$
     , 0.455780     , 0.453629     , 0.451477     , 0.449356     , 0.447311     , 0.445328$
     , 0.443497     , 0.441788     , 0.440247     , 0.438904     , 0.437790     , 0.436935$
     , 0.436340     , 0.436081     , 0.436142     , 0.436569     , 0.437393     , 0.438614$
     , 0.438614]
     
Wave3X = [      0.484680     , 0.478409     , 0.472137     , 0.465912$
     , 0.459702     , 0.453506     , 0.447327     , 0.441147     , 0.434998     , 0.428833$
     , 0.422653     , 0.416443     , 0.410217     , 0.403976     , 0.397720     , 0.391403$
     , 0.385071     , 0.378677     , 0.372238     , 0.365768     , 0.359192     , 0.352585$
     , 0.345886     , 0.339157     , 0.332291     , 0.325378     , 0.318359     , 0.311249$
     , 0.304047     , 0.296722     , 0.289291     , 0.281754     , 0.274216     , 0.266724$
     , 0.259323     , 0.251999     , 0.244736     , 0.237564     , 0.230469     , 0.223434$
     , 0.216476     , 0.209595     , 0.209595     , 0.212982     , 0.216736     , 0.220871$
     , 0.225327     , 0.230194     , 0.235413     , 0.240982     , 0.246948     , 0.253265$
     , 0.259933     , 0.266983     , 0.274384     , 0.282166     , 0.290298     , 0.298798$
     , 0.307663     , 0.316895     , 0.326462     , 0.334030     , 0.341476     , 0.348801$
     , 0.356003     , 0.363129     , 0.370163     , 0.377060     , 0.383926     , 0.390686$
     , 0.397385     , 0.403992     , 0.410538     , 0.417038     , 0.423447     , 0.429855$
     , 0.436172     , 0.442474     , 0.448746     , 0.454971     , 0.461197     , 0.467377$
     , 0.473557     , 0.479721     , 0.485886     , 0.492050     , 0.498230     , 0.504410$
     , 0.510635     , 0.516861     , 0.523117     , 0.529388     , 0.535385     , 0.541306$
     , 0.547180     , 0.553024     , 0.558838     , 0.564590     , 0.570374     , 0.576141$
     , 0.581909     , 0.587692     , 0.593491     , 0.599335     , 0.605240     , 0.611176$
     , 0.617203     , 0.623276     , 0.629456     , 0.635712     , 0.642090     , 0.648575$
     , 0.655167     , 0.661911     , 0.668793     , 0.675827     , 0.683029     , 0.690399$
     , 0.690399     , 0.682709     , 0.675217     , 0.667892     , 0.660736     , 0.653748$
     , 0.646912     , 0.640228     , 0.633682     , 0.627289     , 0.621017     , 0.614868$
     , 0.608810     , 0.602875     , 0.597031     , 0.591309     , 0.585632     , 0.580048$
     , 0.574524     , 0.569077     , 0.563690     , 0.558350     , 0.553040     , 0.547775$
     , 0.542542     , 0.537323     , 0.532120     , 0.526917     , 0.521729     , 0.516495$
     , 0.511276     , 0.506042     , 0.500748     , 0.495453     , 0.490097     , 0.484680$
     , 0.484680]
     
Wave3Y = [      0.417282     , 0.416061     , 0.415222     , 0.414810$
     , 0.414734     , 0.415039     , 0.415588     , 0.416473     , 0.417603     , 0.418930$
     , 0.420471     , 0.422180     , 0.424042     , 0.426010     , 0.428070     , 0.430222$
     , 0.432373     , 0.434540     , 0.436691     , 0.438766     , 0.440781     , 0.442719$
     , 0.444504     , 0.446136     , 0.447571     , 0.448792     , 0.449799     , 0.450531$
     , 0.450943     , 0.451065     , 0.450821     , 0.450180     , 0.449081     , 0.447449$
     , 0.445328     , 0.442749     , 0.439743     , 0.436371     , 0.432663     , 0.428680$
     , 0.424438     , 0.420013     , 0.350891     , 0.354614     , 0.358505     , 0.362610$
     , 0.366837     , 0.371140     , 0.375488     , 0.379807     , 0.384079     , 0.388229$
     , 0.392227     , 0.396057     , 0.399628     , 0.402893     , 0.405823     , 0.408386$
     , 0.410492     , 0.412155     , 0.413254     , 0.413712     , 0.413818     , 0.413589$
     , 0.413071     , 0.412277     , 0.411194     , 0.409927     , 0.408432     , 0.406799$
     , 0.404999     , 0.403061     , 0.401062     , 0.398987     , 0.396866     , 0.394745$
     , 0.392639     , 0.390549     , 0.388550     , 0.386612     , 0.384811     , 0.383179$
     , 0.381683     , 0.380386     , 0.379318     , 0.378510     , 0.377975     , 0.377731$
     , 0.377823     , 0.378265     , 0.379089     , 0.380341     , 0.381882     , 0.383789$
     , 0.386047     , 0.388641     , 0.391525     , 0.394653     , 0.397995     , 0.401505$
     , 0.405136     , 0.408920     , 0.412766     , 0.416611     , 0.420502     , 0.424332$
     , 0.428085     , 0.431732     , 0.435242     , 0.438599     , 0.441711     , 0.444565$
     , 0.447159     , 0.449432     , 0.451340     , 0.452850     , 0.453949     , 0.454590$
     , 0.484909     , 0.487274     , 0.489120     , 0.490448     , 0.491272     , 0.491638$
     , 0.491592     , 0.491104     , 0.490250     , 0.489029     , 0.487488     , 0.485641$
     , 0.483505     , 0.481125     , 0.478500     , 0.475677     , 0.472702     , 0.469543$
     , 0.466309     , 0.462936     , 0.459488     , 0.456024     , 0.452530     , 0.449036$
     , 0.445572     , 0.442184     , 0.438889     , 0.435684     , 0.432632     , 0.429733$
     , 0.427048     , 0.424545     , 0.422302     , 0.420334     , 0.418640     , 0.417282$
     , 0.417282]
 
Text0X = [      0.660934     , 0.656998     , 0.652435     , 0.647186$
     , 0.639053     , 0.632248     , 0.627045     , 0.623718     , 0.622559     , 0.623749$
     , 0.627182     , 0.632584     , 0.639618     , 0.648010     , 0.657898     , 0.664764$
     , 0.667328     , 0.663132     , 0.661392     , 0.656799     , 0.650284     , 0.646988$
     , 0.643982     , 0.641403     , 0.639145     , 0.637756     , 0.637268     , 0.645737$
     , 0.660080     , 0.667648     , 0.667740     , 0.666351     , 0.660934     , 0.660934$
     , 0.647018     , 0.648972     , 0.650650     , 0.652039     , 0.653458     , 0.654343$
     , 0.654663     , 0.654633     , 0.654633     , 0.654602     , 0.649918     , 0.642227$
     , 0.637497     , 0.637939     , 0.639053     , 0.640793     , 0.642578     , 0.644653$
     , 0.647018     , 0.647018]
     
Text0Y = [      0.287445     , 0.290543     , 0.292450     , 0.293106$
     , 0.291840     , 0.288208     , 0.282532     , 0.275085     , 0.266220     , 0.256683$
     , 0.248672     , 0.242569     , 0.238663     , 0.237305     , 0.238907     , 0.241943$
     , 0.243576     , 0.252167     , 0.250992     , 0.248825     , 0.247650     , 0.248062$
     , 0.249329     , 0.251358     , 0.254486     , 0.258240     , 0.262512     , 0.262512$
     , 0.262512     , 0.262512     , 0.267136     , 0.277313     , 0.287445     , 0.287445$
     , 0.283997     , 0.283783     , 0.283127     , 0.282028     , 0.279831     , 0.276825$
     , 0.273132     , 0.272812     , 0.272476     , 0.272110     , 0.272110     , 0.272110$
     , 0.272110     , 0.275848     , 0.279068     , 0.281555     , 0.282898     , 0.283737$
     , 0.283997     , 0.283997]
     
Text1X = [      0.357101     , 0.353149     , 0.348602     , 0.343353$
     , 0.335220     , 0.328415     , 0.323212     , 0.319870     , 0.318695     , 0.319916$
     , 0.323364     , 0.328720     , 0.335785     , 0.344177     , 0.354065     , 0.360931$
     , 0.363495     , 0.359299     , 0.357544     , 0.352951     , 0.346420     , 0.343155$
     , 0.340149     , 0.337540     , 0.335312     , 0.333923     , 0.333435     , 0.341919$
     , 0.356216     , 0.363785     , 0.363876     , 0.362488     , 0.357101     , 0.357101$
     , 0.343155     , 0.345108     , 0.346786     , 0.348206     , 0.349625     , 0.350510$
     , 0.350800     , 0.350800     , 0.350769     , 0.350754     , 0.346085     , 0.338394$
     , 0.333664     , 0.334091     , 0.335220     , 0.336960     , 0.338715     , 0.340790$
     , 0.343155     , 0.343155]
     
Text1Y = [      0.287445     , 0.290543     , 0.292450     , 0.293106$
     , 0.291840     , 0.288208     , 0.282532     , 0.275085     , 0.266220     , 0.256683$
     , 0.248672     , 0.242569     , 0.238663     , 0.237305     , 0.238907     , 0.241943$
     , 0.243576     , 0.252167     , 0.250992     , 0.248825     , 0.247650     , 0.248062$
     , 0.249329     , 0.251358     , 0.254486     , 0.258240     , 0.262512     , 0.262512$
     , 0.262512     , 0.262512     , 0.267136     , 0.277313     , 0.287445     , 0.287445$
     , 0.283997     , 0.283783     , 0.283127     , 0.282028     , 0.279831     , 0.276825$
     , 0.273132     , 0.272812     , 0.272476     , 0.272110     , 0.272110     , 0.272110$
     , 0.272110     , 0.275848     , 0.279068     , 0.281555     , 0.282898     , 0.283737$
     , 0.283997     , 0.283997]
     
Text2X = [      0.453781     , 0.445923     , 0.438782     , 0.432587$
     , 0.427460     , 0.423584     , 0.421143     , 0.420288     , 0.420914     , 0.422745$
     , 0.425674     , 0.429626     , 0.434509     , 0.440231     , 0.446671     , 0.453781$
     , 0.460876     , 0.467300     , 0.473007     , 0.477890     , 0.481827     , 0.484787$
     , 0.486588     , 0.487228     , 0.486374     , 0.483932     , 0.480072     , 0.474945$
     , 0.468750     , 0.461639     , 0.453781     , 0.453781     , 0.453781     , 0.462173$
     , 0.467743     , 0.470810     , 0.471741     , 0.471481     , 0.470230     , 0.467300$
     , 0.462051     , 0.453781     , 0.445496     , 0.440231     , 0.437302     , 0.436020$
     , 0.435760     , 0.436707     , 0.439789     , 0.445358     , 0.453781     , 0.453781]
     
Text2Y = [      0.313843     , 0.312912     , 0.310165     , 0.305878$
     , 0.300186     , 0.293274     , 0.285370     , 0.276596     , 0.268280     , 0.260712$
     , 0.253998     , 0.248260     , 0.243622     , 0.240173     , 0.238022     , 0.237305$
     , 0.238022     , 0.240173     , 0.243622     , 0.248260     , 0.253998     , 0.260712$
     , 0.268280     , 0.276596     , 0.285370     , 0.293274     , 0.300186     , 0.305878$
     , 0.310165     , 0.312912     , 0.313843     , 0.313843     , 0.302094     , 0.299774$
     , 0.293762     , 0.285568     , 0.276596     , 0.271255     , 0.264130     , 0.256897$
     , 0.251343     , 0.249084     , 0.251343     , 0.256897     , 0.264130     , 0.271255$
     , 0.276596     , 0.285568     , 0.293762     , 0.299774     , 0.302094     , 0.302094]
     
Text3X = [      0.608658     , 0.601532     , 0.596786     , 0.595093$
     , 0.597092     , 0.602097     , 0.608566     , 0.613403     , 0.616638     , 0.617859$
     , 0.615036     , 0.613907     , 0.611130     , 0.607712     , 0.597992     , 0.590378$
     , 0.584885     , 0.581558     , 0.580444     , 0.580948     , 0.582657     , 0.585831$
     , 0.590790     , 0.597778     , 0.607040     , 0.614197     , 0.619278     , 0.621201$
     , 0.618256     , 0.617004     , 0.613632     , 0.608658     , 0.608658]
     
Text3Y = [      0.248642     , 0.250870     , 0.257050     , 0.266327$
     , 0.275742     , 0.281219     , 0.282974     , 0.282288     , 0.281052     , 0.280380$
     , 0.292526     , 0.292831     , 0.293396     , 0.293686     , 0.292130     , 0.287827$
     , 0.281509     , 0.273865     , 0.265594     , 0.260223     , 0.254166     , 0.248169$
     , 0.242966     , 0.239304     , 0.237900     , 0.239075     , 0.241196     , 0.242355$
     , 0.251602     , 0.250854     , 0.249405     , 0.248642     , 0.248642]
     
Text4X = [      0.393478     , 0.390259     , 0.388321     , 0.387680$
     , 0.387680     , 0.399918     , 0.397949     , 0.387680     , 0.387680     , 0.373795$
     , 0.373795     , 0.366104     , 0.368088     , 0.373795     , 0.373795     , 0.375549$
     , 0.380722     , 0.389343     , 0.396179     , 0.400803     , 0.402481     , 0.399887$
     , 0.399048     , 0.396744     , 0.393478     , 0.393478]
     
Text4Y = [      0.247116     , 0.248352     , 0.252167     , 0.258545$
     , 0.282654     , 0.282654     , 0.291840     , 0.291840     , 0.304169     , 0.304169$
     , 0.291840     , 0.291840     , 0.282654     , 0.282654     , 0.254608     , 0.245010$
     , 0.239227     , 0.237305     , 0.238251     , 0.240005     , 0.240982     , 0.249191$
     , 0.248642     , 0.247650     , 0.247116     , 0.247116]
     
Text5X = [      0.272690     , 0.273865     , 0.276550     , 0.279999$
     , 0.283417     , 0.286026     , 0.287079     , 0.305923     , 0.313004     , 0.299118$
     , 0.294434     , 0.294281     , 0.279465     , 0.265930     , 0.251114     , 0.250961$
     , 0.246277     , 0.232391     , 0.239471     , 0.258316     , 0.259369     , 0.261978$
     , 0.265396     , 0.268845     , 0.271530     , 0.272690     , 0.272690]
     
Text5Y = [      0.262634     , 0.266983     , 0.276703     , 0.289078$
     , 0.301315     , 0.310684     , 0.314423     , 0.314423     , 0.238419     , 0.238419$
     , 0.291443     , 0.291443     , 0.238419     , 0.238419     , 0.291443     , 0.291443$
     , 0.238419     , 0.238419     , 0.314423     , 0.314423     , 0.310684     , 0.301315$
     , 0.289078     , 0.276703     , 0.266983     , 0.262634     , 0.262634]
     
Text6X = [      0.530457     , 0.526093     , 0.517746     , 0.512619$
     , 0.512589     , 0.512573     , 0.512543     , 0.513641     , 0.515915     , 0.517914$
     , 0.521118     , 0.523209     , 0.523972     , 0.521866     , 0.521057     , 0.518860$
     , 0.515671     , 0.507660     , 0.501312     , 0.498718     , 0.498718     , 0.498718$
     , 0.498718     , 0.496201     , 0.492767     , 0.491028     , 0.493011     , 0.494263$
     , 0.496765     , 0.498718     , 0.498718     , 0.498718     , 0.498718     , 0.498718$
     , 0.498718     , 0.512619     , 0.512619     , 0.512619     , 0.512619     , 0.512619$
     , 0.512619     , 0.517517     , 0.525558     , 0.530457     , 0.530457     , 0.530457$
     , 0.530457     , 0.530457     , 0.530457     , 0.544357     , 0.544357     , 0.544357$
     , 0.544357     , 0.544357     , 0.544357     , 0.548386     , 0.554871     , 0.558899$
     , 0.558899     , 0.558899     , 0.558899     , 0.558899     , 0.558899     , 0.572769$
     , 0.572769     , 0.565689     , 0.552292     , 0.544357     , 0.544327     , 0.544296$
     , 0.544281     , 0.545380     , 0.547653     , 0.549652     , 0.552841     , 0.554947$
     , 0.555710     , 0.553604     , 0.552795     , 0.550598     , 0.547409     , 0.539368$
     , 0.533051     , 0.530457     , 0.530457     , 0.530457     , 0.530457     , 0.530457]
     
Text6Y = [      0.291840     , 0.291840     , 0.291840     , 0.291840$
     , 0.293427     , 0.295288     , 0.296188     , 0.300949     , 0.303223     , 0.303848$
     , 0.303635     , 0.302994     , 0.302628     , 0.312637     , 0.312836     , 0.313217$
     , 0.313446     , 0.311417     , 0.305099     , 0.294250     , 0.293793     , 0.292816$
     , 0.291840     , 0.291840     , 0.291840     , 0.291840     , 0.282684     , 0.282684$
     , 0.282684     , 0.282684     , 0.277603     , 0.266724     , 0.253998     , 0.243423$
     , 0.239014     , 0.239014     , 0.243423     , 0.253998     , 0.266724     , 0.277603$
     , 0.282684     , 0.282684     , 0.282684     , 0.282684     , 0.277603     , 0.266724$
     , 0.253998     , 0.243423     , 0.239014     , 0.239014     , 0.243423     , 0.253998$
     , 0.266724     , 0.277603     , 0.282684     , 0.282684     , 0.282684     , 0.282684$
     , 0.277603     , 0.266724     , 0.253967     , 0.243408     , 0.238983     , 0.238983$
     , 0.291840     , 0.291840     , 0.291840     , 0.291840     , 0.293427     , 0.295288$
     , 0.296188     , 0.300949     , 0.303223     , 0.303848     , 0.303635     , 0.302994$
     , 0.302628     , 0.312637     , 0.312836     , 0.313217     , 0.313446     , 0.311417$
     , 0.305099     , 0.294250     , 0.293793     , 0.292816     , 0.291840     , 0.291840]
     





	;;;;;;;;;
	;colours;
	;;;;;;;;;

	;If we are in 24-bit colour mode,
	;then we can just draw with direct rgb colours.
	;
	;If we are NOT in 24-bit colour mode,
	;then we have to steal some colour-palette entries for the logo.
	;this happened in the old logodraw2, using the table_origin keyword.

	IF(!D.N_COLORS EQ 16777216) THEN BEGIN
	
		;we are in 24-bit mode.
	
		;white version?
		IF KEYWORD_SET(OnWhite) THEN BEGIN

			;white version : black text, white bg, green(or black) waves.
			TextCol     = '000000'XL
			OuterBoxCol = 'FFFFFF'XL
			InnerBoxCol = 'FFFFFF'XL
			IF KEYWORD_SET(BW) THEN WaveCol = '000000'XL $
			    ELSE		WaveCol = '0EDBB9'XL 
			
		ENDIF ELSE BEGIN
		
			;black version : white text, black bg, green(or white) waves.
			TextCol     = 'FFFFFF'XL
			OuterBoxCol = '000000'XL
			InnerBoxCol = '000000'XL
			IF KEYWORD_SET(BW) THEN WaveCol = 'FFFFFF'XL $
			    ELSE		WaveCol = '0EDBB9'XL 
				
		ENDELSE
			
		;we don't need to pay attention to the table_origin keyword in 24-bit colour mode.
		IF KEYWORD_SET(table_origin) THEN $
			print, "LOGODRAW: table_origin keyword is ignored because we are in 24-bit colour"
		
		
	ENDIF ELSE BEGIN

		;we are NOT in 24-bit mode. 
		;steal some colour-palette entries.
		
		;default palette origin for logo colours
		palette_steal_origin = !D.TABLE_SIZE - 5
	
		;use table_origin
		IF KEYWORD_SET(table_origin) THEN BEGIN
		
			;valid table_origin?
			IF (table_origin LT 0) OR (table_origin GT !D.TABLE_SIZE - 5) THEN BEGIN
				print, "LOGODRAW: table_origin keyword out of range. Using default value."
			ENDIF ELSE BEGIN
				palette_steal_origin = table_origin
			ENDELSE

		ENDIF

		
		;set the colours to point to our stolen palette entries.
		;as we are not in 24-bit mode they will be treated as indices.
		TextCol     = palette_steal_origin + 0
		OuterBoxCol = palette_steal_origin + 1
		InnerBoxCol = palette_steal_origin + 2
		WaveCol     = palette_steal_origin + 3
		
		
		;alter the palette entries
		IF KEYWORD_SET(OnWhite) THEN BEGIN

			;white version : black text, white bg, green(or black) waves.
			TVLCT, '00'X, '00'X, '00'X, palette_steal_origin + 0  ;text col
			TVLCT, 'FF'X, 'FF'X, 'FF'X, palette_steal_origin + 1  ;outer box col
			TVLCT, 'FF'X, 'FF'X, 'FF'X, palette_steal_origin + 2  ;inner box col

			;wave col
			IF KEYWORD_SET(BW) THEN  TVLCT, '00'X, '00'X, '00'X, palette_steal_origin + 3 $
			    ELSE                 TVLCT, 'B9'X, 'DB'X, '0E'X, palette_steal_origin + 3

		ENDIF ELSE BEGIN
		
			;black version : white text, black bg, green(or white) waves.
			TVLCT, 'FF'X, 'FF'X, 'FF'X, palette_steal_origin + 0  ;text col
			TVLCT, '00'X, '00'X, '00'X, palette_steal_origin + 1  ;outer box col
			TVLCT, '00'X, '00'X, '00'X, palette_steal_origin + 2  ;inner box col

			;wave col
			IF KEYWORD_SET(BW) THEN  TVLCT, 'FF'X, 'FF'X, 'FF'X, palette_steal_origin + 3 $
			    ELSE                 TVLCT, 'B9'X, 'DB'X, '0E'X, palette_steal_origin + 3
			
		ENDELSE
		
	ENDELSE




	;;;;;;;;;;;;;;;;;
	;unused keywords;
	;;;;;;;;;;;;;;;;;


	IF KEYWORD_SET(noplot) THEN BEGIN
		print, 'Warning :  The `noplot` keyword is no longer supported by logodraw.'
		print, '(It used to control GIP usage from logodraw2)'
		print, 'Please contact the graphics team if you require further support.'
		;don't plot
		RETURN;, 0
	ENDIF

	;the return keyword used to return a variable from LINNKLOAD...
	IF KEYWORD_SET(return) THEN BEGIN
		print, 'Warning :  The `return` keyword is no longer supported by logodraw.'
		print, '(It used to contain the return code from logo2000)'
		print, 'Please contact the graphics team if you require further support.'
		return = 0
	ENDIF

	;the trace keyword used to return a variable from LINNKLOAD...
	IF KEYWORD_SET(trace) THEN BEGIN
		print, 'Warning :  The `trace` keyword is no longer supported by logodraw.'
		print, '(It used to tell logo2000 to print messages)'
		print, 'Please contact the graphics team if you require further support.'
	ENDIF

	IF(mimick_logodraw2 EQ 0) THEN BEGIN
		IF KEYWORD_SET(keepaspect) THEN BEGIN
			print, 'Warning :  The `keepaspect` keyword is no longer supported by logodraw,'
			print, 'unless you are calling with /mimick_logodraw2.'
			print, 'Please contact the graphics team if you require further support.'
		ENDIF
	ENDIF





	;;;;;;;;;;;;;;;;;;;;;;;
	;x,y and height params;
	;;;;;;;;;;;;;;;;;;;;;;;

	xpos=FLOAT(x)
	ypos=FLOAT(y)
	DesiredYSize = 0.1

	;choose a size from keyword ysize, param height, or set a default...
	IF KEYWORD_SET(ysize) THEN BEGIN
		DesiredYSize = FLOAT(ysize) 
	ENDIF ELSE IF KEYWORD_SET(height) THEN BEGIN
		DesiredYSize = FLOAT(height) 
	ENDIF ELSE BEGIN
		DesiredYSize = FLOAT(!P.Charsize/10.0 > 0.1)
	ENDELSE



	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;convert x,y and height to normalised coords.
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;from normalised coords
	IF KEYWORD_SET(normal) THEN BEGIN

		;x,y and height don't need conversion - they are already normalised
				
	;from map coords
	ENDIF ELSE IF KEYWORD_SET(map) THEN BEGIN

		;note, even with /map, the ysize is treated as a normalised coord.

		;wave
		
		COMMON Map_sysvar, map_called
		IF N_ELEMENTS(map_called) EQ 0 THEN $
			MESSAGE, 'The MAP procedure must be called before /Map can be used'
		
		MAP_PLOTS, /Nodata, x, y, oxpos, oypos
		xpos(*)=oxpos 		;check this with marc
		ypos(*)=oypos
		status = EXECUTE('xpos = float((!Map.X.S(0) + !Map.X.S(1) * xpos))')
		status = EXECUTE('ypos = float((!Map.Y.S(0) + !Map.Y.S(1) * ypos))')
		
		
	;from data coords
	ENDIF ELSE BEGIN

		res = CONVERT_COORD(x, y, /DATA, /TO_NORMAL)
		xpos = res(0)
		ypos = res(1)

		res = CONVERT_COORD(0, 0, /DATA, /TO_NORMAL)
		Y0Norm = res(1)		

		res = CONVERT_COORD(0, DesiredYSize, /DATA, /TO_NORMAL)
		DesiredYSize = res(1) - Y0Norm

	ENDELSE




	
	AspectXAdjust = 1.0
	AspectYAdjust = 1.0

	;Adjust for window aspect ratio.
	aspect = (FLOAT(!d.y_size))/(!d.x_size) 




	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;LOGODRAW2 BUGS REPRODUCTION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF(mimick_logodraw2 GT 0) THEN BEGIN

		IF aspect LT 1.0 THEN BEGIN
			AspectXAdjust = aspect
		ENDIF ELSE IF aspect GT 1.0 THEN BEGIN
			AspectXAdjust = aspect
		ENDIF
		
		IF KEYWORD_SET(map) THEN BEGIN
			IF aspect LT 1.0 THEN BEGIN
				xpos = xpos*aspect
			ENDIF ELSE IF aspect GT 1.0 THEN BEGIN
				ypos = ypos/aspect
				DesiredYSize = DesiredYSize/aspect
			ENDIF
		ENDIF
		
		;this bit of code mimicks the behaviour of the /keepaspect keyword in logodraw2.
		;basically, it STOPS keeping the aspect ratio, and the position goes wrong too.
		IF KEYWORD_SET(keepaspect) THEN BEGIN
			IF aspect LT 1.0 THEN BEGIN
				xpos = xpos / aspect
				AspectXAdjust = AspectXAdjust / aspect
			ENDIF ELSE IF aspect GT 1.0 THEN BEGIN
				ypos = ypos * aspect - DesiredYSize
				AspectYAdjust = AspectYAdjust * aspect
			ENDIF
		ENDIF
	ENDIF $

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;CORRECT OPERATION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ELSE BEGIN

;		IF aspect LT 1.0 THEN BEGIN
;			AspectXAdjust = aspect
;		ENDIF ELSE IF aspect GT 1.0 THEN BEGIN
;			AspectYAdjust = 1.0 / aspect
;		ENDIF

		AspectXAdjust = aspect

	ENDELSE
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;






	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;scale and translate the points
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
		
	;translate to 0,0
	minx = MIN(WhiteBoxX)
	miny = MIN(WhiteBoxY)

	WhiteBoxX = WhiteBoxX - minx
	BlueBoxX = BlueBoxX - minx
	Wave0X = Wave0X - minx
	Wave1X = Wave1X - minx
	Wave2X = Wave2X - minx
	Wave3X = Wave3X - minx
	Text0X = Text0X - minx
	Text1X = Text1X - minx
	Text2X = Text2X - minx
	Text3X = Text3X - minx
	Text4X = Text4X - minx
	Text5X = Text5X - minx
	Text6X = Text6X - minx

	WhiteBoxY = WhiteBoxY - miny
	BlueBoxY = BlueBoxY - miny
	Wave0Y = Wave0Y - miny
	Wave1Y = Wave1Y - miny
	Wave2Y = Wave2Y - miny
	Wave3Y = Wave3Y - miny
	Text0Y = Text0Y - miny
	Text1Y = Text1Y - miny
	Text2Y = Text2Y - miny
	Text3Y = Text3Y - miny
	Text4Y = Text4Y - miny
	Text5Y = Text5Y - miny
	Text6Y = Text6Y - miny

	minx = 0
	miny = 0
	maxx = MAX(WhiteBoxX)
	maxy = MAX(WhiteBoxY)


	;scale it to the required size
	CurrentYSize = MaxY 	;(it's at 0,0)
	Scale = DesiredYSize / CurrentYSize

	WhiteBoxX = WhiteBoxX * Scale * AspectXAdjust
	BlueBoxX = BlueBoxX* Scale * AspectXAdjust
	Wave0X = Wave0X * Scale * AspectXAdjust
	Wave1X = Wave1X * Scale * AspectXAdjust
	Wave2X = Wave2X * Scale * AspectXAdjust
	Wave3X = Wave3X * Scale * AspectXAdjust
	Text0X = Text0X * Scale * AspectXAdjust
	Text1X = Text1X * Scale * AspectXAdjust
	Text2X = Text2X * Scale * AspectXAdjust
	Text3X = Text3X * Scale * AspectXAdjust
	Text4X = Text4X * Scale * AspectXAdjust
	Text5X = Text5X * Scale * AspectXAdjust
	Text6X = Text6X * Scale * AspectXAdjust

	WhiteBoxY = WhiteBoxY * Scale * AspectYAdjust
	BlueBoxY = BlueBoxY* Scale * AspectYAdjust
	Wave0Y = Wave0Y * Scale * AspectYAdjust
	Wave1Y = Wave1Y * Scale * AspectYAdjust
	Wave2Y = Wave2Y * Scale * AspectYAdjust
	Wave3Y = Wave3Y * Scale * AspectYAdjust
	Text0Y = Text0Y * Scale * AspectYAdjust
	Text1Y = Text1Y * Scale * AspectYAdjust
	Text2Y = Text2Y * Scale * AspectYAdjust
	Text3Y = Text3Y * Scale * AspectYAdjust
	Text4Y = Text4Y * Scale * AspectYAdjust
	Text5Y = Text5Y * Scale * AspectYAdjust
	Text6Y = Text6Y * Scale * AspectYAdjust


	;in order to mimick logodraw2,
	;we need to add one extra pixel in width and height.
	IF(mimick_logodraw2 GT 0) THEN BEGIN

		;it's still at (0,0), so max = size (in normalised coords)
		maxx = MAX(WhiteBoxX)
		maxy = MAX(WhiteBoxY)

		;normalised size of a pixel
		XPelNorm = 1.0 / !D.X_SIZE
		YPelNorm = 1.0 / !D.Y_SIZE


		;scale, so that it increases by one pel...
		XIncFrac = (maxx+XPelNorm) / maxx
		YIncFrac = (maxy+YPelNorm) / maxy

		WhiteBoxX = WhiteBoxX * XIncFrac
		BlueBoxX = BlueBoxX* XIncFrac
		Wave0X = Wave0X * XIncFrac
		Wave1X = Wave1X * XIncFrac
		Wave2X = Wave2X * XIncFrac
		Wave3X = Wave3X * XIncFrac
		Text0X = Text0X * XIncFrac
		Text1X = Text1X * XIncFrac
		Text2X = Text2X * XIncFrac
		Text3X = Text3X * XIncFrac
		Text4X = Text4X * XIncFrac
		Text5X = Text5X * XIncFrac
		Text6X = Text6X * XIncFrac

		WhiteBoxY = WhiteBoxY * YIncFrac
		BlueBoxY = BlueBoxY* YIncFrac
		Wave0Y = Wave0Y * YIncFrac
		Wave1Y = Wave1Y * YIncFrac
		Wave2Y = Wave2Y * YIncFrac
		Wave3Y = Wave3Y * YIncFrac
		Text0Y = Text0Y * YIncFrac
		Text1Y = Text1Y * YIncFrac
		Text2Y = Text2Y * YIncFrac
		Text3Y = Text3Y * YIncFrac
		Text4Y = Text4Y * YIncFrac
		Text5Y = Text5Y * YIncFrac
		Text6Y = Text6Y * YIncFrac
		
		;do this one too, as it's used below...
		DesiredYSize = DesiredYSize + YPelNorm
	ENDIF



	;translate to desired position
	WhiteBoxX = WhiteBoxX + xpos
	BlueBoxX = BlueBoxX + xpos
	Wave0X = Wave0X + xpos
	Wave1X = Wave1X + xpos
	Wave2X = Wave2X + xpos
	Wave3X = Wave3X + xpos
	Text0X = Text0X + xpos
	Text1X = Text1X + xpos
	Text2X = Text2X + xpos
	Text3X = Text3X + xpos
	Text4X = Text4X + xpos
	Text5X = Text5X + xpos
	Text6X = Text6X + xpos

	WhiteBoxY = WhiteBoxY + ypos
	BlueBoxY = BlueBoxY + ypos
	Wave0Y = Wave0Y + ypos
	Wave1Y = Wave1Y + ypos
	Wave2Y = Wave2Y + ypos
	Wave3Y = Wave3Y + ypos
	Text0Y = Text0Y + ypos
	Text1Y = Text1Y + ypos
	Text2Y = Text2Y + ypos
	Text3Y = Text3Y + ypos
	Text4Y = Text4Y + ypos
	Text5Y = Text5Y + ypos
	Text6Y = Text6Y + ypos




	;Logodraw2 drew from the top left, so shift the y down to mimick this.
	;This could stay in, once the mimickry is no longer required,
	;but it makes more sense to draw in a way that matches wave itself (i.e from bottom left)
	IF(mimick_logodraw2 GT 0) THEN BEGIN
		WhiteBoxY = WhiteBoxY - DesiredYSize
		BlueBoxY = BlueBoxY - DesiredYSize
		Wave0Y = Wave0Y - DesiredYSize
		Wave1Y = Wave1Y - DesiredYSize
		Wave2Y = Wave2Y - DesiredYSize
		Wave3Y = Wave3Y - DesiredYSize
		Text0Y = Text0Y - DesiredYSize
		Text1Y = Text1Y - DesiredYSize
		Text2Y = Text2Y - DesiredYSize
		Text3Y = Text3Y - DesiredYSize
		Text4Y = Text4Y - DesiredYSize
		Text5Y = Text5Y - DesiredYSize
		Text6Y = Text6Y - DesiredYSize
	ENDIF




	IF KEYWORD_SET(verbose) THEN BEGIN
	   info, xpos, ypos, DesiredYSize
	ENDIF


	;draw

	IF(KEYWORD_SET(transparent) EQ 0) THEN BEGIN
		;white box
		POLYFILL, WhiteBoxX, WhiteBoxY, color=OuterBoxCol, /normal

		;blue box
		POLYFILL, BlueBoxX, BlueBoxY, color=InnerBoxCol, /normal
	ENDIF

	;waves
	POLYFILL, Wave0X, Wave0Y, color=WaveCol, /normal
	POLYFILL, Wave1X, Wave1Y, color=WaveCol, /normal
	POLYFILL, Wave2X, Wave2Y, color=WaveCol, /normal
	POLYFILL, Wave3X, Wave3Y, color=WaveCol, /normal

	;text
	POLYFILL, Text0X, Text0Y, color=TextCol, /normal
	POLYFILL, Text1X, Text1Y, color=TextCol, /normal
	POLYFILL, Text2X, Text2Y, color=TextCol, /normal
	POLYFILL, Text3X, Text3Y, color=TextCol, /normal
	POLYFILL, Text4X, Text4Y, color=TextCol, /normal
	POLYFILL, Text5X, Text5Y, color=TextCol, /normal
	POLYFILL, Text6X, Text6Y, color=TextCol, /normal

END

