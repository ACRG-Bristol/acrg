# Copyright 2005-2007 ECMWF
#
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.

#  Type of first fixed surface
codetable[1] typeOfFirstFixedSurface ('4.5.table',masterDir,localDir) : dump,no_copy,edition_specific,string_type;
meta unitsOfFirstFixedSurface codetable_units(typeOfFirstFixedSurface) : dump;
meta nameOfFirstFixedSurface codetable_title(typeOfFirstFixedSurface) : dump;

#  Scale factor of first fixed surface
signed[1] scaleFactorOfFirstFixedSurface = missing()  : can_be_missing,dump,no_copy,edition_specific;

#  Scaled value of first fixed surface
unsigned[4] scaledValueOfFirstFixedSurface = missing()  : can_be_missing,dump,no_copy,edition_specific;

#  Type of second fixed surface
codetable[1] typeOfSecondFixedSurface ('4.5.table',masterDir,localDir) = 255 : dump,no_copy,edition_specific;
meta unitsOfSecondFixedSurface codetable_units(typeOfFirstFixedSurface) : dump;
meta nameOfSecondFixedSurface codetable_title(typeOfFirstFixedSurface) : dump;

#  Scale factor of second fixed surface
signed[1] scaleFactorOfSecondFixedSurface = missing() : can_be_missing,dump,no_copy,edition_specific;

#  Scaled value of second fixed surface
unsigned[4] scaledValueOfSecondFixedSurface = missing() : can_be_missing,dump,no_copy,edition_specific;

transient pressureUnits="hPa";

concept_nofail vertical.typeOfLevel (unknown) {
#set uses the last one
#get returns the first match
  'surface'       = { typeOfFirstFixedSurface=1;   typeOfSecondFixedSurface=255;   }
  'cloudBase'     = { typeOfFirstFixedSurface=2;   typeOfSecondFixedSurface=255;   }
  'cloudTop'      = { typeOfFirstFixedSurface=3;   typeOfSecondFixedSurface=255;   }
  'isothermZero'  = { typeOfFirstFixedSurface=4;   typeOfSecondFixedSurface=255;   }
  'adiabaticCondensation' = {typeOfFirstFixedSurface=5;   typeOfSecondFixedSurface=255;  }
  'maxWind' = {typeOfFirstFixedSurface=6; typeOfSecondFixedSurface=255;}
  'tropopause' = {typeOfFirstFixedSurface=7; typeOfSecondFixedSurface=255;}
  'nominalTop' = {typeOfFirstFixedSurface=8; typeOfSecondFixedSurface=255; }
  'seaBottom' = {typeOfFirstFixedSurface=9;    typeOfSecondFixedSurface=255;}
  'isothermal' = {typeOfFirstFixedSurface=20;   typeOfSecondFixedSurface=255;}
  'isobaricInhPa' = {typeOfFirstFixedSurface=100;pressureUnits='hPa'; typeOfSecondFixedSurface=255;}
  'isobaricInPa' = {typeOfFirstFixedSurface=100; typeOfSecondFixedSurface=255;pressureUnits='Pa'; }
  'isobaricLayer' = {typeOfFirstFixedSurface=100; typeOfSecondFixedSurface=100;}
  'meanSea' = { typeOfFirstFixedSurface=101; typeOfSecondFixedSurface=255; }
  'heightAboveSea' = {typeOfFirstFixedSurface=102; typeOfSecondFixedSurface=255;}
  'heightAboveSeaLayer' = {typeOfFirstFixedSurface=102; typeOfSecondFixedSurface=102;}
  'heightAboveGround' = {typeOfFirstFixedSurface=103; typeOfSecondFixedSurface=255;}
  'heightAboveGroundLayer' = {typeOfFirstFixedSurface=103;typeOfSecondFixedSurface=103;}
  'sigma' = {typeOfFirstFixedSurface=104; typeOfSecondFixedSurface=255;}
  'sigmaLayer' = {typeOfFirstFixedSurface=104; typeOfSecondFixedSurface=104;}
  'hybrid' = {typeOfFirstFixedSurface=105; typeOfSecondFixedSurface=255;}
  'hybridLayer' = {typeOfFirstFixedSurface=105; typeOfSecondFixedSurface=105; }
  'depthBelowLand' = {typeOfFirstFixedSurface=106;  typeOfSecondFixedSurface=255;}
  'depthBelowLandLayer' = {typeOfFirstFixedSurface=106; typeOfSecondFixedSurface=106;}
  'theta' = {typeOfFirstFixedSurface=107; typeOfSecondFixedSurface=255;}
  'thetaLayer' = {typeOfFirstFixedSurface=107;typeOfSecondFixedSurface=107;}
  'pressureFromGround' = {typeOfFirstFixedSurface=108; typeOfSecondFixedSurface=255;}
  'pressureFromGroundLayer' = {typeOfFirstFixedSurface=108;typeOfSecondFixedSurface=108;}
  'potentialVorticity' = {typeOfFirstFixedSurface=109; typeOfSecondFixedSurface=255;}
  'eta' = {typeOfFirstFixedSurface=111;  typeOfSecondFixedSurface=255;}
  'depthBelowSea' = {typeOfFirstFixedSurface=160; typeOfSecondFixedSurface=255;}
  'entireAtmosphere' = {typeOfFirstFixedSurface=1;typeOfSecondFixedSurface=8;}
  'entireOcean' = {typeOfFirstFixedSurface=1;typeOfSecondFixedSurface=9;}
}

alias levelType=typeOfFirstFixedSurface;

_if (typeOfSecondFixedSurface==255) {
  meta level g2level(typeOfFirstFixedSurface,
    scaleFactorOfFirstFixedSurface,
    scaledValueOfFirstFixedSurface,
    pressureUnits)  :dump;
  transient bottomLevel=level;
  transient topLevel=level;
} else {
  meta topLevel g2level(typeOfFirstFixedSurface,
    scaleFactorOfFirstFixedSurface,
    scaledValueOfFirstFixedSurface,
    pressureUnits)  :dump;
  meta bottomLevel g2level(typeOfSecondFixedSurface,
    scaleFactorOfSecondFixedSurface,
    scaledValueOfSecondFixedSurface,
    pressureUnits)  :dump;
	transient level=topLevel;
}
alias ls.level=level;
alias vertical.level=level;
alias vertical.bottomLevel=bottomLevel;
alias vertical.topLevel=topLevel;

if (extraDimensionPresent) {
	alias mars.levelist = dimension;
	alias mars.levtype = dimensionType;
} else {
	alias mars.levelist = level;
	alias mars.levtype  = typeOfFirstFixedSurface;
}
alias ls.typeOfLevel=typeOfLevel;

