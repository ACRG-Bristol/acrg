Changes to NAME III

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 1.3 of NAME III released 7/10/03.
Changes prior to version 1.3 not recorded.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

8/10/03 
Some diagnostic write statements in PlumeRise.F90 commented out. 
(DJT)

!-------------------------------------------------------------------------------------

16/10/03
Some tidying of NWPMet.F90 with some minor associated changes to CoordinateSystem.F90,
Mets.P90, Flows.P90 and Input.F90. Changes include: 
(i) Improvements made in calculating differences needed for the horizontal gradients 
of the Z field in calculating required W from input W for pre-UM5 data.
(ii) Correction of bug in calculating required W from input W for UM5 data - the 
routine MetricCoeffs was called without all the input variables defined. 
(iii) Addition of ability to use of arbitrary coord systems to specify vertical 
velocity and cloud base/top. The coord systems now need to be specified in the input 
in 'NWP Met Definitions'.
(iv) 'Met File Type' and 'Mesoscale' removed from the input in 'NWP Met Definitions'.
(v) Grid interpolation routines moved to CoordinateSystem.F90.
(DJT)

!-------------------------------------------------------------------------------------

16/10/03
Some rationalisation of 'set up' routines, with changes to CoordinateSystem.F90, 
SingleSiteMet.F90, NWPMet.F90, Mets.P90, SingleSiteFlow.F90, NWPFlow.F90, 
BuildingFlow.F90, Flows.P90 and MainNameIII.F90.
(DJT)

!-------------------------------------------------------------------------------------

17/11/03
Some tidying of NWPMet.F90 with some minor associated changes to GlobalParameters.F90,
String.F90, System.F90, CoordinateSystem.F90, FlowAndFlowProfile.F90, 
SingleSiteMet.F90, NWPFlow.F90, Output.F90 and Input.F90. Changes include:
(i) Allowing 'top' to be specified as the highest level in the input in 'NWP Met File 
Structure'.
(ii) Allowing dummy fields with sizes corresponding to the U and V horizontal grids to
be specified in the input in 'NWP Met File Structure' (previously dummy fields had to 
be on the main horizontal grid).
(iii) Input keywords and variable names 'NWP Met File Structure' and 'Met File 
Structure' changed to 'NWP Met File Structure Definition' and 'Met File Structure 
Definition'.
(iv) 'Prefix' added to the input in 'NWP Met Definitions'.
(v) Improved error messages.
(vi) Length of character strings used in defining arrays FieldNames3d and FieldNames2d 
made the same length so as to compiler under the Linux Intel Compiler.
(vii) Treatment of missing pressure data rationalised.
(viii) UStar calculation corrected (input stress fields are dynamic not kinematic 
stresses as previously assumed). The input field names 'uw-stress' and 'vw-stress' in 
'NWP Met File Structure' have been renamed 'surface stress (u-cpt) (N/m^2)' and 
'surface stress (v-cpt) (N/m^2)' to reflect this.
(ix) The unused eta definitions in the NWP met definition files (which could have been 
used to define vertical coord systems which 'hit' every level of every vertical 
grid) have been removed.
(x) Various input field names in 'NWP Met File Structure' have been renamed to make 
units clear where they might not be (by default we assume SI units and have not given
units where their is no risk of confusion). The changes are:
    'temperature'                 becomes 'temperature (K)'
    'pressure'                    becomes 'pressure (Pa)'
    'dynamic cloud liquid water'  becomes 'dynamic cloud liquid water (kg/kg)'
    'dynamic cloud ice'           becomes 'dynamic cloud ice (kg/kg)'
    'sea level pressure'          becomes 'sea level pressure (Pa)'
    'convective cloud amount'     becomes 'convective cloud amount (0-1)'
    'dynamic high cloud amount'   becomes 'dynamic high cloud amount (0-1)'  
    'dynamic medium cloud amount' becomes 'dynamic medium cloud amount (0-1)'
    'dynamic low cloud amount   ' becomes 'dynamic low cloud amount (0-1)'
    'convective rain'             becomes 'convective rain (kg/(m^2 s))' 
    'convective snow'             becomes 'convective snow (kg/(m^2 s))' 
    'dynamic rain'                becomes 'dynamic rain (kg/(m^2 s))'    
    'dynamic snow'                becomes 'dynamic snow (kg/(m^2 s))' 
(xi) Met definition files for UM5 corrected to reflect the fact that P in the files is
stored on the W-T levels. 
(xii) Extra 10m level removed from met definition file UMMetDefnMH2001.txt (the 10m 
level appears in the met file twice). In detail: level removed from 'Eta Definition' 
and dummy fields introduced in 'NWP Met File Structure Definition'. 
(DJT, MCH)

!-------------------------------------------------------------------------------------

22/11/03
Improvements to output calculations involving changes to Output.F90, Particle.F90, 
Puff.F90, Case.F90 and Input.F90. Changes include:
(i) Deposition rate corrected for particles (area calculation had metric coefficients
missing).
(ii) Deposition rate calculated for puffs.
(iii) Total deposition rate added as a possible output (in addition to separate dry 
and wet deposition rates).
(iv) Field name 'Conc' (in input in 'Output Requirements - Fields' and in 'Output 
Requirements - Pdfs') changed to 'Air Concentration'. Also block header 
'Output Requirements - Pdfs :' in input changed to 'Output Requirements - Pdfs:'.
(v) Some initial work on time averaged or integrated output done, although full range 
of options not yet supported. This has some implications for input. 'T Average' (in 
input in 'Output Requirements - Fields' and in 'Output Requirements - Pdfs') is now 
called 'T Av or Int'. The values given for this variable must be 'Av', 'Int', 'No' or 
blank. Also 'Av Time' and '# Av Times' added in 'Output Requirements - Fields'.
(vi) Some miscellaneous tidying of the code.
(DJT)

!-------------------------------------------------------------------------------------

25/11/03
Method of reading in named blocks changed in order to (i) avoid problems if there are 
blocks with the same name, and (ii) simplify the code structure. In addition the 
warning message for an unrecognised variable name has been suppressed for input file 
variable names of the form 'Notes ...' and the character strings in any array 
constructor have been made the same length so as to compiler under the Linux Intel 
Compiler. Files changed are GlobalParameters.F90, HeadedFile.F90, 
CoordinateSystem.F90, NWPMet.F90, NWPFlow.F90 and Input.F90.
(ARJ)

!-------------------------------------------------------------------------------------

3/12/03
Some tidying involving changes to GlobalParameters.F90, HeadedFile.F90, NWPMet.F90, 
Flows.P90, Species.F90, Source.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes 
include:
(i) Extending the named blocks reading method discussed above (25/11/03) to the 
remaining named blocks, namely Flow Order, Flow Subset, Particle Size Distribution and 
Source Time Dependency.
(ii) Improved error messages for errors in the format of the input files.
(iii) Particles outside domain now lost without warning or error message or run 
termination.
(DJT)

!-------------------------------------------------------------------------------------

1/3/04
Various changes to GlobalParameters.F90, Physics.F90, Time.F90, HeadedFile.F90, 
NWPMet.F90, Flows.P90, Species.F90, Source.F90, Output.F90, Particle.F90, Puff.F90, 
Case.F90, Input.F90 and MainNameIII.F90 and addition of LincomFlow.F90. Changes 
include:
(i) Some tidying of Species.F90 and Source.F90.
(ii) 'Maximum Diameter' and 'Cumulative Percentage' (in input in 'Particle Size 
Distribution') are now called 'Diameter' and 'Cumulative Fraction'.
(iii) Source shapes changed to 'Ellipsoid' and 'Cuboid' (in input in 'Sources'). 
Circular horizontal sources now obtained by specifying 'Ellipsoid' and putting dX = 
dY, dZ = 0, and Angle = anything. 'Diameter' is no longer recognised as an input 
variable in 'Sources'.
(iv) Can now specify source strength as a rate, by e.g. setting source strength to
'SO2 1.0 g/s'. Can also set the number of particles released as a rate, e.g. '10/s'.
(v) 'Metres?' added to the 'Sources' input - this specifies whether the source size is 
given in metres or in the units used in the underlying coord system.
(vi) LincomFlow.F90 added - this is currently just a sketch (based on NWPFlow.F90) of 
the form the module will eventually take.
(vii) Multiple species capability added and preliminary work done for chemistry. Note 
'Species' now needs to be specified in the input file when requesting certain types 
of output (e.g. concentration and deposition) and a 'Chemistry?' variable is needed in
'Sets of Dispersion Options'.
(viii) Minor corrections for Intel and NAG compilers.
(ARJ, MCH, DJT)

!-------------------------------------------------------------------------------------

23/3/04
Various changes to GlobalParameters.F90, CoordinateSystem.F90, NWPMet.F90, 
BuildingFlow.F90, LincomFlow.F90, Species.F90, Source.F90, Output.F90, Particle.F90, 
Puff.F90, Case.F90, Input.F90 and MainNameIII.F90 and addition of Chemistry.F90. 
Changes include:
(i) LincomFlow.F90 written to invoke Lincom for small scale terrain effects (but 
Lincom itself not yet included).
(ii) Chemistry.F90 written to perform calculations with chemical reactions. 
(iii) Sets of locations can now be input in a 'Locations' block. The locations can be 
named with allowed variables in the block being 'Name', 'H-Coord', 'X' and 'Y'. These 
can be used in creating unstructured grids or unstructured grids with named points by
using the 'Locations' variable in a 'Horizontal Grids' block, and these grids can in 
turn be used to request output. The sets of locations can also be used to specify 
source locations by replacing 'H-Coord', 'X', and 'Y' in a 'Sources' block by 'Set of 
locations' and 'Location'.
(iv) The NWP Met Definitions and various coord systems etc used by them have been 
renamed (to avoid duplicate names between e.g. met definitions for global H, global 
H2001 and global UM5 data). Also the met definition and topography files have been 
renamed.
(v) Some minor tidying of the code.
(ARJ, MCH, DJT)

!-------------------------------------------------------------------------------------

20/4/04
Various changes (mainly related to improving output formatting) to 
ErrorAndMessage.F90, GlobalParameters.F90, String.F90, Screen.F90, Unit.F90,
HeadedFile.F90, Time.F90, CoordinateSystem.F90, PrototypeMet.F90, NWPMet.F90, 
Mets.P90, LincomFlow.F90, Flows.P90, Output.F90, Particle.F90, Puff.F90, 
Chemistry.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Headers revised for output files.
(ii) 'Across' and 'SeparateFile' options (in input block 'Output Requirements - 
Fields') now work properly and 'Output Format' option introduced. The latter is 
specified by a string of characters which turn on various options:
  I - add grid Index columns 
  A - Align columns
  Z - include output lines where all the field data is Zero
  E - provides output to the End of the time grid
  2 - uses NAME II style headers.
(iii) The variable 'Name' (in input block 'Output Requirements - Fields') is now
'Quantity' and there have been some changes to the values allowed for it:
  'NParticles'      becomes '# Particles'
  'NPuffs'          becomes '# Puffs'
  '#Particle Steps' becomes '# Particle Steps'
  '#Puff Steps'     becomes '# Puff Steps'
  'PuffCentres'     becomes 'Puff Centres'.
(iv) The keep option has been removed from the Units module (as this is no longer 
used).
(v) Some changes made in preparation for adding restartability.
(vi) 'Run Name' added (in input block 'Main Options').
(vii) 'Seconds?' and 'Decimal Places' added as the 'Output Options' input file block
in order to control whether seconds and fractions of seconds are included in output
times.
(viii) Method of representing time zones changed with 'UTC' replacing 'Zone' so that, 
e.g., 19/4/2004 11:56 UTC+01:00 indicates a time zone 1 hour ahead of UTC. Also, for
non absolute times, 'd' replaces '/' in indicating days so that, e.g., 5d 12:00
indicates a time interval of 5.5 days.  
(ix) 'Turbulence?' option added to the 'Sets of Dispersion Options' input file 
block, to enable turbulence to be turned off.
(DJT, MCH)

!-------------------------------------------------------------------------------------

22/4/04
Extensions and improvements to treatment of species, involving changes to
CoordinateSystem.F90, PrototypeFlow.F90, Species.F90, Particle.F90, Chemistry.F90, 
Case.F90 and Input.F90. Changes include
(i) Support added for foot and mouth virus decay, UV induced decay, power law decay. 
Variables 'UV Loss Rate' and 'UV Decay?' added to 'Species' and 'Sets of Dispersion 
Options' input blocks. 
(ii) Variable 'Wet Type' added to 'Species' input block to control different types of
wet deposition.
(iii) Support added for species categories (e.g. radionuclide, virus). Variable 
'Category' added to 'Species' input block. 
(ARJ)

!-------------------------------------------------------------------------------------

12/5/04
Various changes to GlobalParameters.F90, Time.F90, CoordinateSystem.F90, 
FlowAndFlowProfile.F90, SingleSite.F90, NWPMet.F90, Mets.P90, Flows.P90, Species.F90, 
Output.F90, Particle.F90, Puff.F90, Chemistry.F90, Case.F90, Input.F90 and 
MainNameIII.F90. Changes include:
(i) Some revisions to global parameter values.
(ii) Minor tidying of both output and Output.F90. 
(iii) Input file block and variable names altered as follows
    'Output ... Particle/Puff Details' -> 'Output ... Particle/Puff Information'
    'Group' -> 'Source Group' in 'Output ... fields' and 'Output ... pdfs' blocks
    'Graph?' removed from 'Output ... Particle/Puff Information' block.
(iv) A 'descriptive format' has been introduced for non absolute times. This takes the 
form e.g. 12hr 30min or 5day 12hr 30min instead of 12:30 or 5d 12:30. Can be used for
input and is often used for output of non absolute times.
(v) Distinction made between grid coord system and coord system for defining field
(e.g. for u,v output there is the coord system defining the locations where output is 
wanted and the coord system in which u, v are expressed). Not fully implemented yet.
(DJT)

!-------------------------------------------------------------------------------------

13/5/04
Changes to Particle.F90, Chemistry.F90 and Case.F90 in order to:
(i) Apply correction to chemistry reactions.
(ii) Enable re-use of particles.
(ARJ)

!-------------------------------------------------------------------------------------

19/5/04
Various changes to ErrorAndMessage.F90, LincomFlow.F90, Species.F90, Output.F90, 
Case.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Species category added to output (this involves an extra column header line for 
non NAME II format output) and block header 'Fields:' added to non NAME II format 
fields output.
(ii) Code made restartable. This is controlled by input file variables 'Restart Case 
Interval' and 'Restart Interval' in the 'Main Options' block. Only one of these can be 
specified and they control respectively the number of cases run between making restart 
dumps and the time within a case between restart dumps.
(iii) Option added to restrict output by source. 
(iv) Lincom code added.
(DJT, MCH)

!-------------------------------------------------------------------------------------

23/5/04
Some changes to Particle.F90, Case.F90 and Input.F90 in order to:
(i) Use 'wet type' in calculating wet deposition.
(ii) Rationalise treatment of decay. As part of this the input file variable name 
'UV Decay?' has been changed to 'Agent Decay?'.
(ARJ)

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 1.4 of NAME III released 24/5/04.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

17/6/04
Various changes to ErrorAndMessage.F90, GlobalParameters.F90, Maths.F90, Physics.F90, 
HeadedFile.F90, Time.F90, CoordinateSystem.F90, Service.F90, FlowAndFlowProfile.F90, 
CommonMet.F90, SingleSiteMet.F90, NWPMet.F90, CommonFlow.F90, Mets.P90, 
SingleSiteFlow.F90, NWPFlow.F90, LincomFlow.F90, Flows.P90, Species.F90, Output.F90, 
Particle.F90, Chemistry.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Folder and file used for the Lincom executable and for restoring NWP met data are 
now input through the input file. A blank restore met script means no restoration of 
met data is performed. As a consequence the RestoreMet variable is redundant and it 
has been removed. The NWP topography folder is now separate from met folder and 
specified separately in the input file.
(ii) The random number generator now restarts properly after a restart. In addition 
options have added to initialise randomly or not at start. Also an alternative 
Gaussian generator has been added (selected as an option by editing Service.F90).
(iii) Restartability extended to chemistry.
(iv) Column widths altered and made different for standard format and NAME II format 
output. Standard format widths are 25 for preliminary and 27 for field columns 
(including commas) while NAME II format widths are 20 and 25. Also a final comma is 
now output at the end of the rows.
(v) Some corrections to output headers: source strength units distinguish between total 
release and release rate, and extra header lines added in the case of no horizontal 
grid to ensure the same number of headers and hence correct restart behaviour (in the 
long term the headers need more careful thought - a variable number of lines is 
possible provided nLines is set consistent with the number of lines). 
(vi) 'Max age' for sources input as a formatted time and now used to kill particles
(vii) convective and dynamic rain and snow in 'NWP Met File Structure Definition' 
blocks in input renamed with 'rate' added.
(viii) Some rationalisation of cloud routines (including correcting an error in 
dynamic cloud base and top - these had a fix up which was expressed in pressure-eta 
not metres).
(ix) Wind Speed, Wind Direction, Precipitation Rate, Temperature (C), Cloud Amount and
Relative Humidity added as possible output quantities. Coord system option for wind 
direction implemented.
(x) HeadedFile.F90 modified so it can also be used in reading output files (e.g. for 
processing output to produce ADMS format met input files).
(xi) Julian day number routine added to Time.F90.
(xii) Rain from NWP changed from nearest grid point to full interpolation.
(DJT, ARJ, MCH)

!-------------------------------------------------------------------------------------

30/6/04
Various changes to Physics.F90, String.F90, Time.F90, CoordinateSystem.F90, 
Service.F90, FlowAndFlowProfile.F90, SingleSite.F90, SingleSiteMet.F90, NWPMet.F90,
SingleSiteFlow.F90, NWPFlow.F90, LincomFlow.F90, Flows.P90, Output.F90, Particle.F90,
Puff.F90, Chemistry.F90 and Case.F90. Changes include:
(i) Random particle diameter calculation corrected.
(ii) Fall speed set to zero for particles < 0.1 micron (previously undefined).
(iii) Pasquill stability calculation added.
(iv) Int2Ordinal corrected for 11, 12, 13 etc., e.g. 11th not 11st.
(v) Puff output revised to spread concentration along the distance moved by the puff 
in a time step (to help eliminate blobby-ness).
(vi) Meander exponential damping 1 - exp(t/tau) changed to 1 - exp((t + dt/2)/tau) 
which behaves better if the time steps are big.
(vii) Single site met module - logic corrected to give meaningful error when no more 
data in file and to treat properly the case where the met file starts after the start
time of the run.
(viii) Single site met and flow modules extended to pass cloud and rain information to
the dispersion calculation. 
(ix) Height above ground coord system consistently named 'm agl' throughout code 
(avoids error in FindZCoordIndex).
(x) Boundary layer depth averaged output extended to puffs and properly labelled in 
output file.
(xi) Wet deposition calculation corrected (roughly speaking Exp(- A*Ppt**(B * Dt)) 
replaced by Exp(- A*Ppt**B * Dt)).
(xii) Standard Gaussian random number generator set to GaussB and puff parameter A1 
set to 50.
(DJT, MCH, ARJ)

!-------------------------------------------------------------------------------------

28/7/04
Various changes to GlobalParameters.F90, Time.F90, CoordinateSystem.F90, Service.F90, 
FlowAndFlowProfile.F90, SingleSiteMet.F90, NWPMet.F90, Mets.P90, CommonFlow.F90,
SingleSiteFlow.F90, NWPFlow.F90, BuildingFlow.F90, LincomFlow.F90, Flows.P90, 
Output.F90, Particle.F90, Puff.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes 
include:
(i) MaxLocations and MaxRowsInNamedBlock set to 300, and MaxOutputLineLength to 6000 
(but 1000 on Compaq compiler).
(ii) Boundary layer average now properly labelled for Name II format output. Source 
location format in output files changed (PV-Wave graphics requires 4 decimal places).
(iii) Puff parameter A7 introduced for controlling when to use Gaussian approximation 
and when to use error function (in connection with distance moved by puff over the 
time step). Puff parameters A5 and A7 set to 3.0 and 2.0.
(iv) Various options added to input file for setting up horizontal grids. 'Centre?' 
can be used to indicate that X0, Y0 is the grid centre, 'Locations' has been renamed 
'Set of locations' in specifying unstructured grids, and 'Set of locations' and 
'Location of centre' can be used together to give the location of the grid centre in 
specifying structured non-variable grids.
(v) Ability to switch off puff time spread set up (but not yet implemented).
(vi) Missing cloud and rain data in met output set to -Huge.
(vii) Test for outside computational domain in space moved to OneParticleTimeStep and
OnePuffTimeStep.
(viii) Diagnostic output on distribution of puff centres now ignores time spread of 
puffs.
(ix) Deposition output now calculated from dry deposition and wet deposition output. 
This reduces run time if both are requested.  
(x) If same quantity at time t is required for contributions to a time average or
integral quantity at times t1 and t2, it is not now calculated separately for t1 and 
t2. This can improve run time and avoids potential array bounds problem in calculating
OutputInfo.
(xi) NWPMet changed to allow any levels in the 3-d data to be missing. This is not 
really ideal but will allow the model to run when there are gaps in the data. Also bug 
in error message for missing data (wrong level given) and bug in fix-up for missing 
cloud water/ice corrected.
(xii) MaxLocations, MaxHPoints, MaxZPoints and MaxTPoints removed and corresponding 
arrays allocated to save space.
(xiii) Unstructured grids now correctly treated in ProcessMetFields.
(xiv) Specific humidity and total cloud amount now interpolated in NWPFlow.
(xv) Bugs fixed in SingleSiteMet (NoMoreData uninitialised), FlowAndFlowProfile (PhiZ 
sometimes used before being initialised), and Puff (RandPlumSig sometimes used before 
being initialised).
(xvi) Bugs in AddShortTime and SubtractShortTime (connected with infinite times) 
fixed.
(DJT, MCH, ARJ)

!-------------------------------------------------------------------------------------

7/9/04
Various changes to CoordinateSystem.F90, Service.F90, Flows.P90, Species.F90, 
Source.F90, Output.F90, Particle.F90, Puff.F90, Chemistry.F90, Case.F90, and 
Input.F90. Changes include:
(i) Some tidying of Output.F90, Particle.F90, Puff.F90 and Case.F90.
(ii) Output of particle/puff information rationalised. In particular variables 'Met?', 
'Plume Rise?', 'Advection Scheme?' and 'Puff Family?' added to input block 'Output 
Requirements - Sets of Particle/Puff Information' to control what information is 
output.
(iii) Radioactive decay of deposition added. The quantities 'Deposition', 'Dry 
Deposition' and 'Wet Deposition' in input have been changed to 'Deposition Rate', 'Dry 
Deposition Rate' and 'Wet Deposition Rate'. Accumulated deposition over some interval 
is obtained by specifying time integrated values. A flag 'Decay deposition?' has been 
added to input to specify that the deposits made earlier in the time interval are to 
be decayed to account for the time till the end of the interval. If omitted, default 
is 'yes'.
(iv) Output units for fields corrected. Also a unit is now associated with each 
species (specified by 'Material Unit' in the 'Species' input block). The unit used for
source strength must (at present) agree with the species unit.
(v) Two bugs in puff model corrected. SigA2 improved (its now extrapolated in time and
is not used until two times are available for extrapolation - previously it was 
non-zero only if the source size was non-zero up until the first sync time) and 
brackets added in Step3 [2**(N-1) not 2**N - 1].
(DJT, ARJ)

!-------------------------------------------------------------------------------------

4/10/04
Various changes to 
GlobalParameters.F90, System.F90, HeadedFile.F90, Time.F90, CoordinateSystem.F90, 
Mets.P90, LincomFlow.F90, Flows.P90, Species.F90, Source.F90, Output.F90, 
Particle.F90, Puff.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Bug in time averaging corrected.
(ii) Minor changes for Intel compiler.
(iii) Output of particle/puff information made restartable. Also the following changes 
have been made to the input block 'Output Requirements - Sets of Particle/Puff 
Information'. The variable 'Name' has been renamed 'Output Name'. It now plays a role 
similar to 'Output Group' for fields in acting as the first part of the output file 
name. 'Mass?' option added to output the mass information. 'Advection Scheme?' renamed
'Dispersion Scheme?'.
(iii) 'Density', 'Diameter' and 'Particle size distribution' in the input block 
'Species' moved to the 'Sources' block with 'Diameter' renamed 'Particle Diameter' and 
'Density' renamed 'Particle Density'. 'Type' removed from 'Species' block. 'Resistance
Rc' in the input block 'Species' renamed 'Surface resistance' and an extra input 
variable 'Deposition velocity' added (low values of surface resistance are no longer 
interpreted as deposition velocity). At most one of the two must be specified. No dry
deposition is indicated by Vd = 0.0 or both being missing.
(iv) 'Particle Mass' added as an input to the 'Species' block. This sets an upper 
limit to the mass of this species on a particle. If omitted, no limit is applied. 
Also, in the 'Sources' block, 'nParticles' has been renamed '# Particles'. This sets a 
lower limit on the particle release rate.
(v) When 'deposition rate' is time integrated, its just called 'deposition' in the 
output (similarly for wet/dry deposition).  
(vi) Name II format output made closer to true Name II output. Some minor changes to 
field headers for normal format output too.
(vii) SetUpCoordsEtc_LINCOMFlow corrected to use revised interface to InitHGrid. 
(viii) Message to say a system command is being submitted is now written before the 
command is submitted.
(ix) Various changes to names in input files:
LINCOM:                -> LINCOM Flow Module Instances:
Decimal places         -> Time decimal places     (in Output options)
DeleteMet              -> Delete Met?             (in NWP Met Module Instances)
Use NWP BL Depth       -> Use NWP BL Depth?       (in NWP Met Module Instances)
XGridSize              -> nX                      (in Radar Met Module Instances)
YGridSize              -> nY                      (in Radar Met Module Instances)
Nimrod Directory       -> Nimrod Folder           (in Radar Met Module Instances)
Orientation            -> Angle                   (in Building Flow Module Instances)
Terrain Pertubation    -> Terrain Pertubation?    (in LINCOM Flow Module Instances)  
Roughness Perturbation -> Roughness Perturbation? (in LINCOM Flow Module Instances)
Background Wind Added  -> Background Wind Added?  (in LINCOM Flow Module Instances)
From1                  -> From 1 (etc)            (in Source Time Dependency)
To1                    -> To 1 (etc)              (in Source Time Dependency)
(DJT, ARJ, MCH)

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 2.0 of NAME III released 7/10/04.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

28/11/04
Various changes to GlobalParameters.F90, Time.F90, CoordinateSystem.F90, 
CommonMet.F90, PrototypeMet.F90, SingleSiteMet.F90, NWPMet.F90, RadarMet.F90, 
Mets.P90, CommonFlow.F90, PrototypeFlow.F90, SingleSiteFlow.F90, NWPFlow.F90, 
BuildingFlow.F90, RadarFlow.F90, LincomFlow.F90, Flows.P90, Species.F90, Source.F90, 
Output.F90, Particle.F90, Puff.F90, Chemistry.F90, Case.F90, Input.F90 and 
MainNameIII.F90. Changes include:
(i) Addition of ability to read NWP data as PP files. An input variable 'File Type' 
has been added to the input block 'NWP Met Definitions'. Possible values are 'Fields 
File' and 'PP File'. Both met and topography files must use the specified file type. 
In doing this with the Intel compiler the met data needs to be read into a local array 
and then copied to the desired array. This is probably a compiler bug.
(ii) 'Scale Factor' added as a possible input variable in defining transverse mercator
coordinate systems. Default = 1.0. This enables national grid to be defined in the 
input file. 
(iii) The predefined coord systems have been renamed and further predefined coord 
systems have been added. The new names are:
      Lat-Long
      EMEP 50km Grid
      EMEP 150km Grid
      UK National Grid (m)
      UK National Grid (100m)
      m agl
      m asl
      FL
      Pa
With these coord systems it is only necessary to give the name in the input file 
(indeed that's all you can give).
(iv) Particles no longer released before the start of the computational domain.
(v) 'Volume Flow Rate' and 'Flow Velocity' can now both be blank if there is no plume 
rise.
(vi) MaxSources increased to 20000 and various other global parameters increased.
(vii) Some tidying of times and source times. Max and Min functions added for times. 
Logic of time types and infinite times improved. Release routine tidied and 
PuffReleaseInfo routine introduced.
(viii) SourceTimeEq corrected and 29th February bug in InSourceTimeInterval corrected. 
Bugs corrected in InitSource (calculation of source duration moved inside if tests) 
and ParticleReleaseInfo (error in if test, leading to particle masses being calculated 
from Source%nParticles even if Species%ParticleMass is controlling the particle 
release rate). Bug in InitPuff corrected (do loop missing round code to correct source 
size for metric coefficients). 
(ix) 'Uniform Area?' and 'No Reflect?' variables introduced into the 'Sources' input 
block, with default value 'No'. If true these have the effect of (i) making the source 
uniform across its horizontal area as opposed to being uniform in terms of the area 
dXdY defined by the coord system (at least if TopHat is true and particles are used),
and (ii) deleting any part of the source below the ground instead of reflecting it (at 
least if particles are used). Also vertical coord conversions modified to work below 
ground and the travel time limit in domain definitions is now always used (it was used 
before for the 'computational domain' but not for the individual flow module domains). 
The purpose of these changes is to make the uniform field test easy to do.
(x) For multiple sources, source start time and stop time are output as start of 
earliest release and end of last release.
(xi) Error message added to report if there are no cloud or rain attributes defined in 
the collection of flow module instance attributes when these are needed.
(xii) Bug in SLatLongToLatLong and TMCartesianToSLatLong corrected (mod 2 pi error in 
longitude). Also XCycle and YCycle introduced into horizontal coord systems and grids
and XCycle used in GetHCoeffs and XInDomain to avoid longitude ambiguity problems. 
(xiii) Field set to Null in Output.F90 (needed for debug version with Intel compiler).
(xiv) In NWPFlow.F90, nearest grid point for w is replaced by full interpolation.
(xv) In output column headers, temporal/horizontal/vertical averaging information is
given in the T/X/Y/Z rows if these would otherwise be blank.
(xvi) Some miscellaneous tidying of the code.
(DJT, MCH, ARJ)

!-------------------------------------------------------------------------------------

29/11/04
Case.F90 and Chemistry.F90 changed in order to update chemistry calculations. This 
involves particle splitting and better treatment of vertical grids (distinguishing 
between grid centres and edges).
(ARJ)

!-------------------------------------------------------------------------------------

23/1/05
Various changes to GlobalParameters.F90, Maths.F90, Physics.F90, Time.F90, 
CoordinateSystem.F90, FlowAndFlowProfile.F90, Building.F90, CommonMet.F90, 
SingleSiteMet.F90, NWPMet.F90, RadarMet.F90, Mets.P90, CommonFlow.F90, 
PrototypeFlow.F90, SingleSiteFlow.F90, NWPFlow.F90, BuildingFlow.F90, LincomFlow.F90, 
Flows.P90, Species.F90, Source.F90, Output.F90, Particle.F90, Puff.F90, Chemistry.F90, 
Case.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Minor changes to some global parameters.
(ii) Near source damping correction added to the horizontal turbulence 
eddy-diffusivity dispersion scheme.
(iii) LincomFlow.F90 fixed to work with time revisions noted above (28/11/04(vii)).
(iv) Input variable 'Background Wind Added?' in block 'LINCOM Flow Module Instances'
hard wired to 'Yes' (as this is the only sensible option).
(v) Set and Gauss2 variables in the maths module given the 'save' attribute.
(vii) The '# Particles' requirement modified to allow it to depend on a grid or to be
restricted to the boundary layer. Also a new requirement '# Particles by species' 
introduced which allows restriction to a particular species.
(viii) Modified call to ChemistryUpdate in Case.F90.
(ix) Added an extra line in SplitMassiveParticles in Chemistry.F90 (to exit if 
ParticleMass is not set for PM10).
(x) Pointer IntrinsicSeed in Maths.F90 initialised to Null.
(xi) Functions giving properties of ICAO standard atmosphere added to physics module
(with consequent simplifications in coordinate system module).
(xii) Concentration output on grids defined in coord systems other than height in 
metres now either supported (includes flight level output) or trapped and error 
message given. Sources defined in heights other than metres now have better support,
with separate options to specify whether the horizontal and vertical source dimensions 
are in metres. This is done through input variables 'dH-Metres?' and 'dZ-Metres?' in 
the input 'Sources' block. These variables replace the variable 'Metres?'.
(xiii) Gradient calculations removed from the GetFlow routines as the gradients are no
longer needed. Also option to turn off thermodynamic quantities removed as these are 
always required.
(xiv) The method of identifying particles in grid boxes for the chemistry scheme has 
been altered to avoid repeated allocation and deallocation of small arrays. (The Intel
compiler seemed to leak memory with the previous approach).
(xv) Reflection routines rationalised.
(xvi) In the few places where -1 is still used as a special value for an index, it has 
been replaced by 0.
(xvii) Error checking of time formats improved (a bit). 
(xviii) Some tidying of sources, including moving some of the wild-card time material 
into the time module.
(DJT, ARJ)

!-------------------------------------------------------------------------------------

30/1/05
Various changes to Time.F90, CoordinateSystem.F90, FlowAndFlowProfile.F90, 
CommonMet.F90, SingleSiteMet.F90, NWPMet.F90, RadarMet.F90, Mets.P90, CommonFlow.F90, 
SingleSiteFlow.F90, NWPFlow.F90, BuildingFlow.F90, LincomFlow.F90, Flows.P90, 
Source.F90, Output.F90, Particle.F90, Puff.F90, Case.F90, Input.F90 and 
MainNameIII.F90. Changes include:
(i) Backwards dispersion added. A 'Backwards?' variable has been added in 'Main 
Options' with default No. Note time intervals are positive in run direction (i.e. max 
travel time or grid dt generally positive) and source and domain time limits refer to 
the run direction (so, when running backwards, source start = 1/1/2000 00:00 and 
source end = 31/12/1999 00:00 is sensible). To make it easy to set up an time 
unbounded domain (and not have to worry about whether its -infinity to infinity or 
infinity to -infinity) a 'T Unbounded?' option has been added to the 'Domains' block. 
Note the single site met and flow modules need further modification for backwards 
dispersion.  
(ii) Input of domain information rationalised. If 'H Unbounded?', 'Z Unbounded?' or 'T 
Unbounded?' is set, the corresponding limits and coord systems must not be given 
(previously they were required but not used).
(DJT)

!-------------------------------------------------------------------------------------

31/1/05
Bug fixes in Time.F90 (ShortTimeGE corrected, NextTime not used before defined, and 
FileNameTime extended to work on infinite times), SingleSiteMet.F90 (Char2Time now 
used with Day in normal range), and Chemistry.F90 (spelling of infinity corrected).
(DJT) 

!-------------------------------------------------------------------------------------

8/2/05
Various changes to ErrorAndMessage.F90, Maths.F90, Unit.F90, HeadedFile.F90, 
FlowAndFlowProfile.F90, NWPMet.F90, Output.F90, Particle.F90, Puff.F90, Chemistry.F90, 
Case.F90, Input.F90 and MainNameIII.F90, and Restart.F90 added. Changes include:
(i) Restart control method changed with the aim of adding the option of keeping a 
number of restart files. A new 'Restart' block has been introduced in the input files. 
This contains the 'Restart Case Interval' and 'Restart Interval' variables that used 
to be in the 'Main Options' block, with the addition of a 'Delete Restart Files?' 
option which controls whether restart files are deleted once the next restart file is 
written. A -Restart flag on the command line controls whether the run starts or 
restarts. If this gives the name of a restart file (e.g. -Restart=Filename.dat) the 
restart is from that file. Otherwise it is from the latest restart file. If starting 
from the begining (i.e. -Restart absent) then the 'restart catalogue validity files' 
must not be present. If restarting from the latest restart file (i.e. -Restart present 
but =???? absent) and there are no restart files, the run starts at the beginning.
(ii) Closing message corrected (the 'see log file' part of the message is suppressed 
if the error occurs before the log file is created.
(iii) Extra space added before source start and stop times in name II format fields 
output (needed in pv-wave for backwards runs).
(iv) Chemistry updated to carry ozone on particles. The old and new methods are 
selectable using a logical flag which is hard wired in the code.
(v) Meander scheme with velocity memory added and damping of eddy diffusion near the 
source made switchable. Two options have been introduced in the input block 'Sets of 
Dispersion Options' to enable this: 'Meander Velocity Memory Time' and 'Damping?' (the
latter having default true).
(DJT, ARJ, MCH)

!-------------------------------------------------------------------------------------

10/2/05
Two bugs corrected in Source.F90 and Input.F90:
(i) iSpecies was undefined in ParticleReleaseInfo (for continuous sources with 
Particle Mass playing a role in the release mechanism).  
(ii) A character string length in Input.F90 was incorrect (affects Intel compiler 
only). 
(DJT, ARJ, CSW)

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 2.1 of NAME III released 10/2/05.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

28/3/05
Various changes to ErrorAndMessage.F90, GlobalParameters.F90, Maths.F90, System.F90, 
Screen.F90, Unit.F90, Time.F90, FlowAndFlowProfile.F90, NWPMet.F90, Mets.P90, 
SingleSiteFlow.F90, NWPFlow.F90, Flows.P90, Output.F90, Particle.F90, Puff.F90, 
Chemistry.F90, Case.F90, Restart.F90, Input.F90 and MainNameIII.F90. Changes include:
(i) Improved error messages for failure to open files.
(ii) MaxSingleSiteFlows increased to 2.
(iii) GridBoxState element of ChemistryState made allocatable and MaxHPointsChem and 
MaxZPointsChem removed.
(iv) Memory used for results now recycled when now longer needed.
(v) Bug in the ParticleXStats routine corrected to prevent out-of-bounds array access.
(vi) Source strength used in ProcessSigmaCField (instead of assuming a source strength 
rate of 1).
(vii) Calculation of 'XStats' changed so that a particle contributes to the next grid 
time (avoiding particles contributing to quantities which may have already been 
processed and/or output).
(viii) The particle type has been split into two types called Particle_ and Extra_. 
Extra_ contains extra information which can take default values for many particles in 
some types of run. The code has been arranged to take advantage of this to save memory 
in cases where the extra information can take default values. A consequence of these 
changes is that output of meteorology at a particle location does not now always work. 
This will have to be repaired in due course.  
(DJT, ARJ) 

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 3.0 of NAME III released 11/4/05.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

16/6/05

Various changes to GlobalParameters.F90, CoordinateSystem.F90, FlowAndFlowProfile.F90, 
NWPMet.F90, Mets.P90, SingleSiteFlow.F90, NWPFlow.F90, Flows.P90, Source.F90, 
Output.F90, Particle.F90, Puff.F90, Chemistry.F90, Case.F90 and MainNameIII.F90. 
Changes include:

(i) Bug in output memory recycling corrected. The bug could cause failures with output
which does not have separate files for separate times and had time 'across'.

(ii) Bug corrected which caused run to stop if all particles/puffs killed, even if 
more were due to be released.

(iii) Field output files now correctly indicate whether chemistry is switched on.

(iv) Flow information used by puffs is now based on the true puff centroid after any 
reflection in the ground, not the nominal puff centroid before reflection. This 
resolves a number of cases where the puff model produced strange looking plumes.

(v) Particle/puff masses removed from the particle/puff types and kept in separate 
arrays. The array containing the 'extra information' associated with each particle or
puff has been split into two arrays, one for particles and one for puffs.

(vi) To avoid problems with large executables and slow compilation caused by some 
compilers putting initialised data in the executable (even if only one part of a 
structure is initialised, the whole structure may go in the executable), many 
initialisations in declarations ('=> Null()'s in particular) have been moved to the 
executable statements.

(vii) Particle and puff arrays now allocated.

(viii) Bug corrected in killing particles. Previously the 'extra information' 
associated with a particle was returned to the 'stack of extras' when the particle was 
killed even if the particle was a 'cheap particle' which shared its set of extra 
information with other particles.

(DJT, ARJ) 

!-------------------------------------------------------------------------------------

19/6/05

Various changes to GlobalParameters.F90, CoordinateSystem.F90, Output.F90, Puff.F90, 
Chemistry.F90, Case.F90, Input.F90 and MainNameIII.F90. Changes include:

(i) Name of output files changed when these involve the name of a named location in an 
unstructured grid. The name of the location is still included in the file name but the 
number of the location is no longer given.

(ii) Mass arrays associated with particles and puffs dimensioned using actual number 
of species. This will reduce memory use when only a few species are used.

(iii) 'Max # Particles', 'Max # Full Particles', 'Max # Puffs' and 'Max # Original 
Puffs' added to the 'Sets of Dispersion Options' input block. These are now always 
needed in the input file and mean that it is no longer necessary to recompile if the 
values are changed.

(iv) When a particle is released it was always released as a 'full particle' and only 
considered for conversion to a 'cheap particle' after the first time step. This meant 
that for an instantaneous release with many particles, the memory requirement was much 
greater than it need be. Now particles are considered for conversion to cheap 
particles immediately after release (and before other particles released at the same 
model time are released).

(DJT, CSW)

!-------------------------------------------------------------------------------------

26/6/05

Various changes to ErrorAndMessage.F90, CoordinateSystem.F90, BuildingFlow.F90, 
LincomFlow.F90, Species.F90, Source.F90, Chemistry.F90, Case.F90, Restart.F90, 
Input.F90 and MainNameIII.F90. Changes include:

(i) Input variable 'Wrap' in input block 'Horizontal Grids' renamed 'Wrap?' for 
consistency with other names. Also variables X0, Y0 and Centre? replaced by X Min, 
X Centre, X Max, X Range, Y Min, Y Centre, Y Max and Y Range. The various input 
options now allowed are as follows:
  Unstructured grids: 
    Name, dX, dY, Set of locations.
  Structured variable grids: 
    Name, H-Coord, X-Array, Y-Array, with Wrap? optional.
  Structured non-variable grids method 1: 
    Name, H-Coord, nX, nY, 
    two of X Min, X Centre, X Max, dX and X Range (but not dX and X Range),
    two of Y Min, Y Centre, Y Max, dY and Y Range (but not dY and Y Range),
    with Wrap? optional.
  Structured non-variable grids method 2: 
    Name, H-Coord, nX, nY, dX, dY, Set of locations, Location of centre, with Wrap? 
    optional.
Note X Min and X Max are the first and last grid points not the smallest and largest 
X; one can have X Min > X Max which has the same effect as dX < 0. 

(ii) Logic for restart files and restarting from restart files improved a little, the 
main difference being that the model can be instructed to stop after writing so many 
restart files (previously the restart files were available for use after a run 
completed, failed or was killed by the user or system crash, but there was no 
automatic way to stop the run). Now controlled by an input file block 'Restart File 
Options:' with the input options being: 
  # Cases Between Writes   - } number of cases or time interval between writing 
  Time Between Writes      - } restart files - only one of these can be used.
  Delete Old Files?        - deletes old dumps once a new one has been written.
  # Writes Before Stopping - stops run after these many dumps with 'run suspended'
                             message.
Also the error code is written to the restart file to avoid a 'run completed 
successfully' message if there were warnings or errors before the last restart.

(iii) The limit on particle mass for each species is no longer input via the 'Species'
input block but via a separate 'Particle Mass Limits' block with variable names
'Species Name' and 'Particle Mass Limit'.

(iv) 'Time of Fixed Met' moved from the 'Main Options' input block to the 'Sets of 
Dispersion Options' input block. This allows more flexibility and prevents a 
misleading error message when two sets of Main Options are present. Also Main options 
is now read on a separate pass through the input file(s) - this prevents an error 
occurring when the block is not at the start of the input file.

(DJT)

!-------------------------------------------------------------------------------------

5/8/05

Various changes to ErrorAndMessage.F90, GlobalParameters.F90, Maths.F90, Physics.F90,
String.F90, System.F90, Screen.F90, Unit.F90, HeadedFile.F90, Time.F90, 
CoordinateSystem.F90, Service.F90, FlowAndFlowProfile.F90, SingleSite.F90, 
Building.F90, CommonMet.F90, PrototypeMet.F90, SingleSiteMet.F90, NWPMet.F90, 
RadarMet.F90, Mets.F90, CommonFlow.F90, PrototypeFlow.F90, SingleSiteFlow.F90, 
NWPFlow.F90, BuildingFlow.F90, RadarFlow.F90, LincomFlow.F90, Flows.F90, Species.F90,
Source.F90, Fluctuation.F90, Output.F90, PlumeRise.F90, Particle.F90, Puff.F90, 
Chemistry.F90, Case.F90, Restart.F90, Input.F90 and MainNameIII.F90. Changes include:

(i) Subroutine Input renamed ReadInputFiles to avoid problem (conflict with module 
name) in converting fortran to html.

(ii) Mass of last particle released from a continuous source reduced as appropriate to
reflect source duration remaining.

(iii) Options added to reduce particle release rate when approaching particle limit. 
This is controlled by two variables "Particle Ceiling" and "Particle Factor" in the
input block "Sets of Dispersion Options". When the number of particles reaches
Particle Ceiling, the mass per particle is increased by a factor Particle Factor and
the release rate is correspondingly reduced. Defaults are provided (Particle Ceiling = 
Max # Particles, Particle Factor = 1.0) which imply no reduction in release rate 
(until the particle limit is reached). In addition the code no longer fails when the 
particle limit is reached.

(iv) Ozone on particles switched off by default (edit code to turn on).

(v) When the chemistry scheme is used, the species list is checked for consistency 
with the requirements of the chemistry scheme.

(vi) In calculating the grid box concentrations from particle masses for use in the 
chemistry scheme, checks are added for whether the particles are active and are inside 
the chemistry grid area. 

(vii) The options discussed above to reduce particle release rates when approaching 
the particle limit are applied also to control the number of particles created when
particles are split in the chemistry scheme. In addition the splitting routine now
correctly handles 'full particles' which have 'extra' information associated with 
them. However currently the code stops if we run out of full particles (due to either 
release or splitting).

(viii) Start made on allowing longer lines (110 characters) for clearer code. This 
still prints satisfactorily if landscape mode used.

(ix) Units of species output from the chemistry grid now correctly given as volume 
mixing ratio.

(x) Recycling of puff memory, to allow long runs with puffs.

(xi) Single site met module adapted to work in calm conditions. Some changes in
FlowAndFlowProfile.F90 also needed to produce mean flow profiles in calms.

(xii) Single site met module corrected to avoid calling InitMetInput twice (and giving 
any resulting messages twice). Bug fixed in single site met module which was causing 
an unexpected fatal error when there was no more met data. 

(xiii) Bug in FieldNumHeaders corrected. X grid origin now output correctly in Name II 
format output.

(xiv) Command line arguments for determining log file and restart file stem changed.
Now they determine the log and restart folders.

(xv) Single site module now uses the main Message routine for messages, ensuring they 
go to the log file as well as the screen.

(xvi) Run start and stop times altered to include all output due at times within the 
computational domain, even if this is after all particles and puffs are killed and no
more are due to be released. Previously the run stopped and output was not written,
which was a problem with time averaged output as it might not be zero. It is now 
necessary to define output time grids or the computational domain boundaries more 
carefully to avoid excessive quantities of output.

(xvii) Met output now calculated in Case.F90 instead of in Output.F90. Previously 
delays in calling ProcessAndOutputResults due to puff time spread resulted in delays
in computing met output. This delay could have resulted in errors, with the met and 
flow modules being updated before computing the met output. 

(xviii) Puff parameters A1, A5 and A7 can now be input in the 'Sets of Dispersion 
Options' input block. Default values of 50, 3 and 2 are provided.

(xix) 'Max' added as an extra option to 'Av' and 'Int' for 'T Av or Int' in input 
block 'Output Requirements - Fields'. This is not intended as a long term solution to
calculating maxima.

(DJT, ARJ)

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 3.1 of NAME III released 5/8/05.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

22/8/05

Various changes to GlobalParameters.F90, Time.F90, CoordinateSystem.F90, 
SingleSite.F90, Building.F90, CommonMet.F90, PrototypeMet.F90, SingleSiteMet.F90, 
NWPMet.F90, RadarMet.F90, Mets.F90, CommonFlow.F90, PrototypeFlow.F90, 
SingleSiteFlow.F90, NWPFlow.F90, BuildingFlow.F90, RadarFlow.F90, LincomFlow.F90, 
Flows.F90, Source.F90, Output.F90, Particle.F90, Puff.F90, Chemistry.F90, Case.F90, 
Restart.F90, Input.F90 and MainNameIII.F90. Changes include:

(i) Error message in SetupExtraReqs for 'Max' output with AvdT = 0 was in the wrong if 
block.

(ii) UpdateResults only called at sync times (i.e. its not called at met times which 
aren't sync times). This corrects a potentially fatal bug.

(iii) Variables MessageCount and MessageLimits saved in subroutine SSMessage. This 
fixes a bug which was only apparent on Linux.

(iv) In calculating concentrations from particles the absolute value of the volume is
taken to prevent e.g. negative values due to dY < 0.

(v) MaxFieldReqs increased to 60.

(vi) Messages in PAsEtaToP and PToPAsEta tidied up using Trim.

(vii) Some incomplete and non-working aspects of NWPMet.F90 aimed at supporting 
'cut-down' met have been removed. Cut-down met is now read as ordinary met with a 
separate met definition. In addition some (non-comprehensive) checks that the met 
definition is consistent with the met file headers have been added.

(viii) Some tidying of routine SSMessage and of the messages produced by that routine.

(ix) Output units corrected for boundary layer average quantities.

(x) Some inefficiencies in CalcNextOutputInfoT removed. Now the appropriate time in
the time grid is found directly instead of looping over all times. Also OutputInfo 
renamed ReqInfo, since it concerns requirements, not just requirements that will be 
output.

(xi) Bug in InitPuff in Puff.F90 (uninitialised particle fall speed when using puffs) 
corrected.

(xii) The flag for relative time has been made a variable declared globally throughout 
the time module. This is now in line with the way the backwards flag is treated.

(xiii) FirstLastReleaseTimes in Source.F90 modified to work with no sources (so that, 
for example, sources don't have to be present for met extraction runs). Also call to
UpdateResults in RunToSyncTimeOrMetFlowUpdateOrEndOfCase in Case.F90 repositioned to
ensure first output time is output even if it coincides with the start of the run.

(xiv) Test for mass of output species being zero added to CalcParticleResults and 
CalcPuffResults to reduce computational time.

(DJT, AJM, PA, MA) 

!-------------------------------------------------------------------------------------

27/9/05

Various changes to GlobalParameters.F90, Unit.F90, CoordinateSystem.F90, 
GridAndDomain.F90, Service.F90, SingleSite.F90, SingleSiteMet.F90, Mets.F90, 
CommonFlow.F90, PrototypeFlow.F90, SingleSiteFlow.F90, NWPFlow.F90, BuildingFlow.F90, 
RadarFlow.F90, LincomFlow.F90, Flows.F90, Source.F90, Output.F90, Chemistry.F90, 
Case.F90, Restart.F90, Input.F90 and MainNameIII.F90. Changes include:

(i) Coordinate system module split into two, called coordinate system module and grid
and domain module.

(ii) Domains no longer kept as part of the flow modules but in a separate collection 
of domains.

(iii) The input options allowed for horizontal grids have been extended to include the
option of specifying: 
    Name, H-Coord, nX, nY, Set of locations, Location of centre, 
    one of dX and XRange, 
    one of dY and YRange, 
    with Wrap? optional.

(iv) The input options for specifying domains have been extended. The horizontal 
extent of domains can be specified by one of the following methods:
  Method 1: 
    H-Coord,  
    two of X Min, X Centre, X Max and X Range,
    two of Y Min, Y Centre, Y Max and Y Range.
  Method 2: 
    H-Coord, Set of locations, Location of centre, XRange and YRange.
The temporal extent of domains can be specified by giving two out of:
  Start Time, End Time, Duration.
Note domains must have Start Time <= End Time or Duration >= 0. X Min > X Max or Y Min 
> Y Max is allowed for cyclic coords to indicate the domain occupies e.g. {X <= X Max} 
U {X Min <= X}.

(v) Input of source strengths and particle release rates generalised. When these are 
input as a rate it can be given as not just "/s" but also as "/sec", "/min", "/hr" or 
"/day". s, sec, min, hr and day are now case insensitive.

(vi) Option 'N' (new output file) introduced under 'Separate File' in the input block 
'Output Requirements - Fields'. This causes output files to start afresh after a 
restart (possibly overwriting any previous files).

(vii) Command line options -RunTo=??? and -RunFor=??? added. These cause the run to
run to a specific point or for a specific duration and then be suspended. The string
??? can be a time or a time interval (with spaces replaced by underscores) or a case 
number or a number of cases.

(viii) Option 'Run-To File' added to 'Main Options' input block. This allows you to 
give the name of the 'run-to' file. If at any point during the run this file is 
created, then the file is read and, if the file is empty or contains anything other 
than a time, the run is suspended immediately, while, if the file contains a time, the 
run is suspended once the time is passed.

(ix) Option 'Write On Suspend?' added in the 'Restart File Options' input block. This 
causes a restart file to be written when the run is suspended.

(x) The option '# Writes Before Stopping' in the 'Restart File Options' input block is 
no longer needed and has been removed.

(xi) Bug in routine OpenFile fixed  (error messages in if-blocks needed swapping).

(xii) Bug in ReadSS routine (SingleSiteMet.F90) fixed (the routine needed to return 
when inadequate met data found). This means that the code now reliably interpolates 
over up to two consecutive hours of missing data (previously it could fail, depending 
on what was missing). Also error messages in SSMessage (SingleSite.F90) altered to 
replace "it is impossible to continue the calculation for this hour" by "it is 
impossible to use this data". This is because it is possible to interpolate over short 
periods of inadequate data.

(xiii) Output of flight level in column headers in 'Name II format' changed to match 
Name II more closely.

(DJT, ARJ, CSW)

!-------------------------------------------------------------------------------------

13/10/05

Various changes to 
ErrorAndMessage.F90, GlobalParameters.F90, Unit.F90, Source.F90, Output.F90, Case.F90, 
Input.F90 and MainNameIII.F90. Changes include: 

(i) Categories of requirements redefined to make it easier to work out if run needs to 
start before first source (e.g. when outputting or time averaging met - not that the 
latter is possible yet). Calculation of run start and stop times modified to take 
account of new categorisation. Also first and last times at which met is required are
calculated to avoid unnecessary met reads. The flag for outputting a req to the end of 
the t-grid is now needed once again if one wants output after all sources have stopped
and particles/puffs have been killed (this includes, for example, time averaged 
concentrations which might be non-zero even after all particles/puffs have been killed
and runs with no sources used to extract met).

(ii) Restrictions on time averaging reduced. Previously Av dT (= Av Time / # Av Times)
had to divide the output grid dT which had to divide Av Time. Now we only require 
Av dT to divide both the output grid dT and Av Time.

(iii) Ability to calculate the max over some time of a time averaged concentration 
added. This is controlled by three variables in the input block 'Output Requirements - 
Fields'. The variables and their meanings are:
    'Percentile' - blank for no max calc, 100 for max calc (in future other options 
                   will be added),     
    'P Time' - time over which the max is required,   
    'P dT' - time interval between the values whose max is being taken. 
The old option of setting 'T Av or Int' in input block 'Output Requirements - Fields' 
to 'Max' has been removed. For output of maxima, max is added as a prefix to the name
of the quantity in Name II format output and two extra header lines are added in Name 
III format output.

(iv) Log file name changed to end in 'Log.txt' instead of 'log'. An error and warnings
file introduced which ends in 'Error.txt'.

(v) Error messages written when particles/puffs are being lost due to the lack of 
valid flow modules.

(DJT)

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 3.2 of NAME III released 13/10/05.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

22/10/05

(i) Output column headers for Max quantities in Name II format corrected.

(ii) Bug fixes in Case.F90 to the code determining when the run stops.

(iii) Problems with output on grids which cross the cyclic point of a coordinate 
system (e.g. the date line) corrected for particles and improved (but not completely 
fixed) for puffs.

(iv) Checks on NWP met headers restricted further to cut down met only.

(v) Bug fixed in Input.F90 - specifying domain duration caused a fatal error (due to 
"Interval = .true." missing in call to Char2Time).

(vi) Maths.F90 modified to support Linux Intel 64-bit compiler random number 
generator.

(vii) Script to compile on Linux Intel 64-bit compiler added.

(viii) Option added to flush output buffers after each output time. This is turned on 
by putting 'F' in the 'Output Format' variable in the input block 'Output Requirements
 - Fields'. Should only be used where needed (e.g. output of particle numbers to 
monitor progress of run) - it can slow down the run if used for large output files.   

Dave Thomson, Alistair Manning

!-------------------------------------------------------------------------------------

24/10/05

Change to GlobalParameters.F90 - "MaxOutputGroups" upped from 10 to 20.

Mark Harrison

!-------------------------------------------------------------------------------------

8/11/05

(i) Error message for too many output groups improved.

(ii) Bug in calculating YCycle in CoordinateSystem.F90 corrected.

(iii) -xW switch removed from Linux compile scripts. This doesn't work on some 
machines.

Dave Thomson, Mark Harrison, Matthew Hort

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 3.3 of NAME III released 8/11/05.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

21/12/05

(i) Some changes to the values of parameters set in GlobalParameters.F90
generally to be able to ask for more output requirements: the value of
LastUnit increased from 200 to 300; MaxFieldReqs increased from 60 to 200;
and MaxOutputFiles increased from 60 to 100.

(ii) The parameter MaxLineLength increased to 2048 in GlobalParameters.F90
to allow longer lines to be read in from an input file (e.g. source files
which may contain many species).

(iii) Subroutine 'ProcessChemOutput' in Chemistry.F90 revised to include
calculation of output for chemistry fields on unstructured horizontal grids.

(iv) Chemistry revised to apply the 2/3 scaling factor when resetting ozone
back to its background value in the instance when there are no particles in
the chemistry grid box. Previously, the 2/3 factor was only applied when
the ozone field was initialised at the start of the run.

(v) Bug in determining the time step with plume rise corrected. If the ambient 
vertical velocity is negative and the plume rise velocity is slow this bug could cause 
the time step to become negative. This leads to an attempt to take the square root of 
a negative number, although this does not always (i.e. all platforms, compilers and 
optimisation settings) lead to a crash. The outcomes which have been seen are (i) 
crash with fatal error handled by the compiler, (ii) run doesn't progress (presumably 
because a particle is going backwards in time and so never reaches the target time), 
and (iii) run finishes normally with results that look OK (they probably are OK if the
square root error in plume rise [there may be square root errors elsewhere too] is 
fixed up in a way which switches off plume rise - the plume rise is very slow at the 
point of the error and so due to be swiched off soon). 

Andrew Jones, Mark Harrison

!-------------------------------------------------------------------------------------

22/12/05

(i) Trap introduced for half life = 0.

(ii) Getting command line arguments with Intel Linux fortran now done in the same way
as with Compaq Windows fortran.

(iii) Some tidying of Time.F90 to make it easier to follow - in particular TimeType
logic rationalised.

(iv) HeadedFile.F90 altered (i) to provide a systematic way of providing input 
defaults, (ii) to allow alternatives for variable names, and (iii) to allow matching
against specific lines in headers with multiple header lines. Previously columns with
headers beginning 'Notes' were regarded as user comments and were not read. Now such 
columns must have headers begining with '!' to avoid an 'unrecognised variable' 
message. As part of this HeadedFile.F90 has been tidied up with some consequent 
changes in GlobalParameters.F90 and MainNameIII.F90.

(v) Bug fixed in puff output with unstructured horizontal grids - the grid's XCentre 
(and YCentre) were used to reduce puff coords mod XCycle to be close to XCentre, even 
though XCentre is undefined for unstructured grids.

(vi) Messages for 'NWP Met Definition not found' and 'NWP Met File Structure 
Definition not found' changed from 'unexpected fatal error' to 'fatal error'.

(vii) Locations code moved from coordinate system module to grid and domain module. 
Some parameters moved from error and message module to global parameters module.  
Compilation order changed to compile global parameters module first. 

(viii) Message for reading NWP met data corrected.

Dave Thomson, Andrew Jones

!-------------------------------------------------------------------------------------

24/1/06

(i) Bug in HeadedFile.F90 corrected. This caused the Intel-compiled version to fail
when setting up Headed File Block Forms with the DisjointColSpecs flag enabled
(checking that the column specifications are either identical or disjoint). The fix
involved specifying explicit array bounds in a reference to the array EqualColumnKeys2
in the subroutine InitAndAddHFBlockForm (so as to reference only the defined part of
this array). This was already done correctly elsewhere in the subroutine.

(ii) Changes to GridAndDomain.F90, Input.F90, Particle.F90 and Puff.F90 to add
support for vertical grids with variable spacing. Note that variable vertical grids
are not supported for puffs at the current time, and an error check has been added
if such output is requested. Vertical grids can now be defined in one of three ways:

 - a uniform vertical grid can be specified by giving Name, Z-Coord, nZ, dZ, Z0
 
 - an 'eta level' grid using a pressure-based eta coord system can be specified by
   giving Name, Z-Coord, Z-Array = 'Use Eta Levels'
 
 - a variable vertical grid can be specified by giving Name, Z-Coord, Z-Array (and
   optionally 'Av Z-Array'). Z-Array should be the name of an array of vertical levels
   which are interpreted according to the value of Av Z-Array. If Av Z-Array is 
   omitted (or left blank) then Z-Array defines the vertical levels directly with no 
   implied vertical averaging. If Av Z-Array = 'Z on Boundaries' then Z-Array defines 
   layer boundaries from which the mid-points and layer averaging depths are 
   calculated. Otherwise Av Z-Array should be the name of an array giving layer 
   averaging depths that are in a 1-1 correspondence with the entries in Z-Array.

Andrew Jones

!-------------------------------------------------------------------------------------

30/1/06

(i) The parameter MaxPPInfoReqs increased to 10 in GlobalParameters.F90 to allow the
user to ask for a greater number of Particle-Puff Info outputs (e.g. trajectory 
requests).

(ii) Functionality for variable vertical grids has been completed (quantities such as
Particle Numbers had been overlooked in the earlier change). Now all quantities are
properly supported for particle output.

(iii) Changes to Input.F90, Output.F90, Particle.F90 and Puff.F90 to be able to
restrict output of Particle-Puff Information to those particles/puffs released by
a particular source. The source is specified by an extra variable "Source" in the
"Output Requirements - Sets of Particle/Puff Information:" block (blank indicates
no restriction by source). This change brings output of Particle-Puff Information
more into line with the output of fields.

Andrew Jones

!-------------------------------------------------------------------------------------

31/1/06

(i) Output processing rearranged to aid future implementation of probabilities and 
percentiles (currently only 100th percentiles are supported) and of intrinsic 
averaging (i.e. averaging using contributions from every particle/puff at every time 
step). In this connection the following changes have been made (but note this is not 
yet complete).

(i.1) Various changes have been made to the input block 'Output Requirements - Fields' 
to support probabilities and percentiles. In particular the variable 'Percentile' has 
been renamed 'Percentiles' and the variables 'Probabilities', 'Ensemble Av?' and 
'Ensemble P?' have been added. 'Percentiles' and 'Probabilities' can contain space 
separated lists of required percentiles and of levels for which exceedence 
probabilities are required, but they can't both be used together in one requirement.
'Ensemble Av?' and 'Ensemble P?' are used to indicate that ensemble averaging (over 
the ensemble of cases) is carried out and that the probabilities or percentiles are 
taken over the ensemble (possibly as well as over time if 'P Time' /= 0). Clearly they 
can't both be used together. Percentiles and probabilities are calculated after any 
averaging defined by 'Av Time' etc and 'Ensemble Av?'. The variable 'Stat?' which was 
never actually used and is now redundant has been removed.

(i.2) 'Name' variable added to the input block 'Output Requirements - Fields'. This 
can be blank (at least at present) but giving a value (could just be a number) allows 
the error messages and output to be more meaningful (although this is not fully 
implemented yet). 

(ii) 'Output Route' added to the input blocks 'Output Requirements - Fields' and 
'Output Requirements - Sets of Particle/Puff Information'. This contains the same 
information as 'Disk?', 'Screen?' and 'Graph?' with the desired output route(s) being 
specified by the letters D, S and G (like the way 'Output Format' is specified). 
'Disk?', 'Screen?' and 'Graph?' still work (and, if they are used, will override 
'Output Route') but are not required and will be removed at a later date.

(iii) New output quantities 'Progress (%)' and 'Clock Time' added.

Dave Thomson

!-------------------------------------------------------------------------------------

31/1/06

Information on the sources of met data and on whether the trajectories are forwards or
backwards added to Particle/Puff Information output.

Andrew Jones

!-------------------------------------------------------------------------------------

31/1/06

Two changes made to the headers at the start of fields output files. 

(i) The second line, containing the run title, now has a label.

(ii) The line with No Chemistry or Full Chemistry has been replaced by the run 
duration.

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

6/2/06

(i) Changes in GridAndDomain.F90 and Output.F90 to write correct field header for
vertical averaging when a variable vertical grid is used. Each element of the array
ZGrid%AvZ is now set to ZGrid%dZ in InitZGrid for a regular grid. The array ZGrid%AvZ
is then used in the OutputFields routine to write field headers in a consistent way
(the output routine previously used ZGrid%dZ which was undefined for variable grids).

(ii) Bug fix to subroutines PrepareResults and UpdateResults in Output.F90 to
initialise the double precision and time type arrays of a field to zero before they 
are used/reused (in the same way that single precision type arrays were already 
initialised).

Andrew Jones

!-------------------------------------------------------------------------------------

23/2/06

Time interpolation of single site data altered. Instead of using the met data to
construct profiles and then interpolating the profiles, we now interpolate the met 
data and then construct the profiles. This can have a significant impact on results 
using the cheap homogeneous turbulence profiles. This is because the previous method
gave two boundary-layer-top discontinuities, with the boundary layer height given as
lying between the two.

Dave Thomson and Claire Witham

!-------------------------------------------------------------------------------------

2/3/06

(i) Changes in Case.F90, Chemistry.F90, Input.F90 and MainNameIII.F90 to add support
for a 'Chemistry Options' block in the input file(s). This allows the user to specify:

  - 1) a folder storing the background chemistry fields (variable name is
       'Chemistry Folder' and its default value is '../Resources/Stochem/'),

  - 2) a switch for whether ozone is modelled as a static 3-d chemistry field or
       is carried on the particles (variable name is 'Ozone On Particles?' with
       its default value set as false).

A 'Chemistry Options' block must be present in the input file(s) if the run models
chemistry (a chemistry run will fail with an error message if such a block is absent).
Note that the 'OzoneOnParticles' flag was previously set and carried in the
ChemistryDefn structure - this has now been removed.

(ii) The subroutine 'CharLengthTest' has been moved from Output.F90 to HeadedFile.F90
because the routine is primarily used for processing input strings.

Andrew Jones

!-------------------------------------------------------------------------------------

6/3/06

Minor change in Case.F90 to fix a problem that occurred when a source's vertical
extent dZ needed to be converted to a different coord system. The coordinate
conversion routine requires particle travel time, and this was previously used here
before it had been initialised. A zero travel time is now explicitly used in the calls
to CalcdZdZ in ReleaseParticle and ReleasePuff.

Andrew Jones

!-------------------------------------------------------------------------------------

14/3/06

(i) MaxOutputFiles increased to 400. LastUnit increased to 400.

(ii) Bug in restart system corrected. Used to fail if only 'write on suspend' was 
selected - this was because RestartType was set to zero and so InitRestart wasn't 
called.

Dave Thomson and Claire Witham

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 3.4 of NAME III released 15/3/06.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

17/3/06

(i) Output of results to the screen (using Output Route = '...S...') now works on 
Linux, although, if more than one output group is written to the screen, they will be 
interleaved which may be hard to follow.

(ii) Counts of particle and puff steps now held as 64-bit variables. 

(iii) New output quantities 'X' and 'Y' - these are just the coords of the output 
grid, but, by specifying H-Coord in the input file line requesting this output, it is 
possible to get X and Y in a different coord system to that in which the grid is 
defined. These have to be in a different output group to any output quantities which 
depend on time (which is actually all other output at present).

(iv) Output of run duration in the output file headers could fail if the run is 
potentially infinitely long (as in a run designed to be restarted many times) and NAME
II format output is used. This has been corrected.

(v) Calculation of 'Progress (%)' corrected to reflect the RunTo and RunFor argument
list values.

(vi) Domain boundaries for cyclic coordinates treated more robustly and some error
checks added for inappropriate input.

(vii) Cyclic nature of turning of wind with height within the boundary layer treated 
more robustly, with this being constrained to lie between +/- 180 degrees.

Dave Thomson

!-------------------------------------------------------------------------------------

18/03/06

(i) Added a 'Makefile' to assist in the compilation of NAME III on the Linux
system for code development and testing purposes. The Makefile compares the
time stamp of each object file against those of its source code dependencies
and should only recompile an object file if it requires updating. This gives
faster compilation than using the default compilation script (because redundant
recompilations are avoided) but it is recommended that you use the ordinary
compilation script(s) for a final compilation before usage (at least until we
are sure that the makefile is working correctly). The makefile can be executed
by typing 'make' on a command line from the Code_NameIII directory.

(ii) Changes in Case.F90, Flows.P90 (-> Flows.F90), Input.F90, MainNameIII.F90,
Mets.P90 (-> Mets.F90), NWPMet.F90, PrototypeMet.F90, RadarMet.F90 and
SingleSiteMet.F90 to add support for handling an ensemble of met realisations.

(ii.1) The 'Multiple Case Options' block now includes a variable 'Met Ensemble Size'
which enables the user to specify the number of individual met realisations in an
ensemble of NWP met cases. These realisations of the NWP met module instances are
then considered as separate cases in the model run. The integer DispState%iMetCase
has been added to keep track of the index of the met realisation in the met ensemble
(iMetCase ranges from 1 to 'Met Ensemble Size'). If not given, 'Met Ensemble Size'
defaults to the value 1. The 'Multiple Sets of Dispersion Options?' variable can
be set in conjuntion with multiple met realisations, and this will cause the model
to repeat the met ensemble for each line in the 'Sets of Dispersion Options' block.
Therefore, if there are M members in the met ensemble and N sets of dispersion
options then there will be M*N cases in the model run (with the first M cases using
DispOpts #1, the next M cases using DispOpts #2, etc.). DispState%iMetCase is saved
in the restart files. This allows multiple met case runs to be restartable.

(ii.2) The met folder structure for handling NWP ensembles is controlled via the
'NWP Met Module Instances' input block. The user is able to describe the met folder(s)
using three methods:

  - 1) The variable 'Met Folder' defines a single met folder. This is the usual
  specification of the met folder for single-met-case runs. A single met folder
  cannot currently be used with an ensemble of NWP met cases, but the idea is that
  a single met file could contain multiple met realisations (e.g. ECMWF EPS GRIB).
  
  - 2) The variable 'Met Folder Stem' specifies the stem for a collection of met
  folders. Each folder contains a single met realisation of the NWP met ensemble and
  is named by adding an integer index 1, 2, ..., Met Ensemble Size at the end of the 
  met folder stem. For example, if the met folder stem is './EPS' then the individual
  folders are './EPS1', './EPS2', ... , './EPS10' etc.
  
  - 3) The variable 'Met Folders' defines the name of an array of met folder names.
  Each met folder contains a single met realisation of the NWP met ensemble.

Like most folders given in the input, these folders can be blank, with the exception 
of 'Met Folder Stem' (if this is blank, it cannot be distinguished from a blank 'Met 
Folder').

Currently multiple met cases are only set up for NWP Met, but the code infrastructure
will support a similar approach for implementing multiple single-site met cases.

Andrew Jones

!-------------------------------------------------------------------------------------

30/3/06

(i) FieldReqs must now have names (given though the 'Name' variable in input block 
'Output Requirements - Fields'). 

(ii) Multiple output routes are now possible (i.e. the same requirement can be listed 
twice in input block 'Output Requirements - Fields' with different values of 'Output 
Group'. 

(iii) A 'Fluctuations?' option has been added to 'Output Requirements - Fields'. This 
is needed if asking for the quantity 'Sigma C'. In due course it will also allow 
fluctuations to be taken into account in calculating probabilities, percentiles and 
moments.

(iv) Probabilities and percentiles now work (over the ensemble of cases and/or over 
time). Averaging now also works over the ensemble of cases. This applies to nearly all 
output (including met and quantities held on the chemistry grid). The exceptions are 
quantities held as times or in double precision (i.e. 'Progress (%)', '# Particle 
Steps' and '# Puff Steps'). However the probabilities and percentiles are designed for
quantities like concentration which are positive and cover a range down to zero. This 
means that quantities which can go negative will not at present have the correct 
probabilities for negative values, and quantities which cover only a small fractional 
range (like absolute temperature) will not have accurate probabilities. 

(v) The column headers for fields output (not Name II format) have been altered, with 
extra lines added to give the field requirement name, to give information on whether 
averages or probability distributions are over the ensemble of cases, and to allow 
space for giving both the name of named locations and the coords of the location. Also 
the line which is used to give the value of the 'data grid' for probabilities and 
percentiles is now always present (with just commas if there are no data grids). In 
addition, the lines corresponding to T, X, Y and Z, which used to repeat the averaging 
information if they would otherwise be blank, now don't do this.

(vi) 'Multiple Case Options' input block simplified to have just two variables: 
'Dispersion Options Ensemble Size' and 'Met Ensemble Size', both with a default value
of 1.

Dave Thomson

!-------------------------------------------------------------------------------------

31/3/06

Unit numbers are freed up if there is an error in opening an NWP met file (to  avoid 
the possibility of running out of unit numbers).

Alistair Manning, Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 4.0 of NAME III released 2/4/06.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

3/4/06

Problem with met extraction runs stopping prematurely if there are no particles or 
puffs (a problem introduced in 4.0) fixed.

Dave Thomson

!-------------------------------------------------------------------------------------

18/4/06

Three changes to LincomFlow.F90:
 
(i)   Length of some file name character strings set to MaxFileNameLength
(ii)  OpenFile routine used to open files - this ensures errors in opening files are 
      trapped
(iii) Correct coords for met data to be used by Lincom written to the Lincom input 
      file

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

10/5/06

ReadMet and ProcessMet in NWPMet.F90 renamed ProcessNWPMet and ReadNWPMet to avoid 
name clash with routines in SingleSite.F90 which confused the Fortran2Html code.

Input of eta definitions improved. Now any two of Eta, A and B can be input. Code 
corrected so that, although B must not increase with level number, B can remain 
constant.

Input of parameters for processing fields improved. There is no need to give PTime
and PdT if the probabilities/percentiles are over the ensemble and not over time. 
Equally PTime and PdT could both be given with a value of zero to indicate no time
processing.

Array ProcessNames in routine Tokens2FieldReqs had a hard coded size - now replaced by
a parameter.

Calculation of probabilities corrected to avoid possible integer overflow. Also bug 
fixed which affected percentile calculations when only 0 and 100 percentiles were 
requested, but more than a single 100 percentile was requested. 

Some if-tests in InitProcess which could take the form "If (0.0/0.0 > A) Then" have 
been altered as results were compiler/platform/optimisation dependent.
 
Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------

15/5/06

Unix script CatCode created to concatenate NAME III code into single file NAMEIII.F90.

Helen Webster

!-------------------------------------------------------------------------------------

18/5/06

Each particle/puff given a unique number and used in output of particle/puff 
information. Original puffs also given a unique number. Here 'unique' means number not 
reused when particles/puffs/original-puffs recycled.  

'Output Format' variable added to PPInfo block. Can include T (if there is a T-Grid) 
to indicate separate times in separate files, P to indicate separate particles in 
separate files, and F to indicate the buffers are to be flushed after each sync time
interval.

David Thomson

!-------------------------------------------------------------------------------------

22/5/06

Headers of fields output (not NAME II format output) aligned better. Avoids occasional 
problems with PV-Wave.

David Thomson and Paul Agnew

!-------------------------------------------------------------------------------------

29/5/06

Bug in PrepareResults fixed. This could cause the first output time to be calculated
incorrectly leading to an error in CalciTA.

Bug in UpdateResults fixed. This updated iTL even for output processed over the 
ensemble which could lead to an error in CalciTA.

David Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

15/6/06

MaxNWPMetDefns increased from 2 to 4.

Matthew Hort

!-------------------------------------------------------------------------------------

16/6/06

Name of Lincom executable to be used (which may contain a path) is now treated with 
ConvertFileName before command to run Lincom is submitted. Also name of 
RestoreMetScript is trimmed after calling ConvertFileName rather than before.

Trap added in UpdateLincom to check that the flow field information to be used in 
driving Lincom is valid.

Messages produced by Mets.F90 and Flows.F90 now all routed through the Message routine
to ensure they go to the log file and, if appropriate, the error file, as well as the
screen.

Bug in conversion between height and pressure in the ICAO standard atmosphere above
20km corrected.

Option 'E' introduced in variable 'Output Format' in input block 'Output Requirements 
- Sets of Particle/Puff Information'. This is used to ensure that the run carries on 
until all output for the requirement has been produced.

Routine ProcessChemOutput moved to Case.F90, renamed, and called directly from within
Case.F90 rather than from within Chemistry.F90.

MaxSources reduced to 7000 to save memory.

David Thomson

!-------------------------------------------------------------------------------------

19/6/06

Ability to run with unnamed field requirements restored.

Spacing improved of messages about variables not available in single site met.

David Thomson, Matthew Hort and Andrew Jones

!-------------------------------------------------------------------------------------

20/6/06

New compiler script created for ifort (Intel v 9) called LinuxIfortRelease.
NAME III is faster using this compiler and options. However, single site met does not
work.

Matthew Hort

!-------------------------------------------------------------------------------------
 
21/6/06
 
Added PPInfo_ as a public variable in Output.F90
 
Claire Witham

!-------------------------------------------------------------------------------------
 
26/6/06
 
Revised processing of Eulerian (chemistry) output fields in Case.F90. The calculation
of Eulerian outputs is now coordinated using information from the appropriate ReqInfo
quantity (in a similar way to the treatment of flow outputs). The change also implies
that time averaging now works correctly for Eulerian outputs.

Andrew Jones

!-------------------------------------------------------------------------------------

27/6/06

In field output headers, the expressions 'release rate' and 'source strength' are used
consistently for Name II and Name III format output respectively.  

Dave Thomson and Matthew Hort

!-------------------------------------------------------------------------------------

30/6/06

A problem was discovered in 3.4.3 if asking for averaging/integrating with only one 
contributing time (i.e. # Av Times = 1). On Linux/Intel the code fails but on 
Windows/Compaq it runs and, although the answers were correct in tests, the code 
design means this isn't guaranteed (the inconsistency between platforms is due to the
possibility of accessing an uninitialised variable). For the record we note here a 
solution which could be applied to 3.4.3 by changing the code in Output.F90: ensure 
the two else-if blocks for the never-fully-completed AvdT == 0 option cannot be 
executed and ensure FieldReq%UseProcesses is false for the relevant processing step. 
Version 4.0 hasn't been checked, but there seems to be no problem in the current 
development version of the code.

Correction made to puff output calculation (in routine PuffConc) to give correct 
results if the grid's dx, dy, or dz are zero.

Various diagnostics written to the screen from LincomFlow.F90 have been commented out.

Dave Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

1/7/06

Internal reads in Input.F90 replaced by calls to Char2Std and Char2Int.

Some general tidying of Output.F90. This includes changes in preparation for
introducing the particle re-use option for fixed met. Also there is a convention 
change for the way a percentile processing step is stored. The space-time-ensemble 
extent which is stored used to be that of the preceeding probability processing step; 
now a single point extent is stored. This makes certain aspects of the coding easier 
and more consistent.

Dave Thomson

!-------------------------------------------------------------------------------------

11/7/06

There is a problem if the start time of the computational domain is after the end of a 
time grid used for an output requirement. In the routine OutputFields, the code tries 
to output time indices in the range [a = 2^31 - 1, b = - (2^31 - 1)]. This should not 
do anything, but does (at least on the Windows Compaq compiler), presumably because 
the do loop length calculation Max(b - a + 1, 0) overflows and doesn't evaluate to 
zero. Fixed by using Huge(I)/3 as the flag instead of Huge(I). However this exposes 
another bug - if all output requirements are before the start time of the 
computational domain, the run sets the start time to the infinite future (this is 
correct as nothing needs to be done) but then the run tries to write a restart file 
whether or not this is intended (next restart time is set to infinite if no restart 
files are wanted, but now time is infinite so the next restart time is reached) and 
fails if the restart system hasn't been properly initialised. Fixed by adding checks 
that time isn't infinite in tests to decide whether to suspend and whether to write 
restart file and by ensuring EndOfCase is set if time is infinite. A warning has also 
been added that there is nothing to compute. Note that in version 4.0 on Linux 
(haven't tested 4.0 on Windows) only the second bug is apparent. The first may have 
been introduced after 4.0 in rationalising Output.F90 or may be a Windows Compaq 
compiler issue. Steve Lionel (Intel Forum) says that the above behaviour of the 
Windows Compaq compiler is consistent with the Fortran standard.

Dave Thomson and Helen Webster

!-------------------------------------------------------------------------------------

7/8/06

The subroutine SpaceSeparatedList in Input.F90 has been replaced by two separate
subroutines for the parsing of real values and character strings:
 - ParseListStd  (parses a list separated by some delimiter into a real array), and
 - ParseListChar (parses a list separated by some delimiter into a character array).
Here the delimiter is specified as an argument in the subroutine call, and any single
character is permitted (i.e. we are no longer limited to a space separated list).

Revised the subroutine Tokens2FieldReqs in Input.F90 to allow multiple species when
specifying a field request in the input file. The 'Species' variable in the input
block 'Output Requirements - Fields' now accepts a semi-colon separated list of
species names, which is used to set up an individual field request for each species.
In the longer term, it would be more efficient to store and process multiple species
within a single field request.

Andrew Jones

!-------------------------------------------------------------------------------------

18/8/06

Bug fix in subroutine Tokens2FieldReqs in Input.F90. The previous change listed above
was only effective for field requests having a species dependency. This has been
corrected and the routine now works properly for all field requests.

Andrew Jones

!-------------------------------------------------------------------------------------

4/9/06

Bug in Tokens2Sources fixed - the if-test for whether source location uses X & Y or a
named location didn't test value of Tokens%Tokens(24). This could have caused failures
or a failure to check that the user had overspecified the problem.

Bug corrected which made decay of deposition with power law decay fail. Also we now
trap cases where results will be in error (i.e. when not all material is released at 
the same time). Decay routine moved to Species.F90.

Dave Thomson

!-------------------------------------------------------------------------------------

13/9/06

A number of changes in CoordinateSystem.F90, Input.F90 and NWPMet.F90 associated with
adding support for using GRIB format met data. [Unless otherwise stated, the following
routines are all in NWPMet.F90].

(i)   Support for handling met files in GRIB Edition 1 format:
(i.1) A third option has been added for the FileType of an NWPMetDefn and for the 
      variable 'File Type' in the input block 'NWP Met Definitions'. Setting FileType
      = 'GRIB Edition 1 File' specifies that the met data is stored in GRIB format. 
      The Function InitNWPMetDefn has been updated to handle this option.
(i.2) An integer array FieldCodes(:) has been added to NWPMetDefn2 (part 2 - met file
      structure definition) to store the field codes (GRIB product parameter numbers)
      of the met fields. These field codes take the form of six-digit values TTTPPP,
      where TTT defines the local parameter table and PPP defines the parameter within
      that table (e.g. TTT = 128 is the standard ECMWF parameter table). We use a
      field code of -999999 to set all values of a field to zero, as an alternative
      to returning a missing field. This is a useful fix that allows the model to
      run when certain required fields (such as cloud and precipitation) are missing.
      Functions NWPMetDefn2InputNames and Tokens2NWPMetDefn2 in Input.F90, and
      InitNWPMetDefn2 and NWPMetDefn2Eq in NWPMet.F90, updated to include field code.
      Field codes are input through the variable 'Field Code' in input block 'NWP Met 
      File Structure Definition'.
(i.3) Subroutines ReadTopog, ReadNWPMet and Read2dField updated to include option of
      reading topography and met fields in GRIB Edition 1 format. In ReadNWPMet,
      extra arguments are now passed through to the subroutine Read2dField. The
      GRIB products are read and decoded using various external routines from the
      ECMWF GRIBEX software (the ECMWF GRIB handling package).
(i.4) The ECMWF GRIBEX software has been compiled locally (using ifc compiler under 
      Linux) into the library libgribex.a. There are some restrictions on the use of 
      this library (e.g. in providing to third parties) so the code has been set up to
      include the functionality of reading GRIB files as an option. This option is 
      switched on using the compiler directive GRIBsupport at compilation. An example
      compilation script "LinuxIntelRelease_GRIBEX" has been added.

(ii)   Revised vertical velocity conversion for pressure-based coordinate systems:
(ii.1) An additional vertical velocity array WNoTFix has been added to NWPMet for
       storing a copy of the vertical velocity W without the d/dt correction terms in
       the conversion. This extra array is only allocated and used when reading in a 
       pressure-based vertical velocity, so there is no additional overhead here when
       handling height-based velocities.
(ii.2) Subroutine UpdateNWPMet revised to allocate the WNoTFix array (when ZCoordW is
       one of Z_P, Z_PAsZ, Z_PAsEta) and to apply the d/dt correction term in the
       conversion of vertical velocity from a pressure-based vertical velocity to
       the rate of change of height above ground in metres (see ii.4). This correction
       needs to be done separately from the met processing step because it depends on
       met information at two times and is also recalculated at the next met update.
       These additional terms are therefore treated as a correction WNoTFix --> W of
       the saved values without the d/dt correction terms.
(ii.3) Several revisions have been made to the subroutine CalcZAboveGroundDot:
       - no conversion of the vertical velocity is now applied at level 1 (surface
         values) because W is already set to zero here (and applying a conversion
         could actually create an error).
       - calculation of Z(Above Ground) Dot has been revised in those cases where the
         vertical velocities are read in using pressure-based coordinates. There is
         now a generalised calculation for pressure-based coordinates analogous to the
         existing calculation for height-based systems.
(ii.4) New subroutine CalcZDotCorrection added, which calculates the correction term
       when converting from a pressure-based vertical velocity to the rate of change
       of height above ground in metres (this takes into account the dz/dt tendency).
(ii.5) New subroutine CalcdZdXPBased added to CoordinateSystem.F90, which calculates
       the partial derivatives dZ_1/d(X,Y,Z_2) for two pressure-based coord systems
       Z_1 and Z_2.

(iii)  Minor bug fix in function InitNWPMetDefn. The error message was incorrect
       when testing the length of the input string for BinaryFormat.

(iv)   A reference time T0 has been added to NWPMetDefn. This allows the time of the
       first met fields to be specified explicitly in the input file (e.g. for 3-hrly
       met fields starting from 01 UTC). The default value is 1/1/2000 00:00, i.e. a
       reference time of midnight. Revised subroutine UpdateNWPMet in NWPMet.F90 to
       use this reference time, and the subroutines NWPMetDefnInputNames and
       Tokens2NWPMetDefn in Input.F90. T0 is input through the variable 'T0' in input 
       block 'NWP Met Definitions'.

Andrew Jones

!-------------------------------------------------------------------------------------

26/10/06

LinuxIntelRelease_EMARC added. This gives improved optimisation on some machines 
(including EMARC machines) but doesn't work on other machines. This is a similar but 
improved version of LinuxIfortRelease (see 20/6/06 above) and so LinuxIfortRelease has
been removed.

No-vectorisation directive added for a loop in SingleSite.F90. Otherwise this gives 
wrong results with the improved optimisation.

This repeats changes already made in 3.4.4.

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

31/10/06

CalcdZdX renamed CalcdZdXZBased for consistency with other function names.

All messages now written to log file as well as to the screen.

A bug which caused single site runs to fail if the option to use two Z0's was used has
been fixed. The single site module returns the met site Z0 in SSMet%Z0 if this is the
right Z0 to use and the dispersion area Z0 in SSMet%Z0D if this is the right Z0 to 
use. The single site met module, in using the data returned by the single site module, 
was incorrectly always using SSMet%Z0 (which is not always defined).

SingleSiteMet.F90 altered to ensure cloud is not zero if precipitation is not zero. 
Cloud = 0 with precipitation > 0 upsets the wet deposition scheme and results in no
wet deposition despite there being precipitation. This is because the wet deposition
scheme needs cloud base and top information (which SingleSiteFlow.F90 has a default 
for, but only if cloud is non-zero).

CatCode.bat added - an MS-DOS version of CatCode for concatenating the NAME III code.

NAG / HP scripts removed. Fortran preprocessor symbols NAGHPCompiler and HPHPCompiler
removed, with NAGHPCompiler replaced by IntelLinCompiler (previously one needed 
NAGHPCompiler set as well as IntelLinCompiler when running on Linux with the Intel
compiler).

Compile scripts reorganised to support only version 9 of the compiler:
  (i) LinuxIntelDebug, which was intended for version 7, has been revised for version 
      9.
 (ii) The old Linux64IntelRelease is appropriate for version 9 of the compiler - its 
      been misnamed because version 9 was first available on the 64-bit machines. It 
      has been renamed LinuxIntelRelease and the old LinuxIntelRelease (intended for
      version 7 of the compiler) removed.
(iii) LinuxIntelRelease_GRIBEX updated to version 9 of the compiler.
In addition names and locations of exe files and comments within scripts revised.

Fortran preprocessor symbol Linux64Intel renamed LinuxIntelV9.

The compile option -Wp,-macro=no has been added to the Linux Intel compiler scripts. 
This ensures fpp doesn't do macro expansion outside of pre-processor lines (the -Wp 
bit passes what follows to fpp; the -macro=no bit seems undocumented by Intel but is
what worked with the NAG compiler and tests show it works with Intel version 9 too). 

In output column headers, temporal/horizontal/vertical averaging information is given 
in the T/X/Y/Z rows if these would otherwise be blank. This reverses a change made on 
30/3/06.

Dave Thomson

!-------------------------------------------------------------------------------------

3/11/06

Names of D-grids generated in Tokens2FieldReqs altered to help ensure uniqueness.

Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------

4/11/06

Deposition scheme corrected to prevent deposition of material above the boundary 
layer.

Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 4.1 of NAME III released 6/11/06.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

7/11/06

LinuxIntelRelease altered to test whether compilation is on a 64-bit or 32-bit machine
and to name the exe file appropriately.

Max sources increased to 34000.

Alistair Manning

!-------------------------------------------------------------------------------------

9/11/06

In output column headers, temporal/horizontal/vertical averaging information is 
supposed to be given in the T/X/Y/Z rows if these would otherwise be blank. This was 
coded on 31/10/06 but a bug was introduced so that it didn't work properly. It has now
been corrected and tested.

Dave Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

23/11/06

Bug fix in subroutine DryDeposition in Particle.F90. An 'else' clause has been included
to set the DryDep array to zero whenever a particle is above the boundary layer (see
change on 4/11/06). This variable was previously uninitialised in this situation and
gave an erroneous deposition calculation.

Dave Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

29/11/06

Free tropospheric turbulence parameters (sigma_u,v,w and tau_u.v.w) and meander 
parameters (sigma_u,v and tau_u,v) can now be defined by the user in the input 
text file. Subroutines changed are Input.F90, NWPFlow.F90, NWPMet.F90, 
SingleSiteMet.F90. Values for v are assumed equal to values for u. The relevant column
keywords, which can be used in the 'NWP Met Module Instances' and 'Single Site Met 
Module Instances' blocks, are 

'Meander SigU' (standard deviation of horizontal velocity for meander - default has 
been changed to 0.8 m/s for NWP met and remains unchanged at 0.5 m/s for single site 
met), 
'Meander TauU' (horizontal Lagrangian timescale for meander - default has been changed
to 14400s (4 hrs) for NWP met and remains unchanged at 7200s (2 hrs) for single site 
met, 
'Free Trop SigU' (standard deviation of horizontal velocity for free tropospheric 
turbulence - default remains unchaged at 0.25 m/s)
'Free Trop SigW' (standard deviation of vertical velocity for free tropospheric 
turbulence - default remains unchaged at 0.1 m/s)
'Free Trop TauU' (horizontal Lagrangian timescale for free tropospheric turbulence - 
default remains unchaged at 300s)
'Free Trop TauW' (vertical Lagrangian timescale for free tropospheric turbulence -
default remains unchaged at 100s)

Helen Webster

!-------------------------------------------------------------------------------------

19/12/06

Entrainment scheme for homogeneous multi-turbulent layer scheme now added. 
Currently the scheme does not determine the turbulent layers and should be 
identical to the entrainment scheme at the boundary layer top.

Major changes to subroutine DiffusionProcessReflect in Particle.F90.
MaxTurbLayers added to GlobalParameters.F90 and currently hardwired to 2 (level
1 = boundary layer, level 2 = free troposphere).
New elements added to Flow_ dervied type in FlowAndFlowProfile.F90:
  K3TurbLayers(MaxTurbLayers) = Values of vertical K in each layer.
  ZInterface(MaxTurbLayers - 1) = Z of interface at top of layer. ZInterface(1) 
                                  currently hardwired to Flow%H.
  NTurbLayers = Number of turbulent layers. Currently hardwired to 2.
These replace K3AboveH and K3BelowH.

Helen Webster

!-------------------------------------------------------------------------------------

4/1/07

Bug fix to DiffusionProcessReflect subroutine in Particle.F90. 
Particles were reflected if they had crossed the boundary layer top but were 
not below ground.

Helen Webster

!-------------------------------------------------------------------------------------

9/1/07

Bug fix to DryDeposition subroutine in Particle.F90. 
For particles undergoing sedimentation, if Particle%X(3) < 0, then particle is 
deposited, mass is set to zero, but particle is not currently killed off. 
If this happens then Particle%X(3) is now set to 0 since Particle%X(3) < 0 can 
cause grief in later timesteps.

Helen Webster

!-------------------------------------------------------------------------------------

22/1/07

Code written to allow user control over action to be taken on certain errors/warnings.
New module 'error and message II' created, code written in Input.F90 to input 
information. Control is exercised through a block in the input file with block keyword
'Message controls'. The column keywords are 
  Name - Name of error message.
  Action - Action to be taken when the error occurs. Options are 
    Default or blank       - Same as if no message control was in place.
    Message                } - Message issued as a warning, error, fatal
    Warning                } error or unexpected fatal error.
    Error                  }
    Fatal Error            }
    Unexpected Fatal Error }
  # of Messages Before Failure - After this many messages any further message is 
                                 escalated to a fatal error.
  # of Messages Before Suppression - After this many messages any further messages are
                                     suppressed.
Some minor associated tidying of the error and message module.

User controlled error message added to deal with the situation where there are no 
valid flow modules with the flow attribute. The name of the error message (to be used 
in exercising control via the input file) is 'No flow'. The default behaviour if no 
control is specified in the input is 'fatal error'.

User controlled error message added to deal with the situation where particles/puffs 
are being lost due to lack of a suitable flow module. The name of the error message 
(to be used in exercising control via the input file) is 'No flow for particle/puff'. 
The default behaviour if no control is specified in the input is 'error'.

Input array structures and supporting routines moved from Input.F90 to HeadedFile.F90.

LinuxIntelDebug, LinuxIntelRelease_EMARC and LinuxIntelRelease_GRIBEX altered to test
whether compilation is on a 64-bit or 32-bit machine and to name the exe file 
appropriately. This change repeats the change to LinuxIntelRelease made on 7/11/06 in
the other compile scripts. 

Dave Thomson

!-------------------------------------------------------------------------------------

30/1/07

What used to be called 'fields files' or 'ADG PP files' are now called Name II met 
files to avoid confusion with true Met Office fields or PP files. In addition the 
descriptions of the met 'File Type', as specified in met definition files, have been 
shortened. The options are now 'Name II', 'PP' and 'GRIB Edition 1'.

Ability to associate an array of indices with a vertical grid has been added. The 
point of this is that for some purposes one may not want to call the levels 1, 2, 3, 
etc. The indices are input through an Array block and the array name needs to be given
under column keyword Index-Array in the Vertical Grids block. MaxArrays increased to 
12.

The vertical grids used for NWP met data now have to have an array of indices
associated with them, the indices being the grid level index used by the NWP model.

Field codes (input in NWP Met File Structure Definition block) and indices associated 
with vertical grids now used to check stash codes and level numbers in Name II and PP
met files. This enables PP files to have missing fields (simply by omitting both the 
field record and the preceeding header record). 

This check has been disabled in the case of Name II H regional met files (including 
'cut down' versions of these files) between 1/1/99 and 29/3/99 inclusive and after 
1/1/2001 for the case where the error is 'level 19 requested and level 18 in the 
file'. (Note this includes H regional files after 1/1/2001 but excludes H2001 regional 
files which cover the same period.) This avoids a lot of error messages for a known 
problem with these files. These files have, on the main vertical grid, NWP level 18 
not 19. (Note level 18 also appears in H2001 global and regional files but, being 
consistent, this has been treated by altering the levels in the met definitions to 
18.)

Warning messages for missing NWP met data moved to after all fields have been read in.
This avoids producing warnings when more than one possible NWP field can be used for a
given NAME III field and some but not all of these NWP fields are missing.

As an additional control on the quantity of errors and warnings the messages for 
missing NWP fields and inconsistent NWP headers have been made controlled messages 
with names 'missing NWP field' and 'inconsistent NWP header'.

Dave Thomson

!-------------------------------------------------------------------------------------

31/1/07

Updated Chemistry.F90 to include some of the NAME II chemistry changes between
namev812 and namev816 (but note this does not include the revised treatment of ozone
on particles).

Specifically, the subroutines CHEMCO, MainChemistry and ChemistryUpdate
have been revised:

  (i) Calculation of local diagnostic fluxes has been removed (as these were not
      intended for general use)

 (ii) Photolysis reactions (dj: 7, 8, 11, 12) have been reinstated (previously
      these were commented out)

(iii) New nitrate aerosol scheme included (based on Ackermann et al. 1995)

 (iv) Relative humidity used in aqueous phase chemistry is restricted to be no
      greater than 100%

  (v) Old code fragments deleted (gaseous phase reactions Y(6) and Y(7) were
      previously commented out here)

 (vi) Reactions 5,12,22,45,131,245,247 re-instated in subroutine CHEMCO
 
Andrew Jones and Alison Redington

!-------------------------------------------------------------------------------------

2/2/07

Bug fix to DryDeposition subroutine in Particle.F90. 
For particles undergoing sedimentation, exit to subroutine added in 
sedimentation loop since otherwise dry deposition is reset to 0 in following 
code. Dry deposition now also converted to rate in sedimentation loop (prior to 
Return).

Helen Webster

!-------------------------------------------------------------------------------------

7/2/07

LinuxIntelRelease_GRIBEX corrected. Some occurances of nameiii replaced by 
nameiiiGribex.

MaxFieldOutputGroups increased to 100.

Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------

12/2/07

Bug fix in subroutine MainChemistry in Chemistry.F90. 
There was an error in the calculation of NH3/HNO3/NH4NO3 equilibrium coefficients,
which has now been corrected.

Andrew Jones and Mark Harrison

!-------------------------------------------------------------------------------------

12/2/07

Routine FlowInfoFromMet in the Lincom flow module renamed LincomFlowInfoFromMet as 
there is a routine with the same name in the NWP flow module which upsets the fortran
to html code.

z0 limited to 1m for deposition purposes (to avoid potential problems if z0 is large,
e.g. if it includes orographic enhancement).

Options rationalised for treating missing NWP met data by interpolating/extrapolating
levels, using persistence, or using default values. The behaviour is now controlled 
by a number of parameters declared at the start of the NWP met module. These replace
the previous parameters MissingBelowThisLevelIsOK and MissingIsOK.

An extra option to specify the location of NWP met data has been added. This uses the
column keyword 'Ensemble Met Folder' and is used when a single folder is to be used,
with each met file containing multiple realisations. The 'Met Folder' option is now
used only for non-ensemble cases.

Tests for consistency of met ensemble size and NWP met folders moved from 
Tokens2NWPMet to SetUpNWPMet_CoordsEtc.

Bug in EtaDefnEq corrected. This compared the three arrays A, B and Eta, but in fact 
only two out of the three arrays are defined in (at least some) calls to EtaDefnEq.
Bugs in HGridEq, ZGridEq, TGridEq, DGridEq and NWPMetDefnEq corrected. This used .eqv. 
but without brackets where they were needed.

Dave Thomson

!-------------------------------------------------------------------------------------

12/2/07

Trap for sync time <= 0 added.

Variable "Next Precipitation?" introduced in input block "NWP Met Definitions". 
Setting this to "true" or "yes" causes the precipitation rates at the end of the NWP 
met interval to be used (instead of interpolating between the values at the start and 
end of the NWP met interval). This is like "Next Heat Flux" and may be appropriate 
when the precipitation rates are derived from accumulations. As part of doing this, 
TCoeffs0 has been renamed TCoeffsEnd and now always contains time interpolation 
coefficients appropriate for the "next" time, i.e. the end of the NWP met interval, 
instead of the contents depending on the setting of NextHeatFlux. TCoeffsEnd is also
now stored in NWPFlowMemory.

Dave Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

14/2/07

When particles are released from a source which extends below ground and has the "no 
reflect" option, particles released below ground are discarded. However although they 
do not contribute to output they can make a single time step. This can cause a failure 
in the revised DiffusionProcessReflect (see change dated 19/12/06) because the 
particle position was not corrected for a reflection before the time step. This is now 
done in the routine ReleaseParticle.

Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 4.2 of NAME III released 14/2/07.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

23/2/07

Bug in subroutine Read2dField in NWPMet.F90 has been corrected. When reading met data
in GRIB format, the array element 'FieldList(6)' should be set to the value of the
input argument iMetCase, and not iMetCase - 1 as previously (except when the ensemble 
met folder option, i.e. multiple realisations in a single met file, is used). This bug 
caused the read routine to fail when looking for the requested GRIB product in a met 
file. This is because, except when the ensemble met folder option is used, iMetCase is 
set to -1 in the calling routine to indicate not to check the realisation number, and 
1 was being subtracted from this special value. It has been fixed by replacing 
iMetCase - 1 by iMetCase in Read2dField and, for the ensemble met folder option, 
subtracting 1 from iMetCase before calling Read2dField.

The subtraction of 1 for the ensemble met folder case is related to the reading of 
multiple met realisations. These are indexed from 0 instead of from 1 (with member 0 
representing the control forecast). It is appropriate to index from 0 when using the 
'Met Folder Stem' option as well as when using the 'Ensemble Met Folder' option. 
Hence, for the 'Met Folder Stem' option, we have subtracted 1 from iMetCase when 
constructing the met folder name. In the longer term it will be better to control 
whether the numbering starts at 0 or 1 via the input file.

Andrew Jones

!-------------------------------------------------------------------------------------

27/3/07

Bugs in LincomFlow.F90:

Reference wind height passed to LINCOM was hard wired to 10m.
The actual wind height was fixed as first grid point in vertical grid. 
This could be anything. Code now looks for wind at the first grid point 
above 9.1 m and uses this and labels the height correctly for LINCOM. 
Hence we are now always using the '10m' wind to drive LINCOM.
(We don't allow a wind below 10m to be used to drive LINCOM because this might be 
derived by linear interpolation of NWP winds).

Corrected wind direction calculation. Now limited to 0 to 360 deg. Angles > 360 
did not appear to cause problem but better to fix.

Matthew Hort

!-------------------------------------------------------------------------------------

28/3/07

Value of release height, as given in output, altered to give a height range and to 
give the correct units (instead of always saying 'm agl').

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

12/4/07

Routine Tokens2ZGrid in Input.F90 reorganised to allow Z-Array = 'Use Eta Levels' 
together with a non-blank value for Av Z-Array. Although this is an unlikely 
combination, allowing it simplifies the code.

Extra significant figures added to scale factor used in definition of UK National 
grid.

Redundant code in CalcZAboveGroundDot (NWPMet.F90) removed. This code was for the 
older incorrect method of converting vertical velocity to the desired coordinate 
system and was not used.

Dave Thomson

!-------------------------------------------------------------------------------------

19/4/07

Damping of vertical gradient terms introduced in the stochastic differential equations
used with the puff model. The damping reflects the rate of change of the true puff 
centroid height with respect to the nominal puff centre height - this is not 1 for 
puffs near the ground with a reflected component.

Drift term for the velocity of puffs corrected to reflect the average drift over the
puff (but still approximating met and met gradients by puff centre values) rather than
just the value at the puff centre.

In calculating the contribution from a puff to concentration or deposition, some 
account is taken of the change in puff size over the time step when this is 
significant. This is done by representing the motion of the puff over the time step as
a number of sub-steps.

Dave Thomson

!-------------------------------------------------------------------------------------

18/5/07

The subroutine ReadNWPMet in NWPMet.F90 has been modified so that a GRIB met file is
explicitly closed after the met data has been read. The GRIB file is closed using the
GRIBEX library routine PBGCLOS. Previously the GRIB file was not closed here (we
thought that the physical file was being closed automatically by the GRIBEX routines,
but it appears this was not the case!). This problem emerged when the system limit for
the number of open files was exceeded while attempting to perform a large ensemble 
run.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 4.3 of NAME III released 18/5/07.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

23/5/07

A number of changes were made to the way data is obtained from the various flow 
modules, in order to enable a future increase in the number of types of data that can 
be obtained. This is intended to support extra quantities needed for dust sources and 
complex deposition schemes. In more detail:

(i) The common part of the types FlowField_, CloudField_ and RainField_ put into a new 
type called CommonAttribField_.

(ii) Various flow module routines were combined: 
  GetFlowField,     GetCloudField     and GetRainField     become GetAttribField,
  GetFlow,          GetCloud          and GetRain          become GetAttrib,
  GetFlowKnownFlow, GetCloudKnownFlow and GetRainKnownFlow become GetAttribKnownFlow. 

(iii) Names and indices of attributes introduced as parameters in the common flow
module. Information added to Flows and Flows%Attribs to assist in converting between 
indices in the attribute list in the common flow module and indices in the array 
Flows%Attribs. Attribute indices also recorded in the part of the flow state common to 
all flow modules.

(iv) Minor reordering of statements in WhichFlow routine for efficiency.

Dave Thomson

!-------------------------------------------------------------------------------------

31/5/07

Compilation order changed with the time module moved to before the headed file module
in order to enable the introduction of Token2Time as discussed below.

Routines Token2Int, Token2Std, Token2Log and Token2Time added to headed file module to 
convert tokens to integers, reals, logicals and times with useful error messages for 
incorrect token values. In the input module, calls to Char2Int, Char2Log and Char2Time
for processing the input files replaced by calls to Token2Int, Token2Log and 
Token2Time to give better error messages. A start has been made on replacing calls to 
Char2Std with calls to Token2Std.

BlockNameLengthTest routine written in the headed file module. TokenLengthTest and 
InitArray routines tidied.

Dave Thomson

!-------------------------------------------------------------------------------------

7/6/07

Call to SetUpGrids_CoordsEtc from Main now made twice, before as well as after 
SetUpCoordsEtc_Flows. This is because existing grids may need to be finalised before 
SetUpCoordsEtc_Flows while the latter may add more grids which then need to be 
finalised. Without this change there is a problem using Lincom with a grid defined by 
a named centre point. The grid which Lincom uses to get flow information from other 
flow modules is created in SetUpCoordsEtc_LINCOMFlow which is called from 
SetUpCoordsEtc_Flows. This grid depends on other grids and so these other grids need 
to be finalised before the new grid is created.

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

15/6/07

Sign corrected for exponential term in PdfA and PdfB in routine XUSdeTerms.

Helen Webster and Dave Thomson

!-------------------------------------------------------------------------------------

17/6/07

Puff scheme improvements (and two particle scheme improvements):

Gradient damping (see change dated 19/4/07) extended to cases with skew vertical 
velocity.

The puff growth calculation is now based on the growth rate in homogeneous 
turbulence with same time dependence as the turbulence seen by the puff. This was 
intended previously, but the d(Eulerian stats)/dt terms in the SDE were neglected. 

Calculation of Beta (the fraction of mean square spread represented by random puff 
motion) in routine Step7 simplified to be 0 if puff small and DeltaOpt /= 2, 1 - A6**2
if puff small and DeltaOpt = 2, and 1 if puff has reached maximum intended size 
(DeltaOpt = 2 is the option where some dispersion is treated as puff spread and some 
as random puff motion right from the start). The maximum intended size is Delta. Beta 
is also set to zero if a puff hasn't had randomness enabled, but the change to step 6 
below means that this should only now be needed in case of rounding error (if no 
rounding error, then, when randomness isn't enabled, the calculation should yield 0 
anyway).

The random walk model for the random part of the motion is now based on the velocity 
variance reduced by a factor Beta. This requires a change also to the extra drift 
acceleration so that the total drift is approximately the average drift over the puff
in the underlying particle random walk model.

In Step5, puffs split at release time have their velocities reinitialised. This 
ensures different puffs have different random initial velocities.

Role of variables DeltaI and Delta now taken just by Delta (the maximum puff size) 
with DeltaOpt now passed to Step7 to activate the DeltaOpt = 2 option. 

In Step6 a puff is split and randomness is enabled if randomness hasn't previously 
been enabled but it is anticipated that Step7 will wish to invoke randomness.

3 bugs corrected: Puff%G initialised to .not.Source%TopHat (instead of Source%TopHat);
Puff%SigT squared in routine Step4 (this bug would generally, except for very small 
sources, have switched the puff to Gaussian earlier than intended, thus partially 
correcting for the previous bug in some cases); duplicate line in Step6 removed. 

Step 4 now always sets Puff%G to true and SigT to zero as top hat puffs not yet
fully supported.

Particle and puff turbulent velocity initialisation and reflection now takes account 
of skewness.

Particle and puff random walk increments for skew turbulence now use asymptotic forms 
for large velocities to avoid numerical inaccuracies and/or 0/0.

Dave Thomson

!-------------------------------------------------------------------------------------

18/6/07

MaxDispOptses increased to 6.

Ability to output trajectories graphically on Windows PCs added.

Dave Thomson

!-------------------------------------------------------------------------------------

10/7/07

Added a "Vertical Velocity?" input dispersion option with corresponding variable
VerticalVelocity in DispOpts to allow production of 2-D trajectories (fixed particle 
height) when this is set to false. The default value is True. If plume rise is 
requested, but vertical velocity is false, then the run terminates with a fatal error. 
Files modified are: Case.F90, Input.F90 and Particle.F90.

Claire Witham and Andrew Jones

!-------------------------------------------------------------------------------------

27/7/07

GlobalParameters.F90 - Increased the max number of species to 32 (MaxSpecieses)
                       Increased max number of column keys to 64 (MaxColumnKeys)

Alistair Manning

!-------------------------------------------------------------------------------------

10/8/07

Improved error message for 'domain not found' in routine PrepareForNextCase.

Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 5.0 of NAME III released 24/8/07.
Version 5.1 of NAME III released 11/7/08.
Note a number of earlier changes (listed below) were not included in 5.1.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

26/9/07

GlobalParameters.F90 - Increased LastUnit to 1050
                       Increased MaxPPInfoOutputFiles to 1000
Necessary to allow production of 1000 separate particle trajectories as are 
required for work with Dick and Dudley.

The following changes have been made to allow the output of the particle/puff 
information at the release time when calculating particle/puff information on a time 
grid.
Output.F90 - IncFields and IncPPInfos included as variables in routines CalcReqInfoT 
             and CalcNextReqInfoT
Case.F90 - IncFields and IncPPInfos included as variables in calls to CalcReqInfoT
         - Addition of extra code in LoopParticlePuffsAndTimeSteps to output 
           particle/puff information at first release time for time-gridded output. 
           This uses a new list of output requirments, ReqInfoTPPInfos, which is 
           calculated with IncFields false and IncPPInfos and IncTime1 true.

Claire Witham

!-------------------------------------------------------------------------------------

27/9/07

Extra met variable outputs (relative humidity, cloud cover, wind speed, wind direction 
and boundary layer depth) for particle/puff information output added to ParticleInfo 
in Particle.F90 and corresponding extra column headers added in PPInfoColumnHeaders in 
Output.F90.

Claire Witham

!-------------------------------------------------------------------------------------

1/10/07

Additional code in Output.F90 and Case.F90 to include extra met variables
('Sigma VV' and 'Meander Sigma VV') in the list of output fields.

Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------

12/11/07

Major revision to chemistry, including implementation of new hybrid scheme for
modelling ozone on plume particles. These changes synchronise NAME III with
the final version of the NAME II chemistry in v8.17. Changes to Case.F90,
Chemistry.F90, GlobalParameters.F90, Input.F90, MainNameIII.F90 and Output.F90.
Unless explicitly indicated otherwise, all changes are in the main chemistry module
in Chemistry.F90.

   (i) Changes to support the additional chemistry option of modelling ozone on
       plume particles. The "Chemistry Options" input block has been modified,
       replacing the column header "Ozone On Particles?" by a new variable
       "Ozone Modelling Method". The following options are supported for the
       ozone method:
        - 'Ozone Field'          (old scheme based on a static 3-d ozone field),
        - 'Background Particles' (ozone modelled on particles everywhere,
                                  i.e. scheme used for EA plume chemistry project),
        - 'Plume Particles'      (ozone modelled on plume particles,
                                  i.e. new hybrid scheme).
       'Plume Particles' is the default method in the absence of a user specification.
       There are some associated modifications to the subroutines ChemOptsInputNames
       and Tokens2ChemOpts in Input.F90.
       
       Related to this change, the ChemOpts_ type has been revised in a similar way.
       The logical flag 'OzoneOnParticles' is replaced by an integer variable
       'OzoneMethod', with new integer codes to describe the ozone modelling methods:
       O3_AsField = 1, O3_BackgroundParticles = 2, O3_PlumeParticles = 3.
       Subroutine InitChemOpts also revised to process the new OzoneMethod code.

  (ii) New local parameter iSpeciesO3 = 12 set up in Chemistry module to store the
       species index for ozone on particles.

 (iii) Added a real(8) array ChemFieldMolWeights(*) to the ChemistryDefn_ type to
       store the molecular weights of those species held as 3-d chemistry fields.
       There is also a new subroutine SetUpChemistryDefn_ChemFields to set up the
       molecular weights of the chemistry fields at the start of the run. These
       values are currently hard-wired here (as with NAME II) but could be set up
       from information input via the species definition file.

  (iv) Concentrations of species held on chemistry fields are now stored as g / m^3
       (previously these concentrations were stored as volume mixing ratios).
       As a consequence, in the ChemistryState_ type, the array 'VolMixingRatio'
       has been renamed as 'ChemField', with this change propagated through the
       rest of the code. Similarly, the subroutines ConvertVolMixingRatioToConc and
       ConvertConcToVolMixingRatio have been renamed as ConvertChemFieldToConc and
       ConvertConcToChemField, respectively, and the conversions revised to use
       g / m^3 instead of volume mixing ratios. Furthermore, the setting of ozone
       and background ozone values to zero when ozone is carried on particles has
       been removed from these routines, because this is no longer valid (e.g. with
       the new hybrid ozone scheme), and the revised logic should ensure that the
       ozone field value is only used when it is appropriate to do so.

   (v) Some changes in the way in which STOCHEM chemistry data is used.
       The background fields for ozone O3LIM and hydrogen peroxide H2O2LIM
       are now stored on the main chemistry grid (i.e. the same grid as used for
       the chemistry fields) rather than the original STOCHEM grid. Field values
       are downscaled from the STOCHEM grid by a nearest-gridpoint interpolation.
       There is also a conversion from volume mixing ratios output in STOCHEM files
       to g / m^3. As a result of these changes, it is only necessary now to process
       the STOCHEM background value at the beginning of a chemistry run (and at the
       beginning of any new month) rather than at every chemistry update step.
       Details of changes are:

 (v.1) ChemistryState%O3LIM and ChemistryState%H2O2LIM arrays now defined on the
       main chemistry grid.

 (v.2) Subroutine ReadSTOCHEMFields significantly revised, and renamed
       SetBackgroundFieldsFromSTOCHEM to more accurately reflect its purpose.
       New global parameters MaxSTOCHEMnX, MaxSTOCHEMnY, MaxSTOCHEMnZ have been
       introduced in GlobalParameters.F90 to store the maximum size permitted for
       the STOCHEM grid (these values are used as local array bounds inside
       SetBackgroundFieldsFromSTOCHEM). Some of the calculations previously
       done in the subroutine InitChemistryState have been moved inside
       SetBackgroundFieldsFromSTOCHEM.

 (v.3) The call to the subroutine InitChemistryState moved from the NameIII main
       program into the subroutine RunToRestartDumpOrSuspendOrEndOfCase in Case.F90
       (after the met/flow update step). This enables conversion of STOCHEM values
       for volume mixing ratio into mass concentrations (g / m^3) for background
       fields (which requires air density in the flow structure to be available).
       This change also now allows, in principle, coordinate system conversions
       requiring flow information to be performed between the STOCHEM and user
       chemistry grids (although such conversions are not actually set up yet).

 (v.4) The call to FindSTOCHEMGridbox in the subroutine ChemistryUpdate has been
       removed, because the original STOCHEM grid is no longer used in the
       chemistry directly (all STOCHEM background fields having been interpolated
       to the main chemistry grid at the point of reading/processing the data).
       Several local variables were also removed in connection with this change.

  (vi) Logical flag 'Initialised' added to ChemistryDefn_ to indicate that the
       chemistry definition has been initialised for a chemistry run. Also the
       logical flag 'InitialiseVMRs' in ChemistryState_ has been renamed as
       'Initialised' to reflect the fact that the initialisation is now more
       general than just the chemistry fields.

 (vii) All real arithmetic now done at double precision in chemistry, with all
       chemistry fields also stored as double precision values (following discussion
       with ALR). In particular:
       1) ChemistryState_ type revised to hold 'ChemField', 'O3LIM' and 'H2O2LIM'
          arrays as real(8),
       2) the argument 'Conc' in the two subroutines ConvertChemFieldToConc and
          ConvertConcToChemField changed from real(Std) to real(8),
       3) chemistry fields in the subroutines ChemistryUpdate and MainChemistry
          changed from real(Std) to real(8). Also the argument 'O3_R' in
          MainChemistry has been renamed 'O3_Field', and the '_R' has been
          removed from the other chemistry field arguments and the associated
          conversions to/from double precision also removed here.

(viii) New global parameter MaxChemLayers added in GlobalParameters.F90 to store
       the maximum number of vertical layers (i.e. size of ZGrid) permitted in
       the chemistry scheme. New global parameters MinZForUniformChemLevels
       and MaxdZForUniformChemLevels also introduced. These are used for checking
       that the chemistry levels are uniformly spaced (and not too deep) adjacent
       to the surface when the new hybrid chemistry is used.

  (ix) The subroutine CheckChemistryDefinition has been updated to return more
       useful error messages in the event of an incorrect ChemistryDefn being
       specified (an error code is no longer returned to the calling routine).
       Additional checks have also been added to ensure that chemistry levels
       adjacent to the surface are uniformly separated up to the height
       prescribed in MinZForUniformChemLevels and are no deeper than the value
       MaxdZForUniformChemLevels. Also the check of the chemistry definition
       has been moved to the end of the subroutine SetUpChemistryDefns (after
       the set up of grids, etc.).

   (x) Additions to the GridboxState_ and ChemistryState_ structures to carry
       more information for the revised chemistry calculations. In particular, the
       GridboxState_ type has been updated to include an integer 'nOld' storing
       the old number of particles in the gridbox at the previous sync time, and
       a real(8) variable 'DeltaO3' to store the ozone increment used for relaxing
       the ozone field back to its background value (in the absence of particles
       in the gridbox). Furthermore, the ChemistryState_ type has been updated to
       include a 2-d integer array 'nLayersInBLOld' to store the number of
       chemistry levels within the boundary layer at the previous sync time, and
       a 2-d real(8) array 'O3DryDeposition' to store the accumulated ozone dry
       deposition field. The subroutines PreInitChemistryState and InitChemistryState
       have also been updated to initialise these fields at the start of each case
       (O3DryDeposition is set to zero everywhere, nLayersInBLOld is set to a very
       large number). Each GridboxState array is also initialised with n, nOld and k
       all set to -999 and DeltaO3 set to zero). Furthermore, the subroutine
       InitChemistryGridboxes now stores the previous gridbox particle count in
       the nOld component of the GridboxState array.

  (xi) Topography has been added to the list of met variables retrieved in the
       subroutine GetMetForChemistry, as this is needed to differentiate land and
       sea points in the dry deposition of ozone. Note that it would be better to
       use a land-sea mask (e.g. via land-use data) in the long term here. New
       chemistry parameters VdOverLand and VdOverSea have been introduced to store
       the O3 dry deposition velocity (in m/s) over a land surface and sea surface,
       respectively.

 (xii) Subroutines ConvertConcToMass and ConvertMassToConc modified to use the volume 
       of the lowest chemistry gridbox in a column when calculating the gridbox mass 
       for ozone in the hybrid 'plume particles' ozone method (so essentially we are 
       looking at an ozone mass density per unit depth equivalent to the lowest 
       layer). This should help to avoid cannon balls being created in any deep upper 
       levels. In the subroutine ConvertConcToMass, an else clause has been added 
       setting mass to zero if the concentration of any species is less than 2.0 
       molecules / cm^3. This is the same as NAME II, but the test and the limit value 
       perhaps could benefit from further consideration.

(xiii) A new subroutine SetEffectiveOzoneConc has been added to initialise/adjust
       the ozone concentration value derived from the particles prior to the
       chemistry calculations. The subroutine is called when modelling ozone on
       plume particles (i.e. the hybrid scheme). It sets an appropriate ozone
       concentration, e.g. when new particles are released into an empty gridbox
       or existing particles are transported into a previously empty gridbox.

 (xiv) The subroutine ChemistryUpdate has been restructured to allow ozone dry
       deposition and mixing. This has included splitting the loop over iZ
       (vertical levels) into two iZ loops: the first loop calculating the
       chemistry over every gridbox in a column, and the second loop completed
       after ozone mixing to store the updated ChemistryState and particle details.
       To help achieve this, the 1-dimensional arrays ConcSpeciesOnParticles and
       ConcSpeciesOnFields have been modified to 2-dimensional arrays, with a
       new first index iZ resolving the vertical index of the chemistry gridboxes
       within any particular column. This enables the chemistry values to be saved
       temporarily on each column, so that ozone dry deposition and mixing can be
       performed, before the final steps in the chemistry (conversions, etc.).
       The default chemistry scheme (when there are no particles in a chemistry
       gridbox) has been revised to relax O3 back to the background ozone value
       in 3 hours (12 15-minute time steps). This relaxation applies to the 'Ozone 
       Field' method as well as the 'Plume Particles' method. A warning message has 
       also been added if the ozone value returned from the chemistry exceeds 6.0E12 
       molecules / cm^3 (approx. 200 ppb). An anomolously high value might be a sign 
       that ozone 'cannon balls' are being created.

  (xv) A new subroutine OzoneColumnDryDepAndMixing has been added, which is called
       from within ChemistryUpdate.

 (xvi) Revisions to the subroutine MainChemistry to synchronise with chem.f at
       NAME II, v8.17.
       1) the variable DJ6 has been removed as an argument for input/output,
       2) local fluxes array FAQ(6) deleted,
       3) additional comment added on the clear-sky assumption for photolysis rates,
       4) updated all code within the chemistry iteration loop. This was achieved
          by taking the code in chem.f and modifying for Fortran 90 (i.e. format of
          continuation lines), removing tabs and sporadic white space. The actual 
          changes in the calculation are however restricted to a few lines.
       5) input argument 'O3OnParticles' (logical) replaced by 'OzoneMethod' (integer)
          to allow for revised range of ozone schemes,
       6) a generic ozone species O3 is used in the chemistry - this is taken from
          particles (if O3 is carried on particles, including if using the hybrid 
          'plume particles' scheme) or else from the static 3-d field. Updated O3 
          value is put back on particles (if O3 is carried on particles, including if 
          using the hybrid scheme) and on field (if O3 is modelled on field or if 
          using the hybrid scheme).

(xvii) Changes in the UpdateParticleMasses subroutine:
       1) the MassReassignment array has been revised for NH4NO3 (species 11).
          Mass is now split equally between the NH3 and NO precursor species,
       2) For the 'Plume Particles' ozone method, ozone is now split evenly between 
          all particles in a gridbox (a new 'if' test has been introduced which 
          overrides the default mass reassignment routine),
       3) A threshold has been introduced for negative-mass warnings. This is set
          to 1.0E-3 g (gridbox mass). A warning was previously generated in NAME III 
          if any negative mass remained after reallocating to the particles.

(xviii) Updated the restart subroutines for chemistry ReadRestartFileChemistry and
       WriteRestartFileChemistry to read/write all components of the ChemistryState
       structure needed to restart chemistry runs correctly.

 (xix) Subroutine OutputFields in Output.F90 revised to change column header for
       units of chemistry fields from "volume mixing ratio" to "g / m^3". The
       option to output volume mixing ratio will need to be considered in the
       future, possibly as part of the wider issue of 'a change in units' for
       output requests.

  (xx) General reordering of the objects in Chemistry.F90 into a more logical
       sequence.


The revised chemistry scheme has been tested by repeating the comparison of NAME III
against NAME II for the PUMA summer campaign using the hybrid 'plume particles' ozone 
method. Following a review of the time series results at four locations (Birmingham, 
London, Narberth and Yarner Wood), we have concluded that the performance of NAME III 
is acceptable for chemistry applications.

Andrew Jones and Alison Redington

!-------------------------------------------------------------------------------------

12/11/07

Global parameter MaxDGrids increased to 5, to allow a greater number of data grids
(i.e. sets of percentiles and/or thresholds for probability calculations) to be used
in output requests. Also global parameter MaxProcesses increased to 100 for a similar
reason. The D-grid names which are set up in Tokens2FieldReqs in Input.F90 have been 
made more unique by adding the first data value to the name (for those cases where 
this hadn't already been done).

Andrew Jones

!-------------------------------------------------------------------------------------

15/11/07

Enable user to specify height below which particles are subject to dry deposition 
(default is boundary layer height). Relevant keyword in 'Sets of Dispersion Options' 
input block is "Deposition Height". Code calculates the minimum of the Deposition 
Height and the boundary layer height (i.e. the boundary layer height is the maximum 
value used). A very large value of Deposition Height means boundary layer height is 
always used (and the default value is very large). The fraction of each timestep 
during which each particle is below the deposition height is calculated and is used to 
calculate the dry deposition. Users need to exercise caution between particle noise 
and the height chosen for the deposition height.

Changes to Input.F90, Particle.F90 and Case.F90.

Helen Webster

!-------------------------------------------------------------------------------------

27/11/07

Species.txt - changed surface resistance and deposition velocity for O3 so that 
it doesn't deposit. The chemistry scheme has a seperate method for ozone dry 
deposition under the 'Plume Particles' ozone method. If however using the 'Background 
Particles' method the old values should be used and these values are recorded in 
comments at the start of the file. For the 'Ozone Field' method deposition isn't 
currently treated and so the values are not significant.

Alison Redington

!-------------------------------------------------------------------------------------

11/12/07

GlobalParameters.F90 - increased MaxTGrids from 10 to 100.

Matthew Hort

!-------------------------------------------------------------------------------------

19/12/07

Case.F90 - Bug fix: Zs defined before DrydepFrac calculated

Helen Webster

!-------------------------------------------------------------------------------------

20/12/07

Case.F90 - Bug fix: CalcParticleResults and CalcPuffResults: nest If test so 
that test on Mass(FieldReq%iSpecies) = 0 only conducted if FieldReq%iSpecies /= 0

Helen Webster

!-------------------------------------------------------------------------------------

16/1/08

Case.F90, Particle.F90 - changes to skew turbulence scheme for non-zero mean 
vertical velocity.
 
Input.F90 - change "Deposition height" to "Max deposition height" in "Sets of 
Dispersion Options".

Helen Webster

!-------------------------------------------------------------------------------------

18/1/08

GlobalParameters.F90 - 
 Increased MaxLocationses from 3 to 5.
 Increased MaxHGrids from 15 to 20.
 Increased MaxZGrids from 15 to 20.
 Increased MaxNWPMetDefns from 4 to 8.
 Increased MaxNWPMetDefn2s from 4 to 8.

Matthew Hort

!-------------------------------------------------------------------------------------

22/1/08

Case.F90 - Add Flow%T to call to AgentDecay
Particle.F90 (AgentDecay) - Add temperature at particle location to argument
                            list. Allow for removal of H2 by OH reaction.
             (DrpDeposition) - Allow specific dry deposition for Hydrogen.

NWPMet.F90  - } Use local variables to replace array creation within argument lists of
Output.F90  - } calls to routines. Without this change the Intel Linux compiler with 
NWPFlow.F90 - } -C option generates run-time warnings about 'copying arrays' 

GlobalParameters.F90 - 
 Increased MaxColumnKeys from 64 to 72.
 Increased MaxSpecies from 32 to 36.

Alistair Manning

!-------------------------------------------------------------------------------------

30/1/08

GlobalParameters.F90 - 
 Increased MaxMetMods from 3 to 4.
 Increased MaxNWPMets from 3 to 4.
 Increased MaxFlowMods from 3 to 4.
 Increased MaxNWPFlows from 3 to 4.

Claire Witham

!-------------------------------------------------------------------------------------

31/1/08

Additional code in Output.F90 and Case.F90 to include extra met variables
'Dyn Cloud Water (kg/kg)' and 'Dyn Cloud Ice (kg/kg)' in the list of output fields.

Andrew Jones

!-------------------------------------------------------------------------------------

22/2/08

Additional code in Output.F90 and Case.F90 to include extra met variable
'3d Cloud (Fraction)' in the list of output fields.

Alison Redington

!-------------------------------------------------------------------------------------

23/2/08

Length of character string MetFile in the single site module changed from 92 to the 
global parameter MaxFileNameLength. Test for length > 92 in single site met module
removed. Also global parameters MaxFileNameLength and MaxTokenLength increased to 200.

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

24/2/08

Tidying of error setting in routines GetAttribField and GetAttrib.

Attribute dependent validity of flow modules implemented.

Type "Surface_" added to hold surface properties. Contents of the type are currently
set to a single variable - the required contents will have to be added later.

Particle diameter for particulates now determined in ParticleReleaseInfo instead of 
InitParticle.

Surface attribute added to the system of flow modules (but no specific individual flow
modules yet calculate values for it). In detail: list of attributes in parameters in 
CommonFlow.F90 updated and made public (both in CommonFlow.F90 and Flows.P90),  
Surface_ type added to arguments of GetAttrib and GetAttribKnownFlow, and appropriate 
code added to GetAttrib and GetAttribKnownFlow.

MaxFlowAttribs increased to 6 in GlobalParameters.F90.

Dave Thomson

!-------------------------------------------------------------------------------------

25/2/08

NWP flow and NWP met modules set up to have the structure to provide surface 
information (although without yet setting the content of the Surface_ type). This 
entailed the following changes: 

Routines NWPSurfaceCoordIndices and GetNWPSurface added to NWP met module and calls to 
these routines added in GetAttribKnownFlow. The surface attribute has been added to 
the list of possible NWP flow module attributes in InitNWPFlow.

Validity flags added to CommonMet_ to indicate what each met module can supply to the
flow modules. The NWP met module has been modified to make use of these flags, with
the attributes for this met module being convert&flow, cloud, rain and soil moisture, 
although initially the first three of these will all be set to be the same (all must 
be true for any to be true). Parameter arrays added to indicate which variables need 
to be present to set each validity flag to true. The NWP met module does not now 
necessarily give an error or set the overall validity to false when these validity 
flags are false - the NWP flow module should check the individual validity flags but 
this hasn't been done yet.

Dave Thomson

!-------------------------------------------------------------------------------------

26/2/08

Type "Source_" extended to treat dust and sea-salt sources. Input.F90 modified to 
read in appropriate information and pass this to InitSource to be stored in the type
"Source_". Three extra input variables are added to the sources block: 'Met-dependent 
Source Type', 'H-Grid' and 'Z-Grid'. These are intended to eventually support gridded 
sources and met dependent sources (with these concepts being independent, e.g. to 
allow gridded sources to be used in future for boundary conditions), but currently the 
only extension fully implemented is to horizontally-gridded met-dependent sources of 
the dust or sea-salt type. For these, the input of the new variables must be:
   Met-dependent Source Type = 'Dust' or 'Sea Salt'
                      H-Grid = grid for the source strength calculation
                      Z-Grid = blank
while the old variables, excluding times and plume rise parameters (irrelevant here), 
must be
                        Name = source name
          H-Coord, dH-Metres = blank
         X, Y, dX, dY, Angle = blank
  Set of locations, Location = blank
                     Z-Coord = m agl
                   dZ-Metres = Yes or No (value irrelevant)
                           Z = 0 
                          dZ = 0 
                       Shape = Cuboid or blank (default = Cuboid)
                     Top Hat = Yes or blank (default = Yes)
                Uniform Area = Yes or No (default = No)
                  No Reflect = Yes or No (value irrelevant) (default = No)
                 # Particles = value per grid square and per size range
             Source Strength = blank
                  Plume Rise = No or blank (default = No)
            Particle Density = value
           Particle Diameter = blank
  Particle Size Distribution = name of distribution
             Time Dependency = blank.
The defaults for Shape, Top Hat, Uniform Area and No Reflect have been added as part 
of these changes. Only the size ranges specified in Particle Size Distribution are 
used. 

All three new variables should be blank for normal sources. The newly added defaults 
apply to all source types (not just dust/sea-salt).

For dust/sea-salt, Source%SourceStrength is set to 1 for later convenience.

DispState%NextReleaseTime made into an array of arrays to store next release time for
each grid cell and each particle size range for dust and sea-salt sources.

Extra loops added in routine "Release" to loop over grid cells and particle size 
ranges in order to release particles from dust and sea-salt sources. Calls to get flow
information and surface information added. Grid cell area calculated.

Flow and surface information, area of grid cell and index of size range passed to
ParticleReleaseInfo for use with dust and sea-salt sources.

In the course of doing the above, the code was failing to compile on the Windows 
Compaq compiler due to "internal compiler error" and was also using excessive memory
just prior to failure. This has been fixed by making more use of "Use ... Only" 
statements. These are now used wherever the Flows and Output modules are used. In 
addition Private/Public statements have been added to the plume rise, particle and 
puff modules (this leaves the building module as the only module without these).

Mark Harrison, Andrew Jones and Dave Thomson

!-------------------------------------------------------------------------------------

27/2/08

Changes to FlowAndFlowProfile.F90 to add components to the Surface_ type to represent 
the surface properties at a particular location.

Changes to Source.F90 to evaluate release properties for MINERAL-DUST and SEA-SALT 
sources. Note the mass released is applicable to the meteorology and surface 
conditions at the actual release time (rather than averaged over the period that the 
particle represents). Dust/sea-salt sources are not presently considered for fixed met 
cases or puffs. 

   Changes to subroutine CalculateParticleDiameter:
     Calculates the diameter of particulates to release. For dust this is taken as 
	 the mid point of the bin.
     For sea salt the appropriate size is calculated by iterative methods.

   Added subroutine CalcMineralDustSourceStrength:
     To calculate an emission rate for PM10 resulting from MINERAL DUST
   
   Added subroutine CalcSeaSaltSourceStrength: 
     To calculate an emission rate for PM10 resulting from sea salt

These are called from ParticleReleaseInfo which also required significant 
modification to calculate Masses, Diameter and NextReleaseTime for dust/sea-salt 
sources (with help from the above routines).

Note this does not complete the work on dust/sea-salt. Its still necessary to get the 
flow modules to set the values in Surface_.

Mark Harrison and Andrew Jones 

!-------------------------------------------------------------------------------------

28/2/08

Minor changes following on from changes to chemistry made on 12/11/07:

Check added that stochem grid size matches the hard coded values used to read the 
data.

Use of the volume of the lowest gridbox in a column in ConvertConcToMass and 
ConvertMassToConc now restricted to the hybrid 'Plume Particles' ozone method (as 
intended).

Test added for sync time a multiple of the chemistry time step.

Routine OzoneColumnDryDepAndMixing now uses all grid boxes totally or partially in the
boundary layer (instead of only those totally in the boundary layer). This agrees with
what is done in NAME II. A check has been added that the boundary layer depth is not 
less than the lowest chemistry layer depth.

Routine UpdateParticleMasses changed so that the special treatment of ozone now 
applies only to the hybrid 'Plume Particles' ozone method (as intended).

Excess negative mass threshold for warnings changed to 0.01 g. This agrees with that
used in NAME II.

Ozone relaxation to background in the absence of particles altered so as not to assume
that the time step is 15 minutes.

The trap in ChemistryUpdate for O3 > 6.0E12 now restricted to the hybrid 'Plume 
Particles' ozone method.

Dave Thomson, Andrew Jones and Alison Redington

!-------------------------------------------------------------------------------------

10/3/08

Cloud heading for output of met with particle/puff information changed from 'Cloud 
Fraction' to 'Cloud (oktas)'.

MaxDomains increased from 5 to 12 in GlobalParameters.F90.

Dave Thomson

!-------------------------------------------------------------------------------------

26/3/08

MaxLinesTwoD and MaxTimeDepFactors both increased to 2048 in GlobalParameters.F90
to allow improved time dependency for traffic cycle in air quality.

Claire Witham

!-------------------------------------------------------------------------------------

28/3/08

Changes needed to complete work on enabling runs with dust or sea salt:

Routines RoundToYear and RoundToMonth written to round times appropriately.

Ancillary met module created to read in surface properties (land use fractions, clay, 
silt and sand fractions, soil particle mass fractions, and soil moisture).

Module connected to the code with modifications to GlobalParameters.F90, Mets.F90, 
Flows.F90, Input.F90 and MainNameIII.F90.

The input for the ancillary met module is provided via three blocks as follows:
  Ancillary Met Definitions:
    Name
    File Type
    Binary Format
    Prefix
    Suffix
    dT
    T0
    Met File Structure Definition
    H-Grid
    These work as for the NWP Met Definitions block with the exception that dT can be
    given as 'infinite' or 'monthly'. The former is used when the ancillary data 
    doesn't change in time and the latter when fixed values are used for each of the 
    12 months of the year.
    There are also some other inputs which are relics (the code is based closely on 
    the NWP met module) and are not used and should be tidied up in due course.
  Ancillary Met File Structure Definition:
    Field Name   
    Lowest Level 
    Highest Level
    Field Code   
    3-d?
    These work as for the NWP Met File Structure Definition block. Here 3-d? and 
    Levels can be used for any quantities which have levels. The levels can be 
    vertical (e.g. soil moisture) or some other dimension (e.g. different land use
    types). For 3-d?, they must be labelled as levels in the file, rather than being 
    labelled in some other way.
  Ancillary Met Module Instances:
    Name
    Met Folder
    Met Definition Name
    These work as for the NWP Met Module Instances block. In addition 
    "Met Folder Stem", "Ensemble Met Folder" and "Met Folders" are available if one 
    wishes to vary the ancillaries across an ensemble of cases.

NWP flow module altered to allow input (via Input.F90) of ;-separated list of 
ancillary met module instances. This is input under a column keyword "Ancillary Met 
Module Instances" in the block "NWP Flow Module Instances". The NWP flow module now 
also checks the individual attribute validity flags for each of the met modules to 
decide where to get data from and, when GetAttrib is called, will return data in the 
Surface_ type if this is requested and possible.

Some minor tidying of NWPMet.F90 to keep parts that are similar to the ancillary met 
module aligned. In particular an error is now produced if the module isn't valid for 
any of its attributes. Soil Moisture added to NWPMet.F90 so that soil moisture can be
input either through an NWP or ancillary met module

Flow modules now 'use' (in the fortran sense) any met modules which they may use data 
from. This is necessary to make met module attribute codes available.

Some error message formatting corrected in met and flow modules.

Position and size of source now passed through ReleaseParticle to InitParticle rather
than InitParticle using Source%X and Source%dX. This is to accommodate gridded sources 
(dust and salt) for which Source%X and Source%dX may not be appropriate.

Modifications to changes began on 27/2/08. All uses of land use category (i.e. the 
value of the land use at the point in question, as opposed to the fractions of land 
use in a grid box) removed and the relevant part of the Surface_ type removed (Name II 
used the land use category, but it can be misleading and not representative of the 
grid box). This involves two tests for the sea category and for the barren or sparely 
vegetated category which have been replaced by testing for the land use bare-soil 
fraction < 0 (this is a code for sea) or > 0.3 (for the barren or sparely vegetated
test).

Changes to Source.F90. ParticleReleaseInfo now updates the next release time when dust
or sea salt sources are used and the release rate is zero (previously it didn't which 
could cause an infinite loop). ParticleReleaseInfo modified to ensure NextTime is 
infinite if > the source stop time. Source strength set to zero in 
CalcMineralDustSourceStrength and CalcSeaSaltSourceStrength if there should be no 
emission (previously it was not set for this case). Loop over particle size ranges in 
Release routine changed to reduce number of ranges by one (so as to loop over number 
of ranges not number of range boundaries). Calls to GetAttrib in Release changed to 
pass Time1 instead of the first size range value of NextReleaseTime, since that might 
be infinite if no more to release. 

Input of source information for dust/sea-salt sources modified slightly with the need 
to now give something under 'source strength' (to specify the species and units) but 
with the source strength itself replaced by '?'. Now the input, excluding times and 
(irrelevant here) plume rise parameters, must be (compare with values given on 26/2/08 
above):
                        Name = source name
   Met-dependent Source Type = 'Dust' or 'Sea Salt'
                      H-Grid = grid for the source strength calculation
                      Z-Grid = blank
          H-Coord, dH-Metres = blank
         X, Y, dX, dY, Angle = blank
  Set of locations, Location = blank
                     Z-Coord = m agl
                   dZ-Metres = Yes or No (value irrelevant)
                           Z = 0 
                          dZ = 0 
                       Shape = Cuboid or blank (default = Cuboid)
                     Top Hat = Yes or blank (default = Yes)
                Uniform Area = Yes or No (default = No)
                  No Reflect = Yes or No (value irrelevant) (default = No)
                 # Particles = value per grid square and per size range
             Source Strength = normal format but ? for the numerical part
                  Plume Rise = No or blank (default = No)
            Particle Density = value
           Particle Diameter = blank
  Particle Size Distribution = name of distribution
             Time Dependency = blank.
Only the size ranges specified in Particle Size Distribution are used. 

Dave Thomson

!-------------------------------------------------------------------------------------

31/3/08

Trap added for puff size = 0 in computing puff true centroid in Case.F90. For this 
case, the expression coded fails and needs to be replaced by the limiting value.

Dave Thomson

!-------------------------------------------------------------------------------------

1/4/08

Ability to specify a particle size distribution in an output request added. Only the 
ranges in the distribution are used. The name of the distribution is stored in the 
FieldReq_ variable and will be used in future to restrict output to particles in the 
given size ranges.

Dave Thomson

!-------------------------------------------------------------------------------------

13/4/08

In routine CalcDustSourceStrength, a maximum of 0.2 is imposed on Surface%ClayFrac in 
calculating the source strength. This matches what was done in NAME II.

Helen Webster and Dave Thomson

!-------------------------------------------------------------------------------------

14/4/08

Chemistry.F90 - In call to MainChemistry, SyncInterval changed from Int to NInt
                to resolve 64-bit problem with time-steps (check for sync time step 
                being a multiple of chemistry time step was failing).
Chemistry.F90 - In Subroutine SetBackgroundFieldsFromSTOCHEM the Stochem filename 
                length has been changed from MaxCharLength to MaxFileNameLength
                to enable longer directory location names to be used.

Time.F90      - Added in a new Time output format in Function Time2Char for Name II
                style time series output.

Output.F90    - Included new preamble and headers for Name II Time Series format
                output.  This is defined as when NameII is true and when TAcross is
                false (i.e. Time is 'down').  This uses the new time format in 
                Time.F90.

Claire Witham

!-------------------------------------------------------------------------------------

12/5/08

Chemistry.F90 - Added setting of ozone concentration for particles as well as for 
                fields at the end of the ozone dry deposition loop to ensure these 
                values are the same.
                
Claire Witham        

!-------------------------------------------------------------------------------------

2/6/08

Chemistry.F90 - Added a test to check whether the number of chemisty grid definition
                vertical layers exceeded the number for MaxChemLayers specified in 
                Global Parameters.  If it does, model stops with a warning.  This is 
                to prevent incorrect output.  
                
Claire Witham

!-------------------------------------------------------------------------------------
     
9/7/08

Support for 360-day years added. This is invoked by setting 'Absolute or Relative 
Time?' in Main Options to '360-day year'. The Gregorian calendar can now be invoked by
setting 'Absolute or Relative Time?' to either 'Gregorian' or 'Absolute' (previously 
only 'Absolute' was possible).

Bug in routine InWildTimeInterval (Time.F90) corrected. All calculations now based on
TimeL rather than Time, the former being the time in the right time zone.

Calculations of Mass output in CalcParticleResults and CalcPuffResults changed from
in-line calculations to calls to new routines ParticleMass and PuffMass.

The no-time-zone-in-single-site-met-file message has been made a controllable message
with name 'No time zone in single site met file'. It can therefore now be controlled 
(e.g. suppressed) by adding a message control with this name to a 'Message Controls'
input file block.

Decay of H2 in AgentDecay in Particle.F90 altered so that k_H2 is the reaction rate 
constant as described in the comments. This change should not change results 
significantly, only the meaning of k_H2.

Dave Thomson

!-------------------------------------------------------------------------------------

17/7/08

Chemistry.F90 - Changed the ozone boundary layer mixing scheme to mix when the height 
                of the BL changes rather than when the number of chemistry levels in 
                the BL changes.  Changed ChemistryState%nLayersInBLOld to 
                ChemistryState%BLOld and updated restart write and read routines.

Claire Witham

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 5.2 of NAME III released 28/7/08.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

28/7/08

Redundant code in InitParticle (Particle.F90) for calculating particle diameter 
removed.

Extra output variables for particle/puff detail output (boundary layer depth, cloud 
amount, relative humidity, wind speed and wind direction) added for puffs (to match 
what's done for particles).

Dave Thomson

!-------------------------------------------------------------------------------------
 
5/8/08
 
GlobalParameters.F90
 
Changes made to enable chemistry runs with new ozone chemistry and 
accommodate the GEMS sources file to:
  MaxArrayLength
  MaxSources
  MaxChemLayers
 
Claire Witham

!-------------------------------------------------------------------------------------

11/8/08
 
Chemistry.F90
 
Added Mace Head 10 year monthly mean values for background ozone in the lower
two STOCHEM levels and removed the 2/3 multiplication for the other levels.
 
Claire Witham 

!-------------------------------------------------------------------------------------
 
13/8/08
 
Particle.F90, Puff.F90 and Case.F90
 
Dry deposition / sedimentation / entrainment scheme changes:

Sedimentation now modelled simultaneously with advection. Sedimentation is linearly
damped below the max deposition height Zs as the ground is approached. Deposition due 
to sedimentation treated by amending deposition velocity (the deposition velocity acts 
below Zs).

This involves:

Routine DryDeposition modified to remove advection due to sedimentation and adjust
deposition velocity to account for sedimentation.

Changes to the advection schemes (EvolveParticle (particles) and Step7 (puffs)) to 
include sedimentation simultaneously with advection due to mean ambient and 
turbulence. Also changes to the inhomogeneous turbulence reflection scheme in 
Case.F90 and to DiffusionProcessReflect to include sedimentation effects. DrydepFrac 
calculation (fraction of time-step below Zs) now appropriate for a sedimenting 
species. 

Changes to entrainment scheme in DiffusionProcessReflect - exit velocity now based 
deterministically on incident velocity (rather than using a probability based scheme).

Helen Webster

!-------------------------------------------------------------------------------------

3/9/08
 
Output.F90 and Case.F90
 
Added roughness length to the items of 'Met data' that NAME can output.

Matthew Hort

!-------------------------------------------------------------------------------------

12/9/08
 
Particle.F90 - DiffusionProcessReflect:

Bug fix to prevent Dt becoming negative (precision issue).

Helen Webster

!-------------------------------------------------------------------------------------

22/9/08
 
Chemistry.F90
 
Added a test to check whether the number of chemisty grid vertical layers 
corresponds to the number of interface levels in the definition file. 
If not the model stops with a warning.
 
Claire Witham
  
!-------------------------------------------------------------------------------------

14/10/08
 
Modules updated include: GlobalParameters.F90, Input.F90, MainNameIII.F90
Particle.F90 and Species.F90.
 
Updated NAME III to incorporate decay chain modelling in the atmospheric 
disperison (and not deposition) part of the code. Thus the user is able to
consider parent radionuclides decaying to their daughter products.
 
Peter Bedwell

!-------------------------------------------------------------------------------------

21/10/08
 
Chemistry.F90

Removed text referring to taking 2/3 of STOCHEM for background ozone.

Claire Witham

!-------------------------------------------------------------------------------------

29/10/08

NWPMet.F90

Updates to met definitions to include extra stashes (namely correct roughness 
length and soil moisture) - see changes file in Defns folder.

Bug fixes to NWPMet.F90 to not fail if end of file reached (e.g. when extra 
stashes are missing). If both roughness lengths are present then the new 
corrected roughness length will overwrite the first 2-d array read in for 
roughness length. If the new corrected roughness length is missing then the 
first 2-d array for roughness length will be used. If any of the extra stashes 
are missing then they will be flagged as so.

Helen Webster

!-------------------------------------------------------------------------------------

14/11/08
 
Updated Input.F90 and GridAndDomain.F90 to add support for domains which are unbounded
in the X and Y directions independently (previously domains could be defined as either
horizontally bounded or as unbounded - but the same declaration applied to both of the
horizontal directions X and Y). The ability to define domains which are bounded in one
horizontal direction only is required for setting up met definitions which are bounded
in the latitude direction but unbounded for longitude (e.g. polar caps).

These initial changes deal with the modifications required to the input file. The
remaining changes will be included later (e.g. changes in the use of the Domains 
type).

i)   Added 'X Unbounded?' and 'Y Unbounded?' as recognised variable names in the
     'Domains:' input block. The 'H Unbounded?' variable has been kept for
     back-compatibility with existing domain specifications (if 'H Unbounded?' is
     given as an input variable, this sets both 'X Unbounded?' and 'Y Unbounded?'
     to that same value). Note that either 'H Unbounded?' should be specified or
     both 'X Unbounded?' and 'Y Unbounded?' can be separately specified (but not
     both options at the same time).

ii)  The logic has been changed in the subroutine Tokens2Domain to treat the X and Y
     directions independently. Domains which are unbounded in one horizontal direction
     but are bounded in the other can be defined relative to a specified location
     (by means of the variables 'Set of locations' and 'Location of centre') but this
     does not apply to domains which are fully unbounded.

iii) The 'X Unbounded?' and 'Y Unbounded?' values are passed as arguments to the
     subroutine InitDomain (previously 'H Unbounded?' was used). Presently these
     variables are just checked to ensure they have the same value (i.e. are both true
     or both false) and then 'H Unbounded?' is set equal to that value. The intention
     is to support the option of domains being bounded in one direction but unbounded
     in the other - this will be added later.

Lucy Davis and Andrew Jones

!-------------------------------------------------------------------------------------

17/11/08
 
Chemistry.F90
 
Removed the Mace Head ozone values from the code, which reverts a previous change
to Chemistry in this version.  This is because although these values produce improved
results for Europe they are not applicable to other regions, e.g. South Africa.
An alternative approach to including this data is being considered.
 
Claire Witham

!-------------------------------------------------------------------------------------

17/11/08
 
GridAndDomain.F90
NWPFlow.F90
 
Added log profiles for horizontal wind components within the boundary layer.  
 
In FlowInfoFromMet GetZCoeffs is now called for ZGridUV with the optional variables 
roughness length, boundary layer depth, rate of change of z (m agl) with eta coord 
and value of eta coord at the surface.
 
In GetZCoeffs the log interpolation is done if the optional variables are present
and the gridpoint immediately above the point of interest is below the value of the
boundary layer depth.
 
Lois Huggett

!-------------------------------------------------------------------------------------

20/11/08
 
Modules updated include: Particle.F90 and RadarMet.F90.
 
Updated NAME III to add bounds on variable 'E' calculated in the Radioactive 
Decay Subroutine of Particle.F90 and to add bug fix in same subroutine such
that when radionuclides are modelled with a 'stable' half-life, the mass on 
each particle is unaffected by radioactive decay.

Bug fix to increment met time to enable rainfall rate data output from NIMROD to be 
read and utilised (in RadarMet.F90). The requirement for separate data on orographic 
enhancement of rainfall removed.
 
Peter Bedwell

!-------------------------------------------------------------------------------------

24/11/08
 
NWPFlow.F90
NWPMet.F90
 
Bug fix in subroutine UpdateNWPFlow (in NWPFlow.F90) to allow the FixedMet option to
work correctly (previously the ValidityUnimprovable status was not being set properly
in FixedMet cases).

New if-tests included in subroutine UpdateNWPMet (in NWPMet.F90) to only read one set
of met data in FixedMet runs when the time of fixed met coincides with a data time.
This is achieved via a new logical variable ReadOneTimeOnly which, if it evaluates to
true, has the effect of skipping the reading and processing of met data at the second
time level. Instead, met data at the New time level is set equal to the met at the
Old time level. Note that results may not be precisely identical with those for the
case where both sets of met data are read, e.g. different values for heat flux and
u-star would be used when the NextHeatFlux flag is set. Also the d/dt correction term
for pressure-based vertical velocity is not applied. However the benefit of reading
and processing met data at only one time is a significant speed up in run time when
NAME is being utilised to check UM met files.

Andrew Jones

!-------------------------------------------------------------------------------------

25/11/08

GlobalParameters.F90
Chemistry.F90

Added H2S to the chemistry scheme using code written by Alex Archibald.  
Species number increased by one in Global Parameters and reactions added
to Chemistry along with references.  It has been assumed that the gas phase
oxidation of H2S occurs only via OH initiation during the day (loss also occurs
by NO3 oxidation at night, but this is very slow and has been omitted).

Coding works if H2S is given as a source and produces SO2 as a secondary product.  
This SO2 is redistributed on particles already carrying SO2, as it is assumed that 
polluting sites will be releasing both H2S and SO2 as primary species.  If H2S is 
not given as a source, this species is ignored and testing shows results are 
equivalent to the code prior to the addition of this species.

Corresponding changes to add H2S made to the NAMEChemistrySpecies Defn file - see 
changes file in Defns folder.

Claire Witham and Alex Archibald

!-------------------------------------------------------------------------------------

17/12/08

Chemistry.F90

pH has been fixed to 5.8 rather than calculated by NAME. This has been shown to give
better results for sulphate aerosol.
Rates for naer production have been updated.
HONO chemistry has been re-instated using a different scheme. The commented out old
code remians as a record of previous attempts.

Alison Redington

!-------------------------------------------------------------------------------------

5/1/09

Changes made to allow the BackgroundParticles Chemistry option to work, with a
specific focus on ozone.

Chemistry.F90

Allocation of O3 and H2O2 chemistry field arrays and initialisation of H2O2 
on the chemistry field moved up out of an if loop so that they are applicable 
to all chemistry options.  This is necessary, because H2O2 is needed in the
chemistry scheme for all options and the existence of the O3LIM array
is currently used as the check for Chemistry="Yes" in the restart routines 
amongst others. This is a bug fix enabling the "O3_BackgroundParticles" method to 
work again. 
In UpdateParticleMasses, "O3_BackgroundParticles" has been included in the if loop
to check whether the species is ozone and distribute the ozone evenly across all
particles.  This is to prevent chunky ozone particles.
Bug fix: In ChemistryUpdate, an extra if loop has been added to make sure that the 
relaxing of ozone field values back to the STOCHEM values does not occur if the 
chemistry option is background particles.

Particle.F90

Added a dry deposition velocity for ozone over the ocean into the DryDeposition 
subroutine.  This is only used if a non-zero dry deposition velocity is specified in 
the species file (i.e. ozone is being carried only on particles - i.e. OzoneMethod = 
O3_BackgroundParticles).  The velocity is the same as that specified within 
Chemistry.F90.

Claire Witham

!-------------------------------------------------------------------------------------

13/1/09

MainNameIII.F90
Restart.F90
  -Subroutine WriteRestartFile
  -Subroutine ReadRestartFile
Case.F90
  -Subroutine ReleaseParticle
  -Subroutine ReleasePuff
  -Subroutine OneParticleTimeStep
  -Subroutine OnePuffTimeStep
Puff.F90
  -Subroutine InitPuff2
  -Subroutine Step3
  -Subroutine Step5
  -Subroutine Step7_old
  -Subroutine Step7
Particle.F90
  -Function InitW
  -Subroutine InitParticle
  -Subroutine InitParticle2
  -Subroutine EvolveParticle_old
  -Subroutine EvolveParticle
  -Subroutine DiffusionProcessReflect_old
  -Subroutine DeepConvection
Maths.F90
  -Type RandomState
  -New Global Variables: Seeds, Multipliers, Moduli, PowerOf2
  -Function GaussA
  -Function GaussB
  -Subroutine SetRandomState
  -Subroutine GetRandomState
  -Subroutine WriteRandomState
  -Subroutine ReadRandomState
  -New Subroutine GetRandomNumber
  -New Subroutine RandomNumber
  -New Subroutine InitialiseRandomSeeds
Building.F90
  -Function Uniform
Input.F90
  -Subroutine Tokens2MainOpts
Source.F90
  -Subroutine CalculateParticleDiameter

Random number generator now called through subroutine 
GetRandomNumber(Ran, N) where Ran is the real variable
the random number is to be stored in, and N is an integer
for the index of the particle or puff (N=0 if no particle
or puff is associated with the call).  The functions Gauss
now also take N as an argument.  All calls to random 
number generator have been modified, as have subroutines/
functions calling it if they did not already receive
particle/puff index as an argument.

Using the 'Fixed' or 'Random' modes in the main options input will 
access the compiler random number generator as before, through the 
new subroutine, but 3 new random mode options are available in which 
random seeds are stored for each particle/puff (to be used in the 
parallelised code): 'Program', an array defined within the program
starting from the compiler's standard inital random seeds; 'Array', 
an array starting from a random initial seed; 'Input'; an array with
intial seeds determined from standard input.  For restart files 
with the new options, the array of random seeds is written and read 
with mode 'S', rather than the 'G' used for Random and Fixed modes.  

Lois Huggett

!-------------------------------------------------------------------------------------

23/1/09

Enable PMSL to be output by NAME III - involves changes to NWPFlow.F90, 
Output.F90, Case.F90, FlowAndFlowProfile.F90

NOTE: Only currently works for NWP Met. 

Helen Webster

!-------------------------------------------------------------------------------------

27/1/09

GridAndDomain.F90
GlobalParameters.F90
Flows.P90

HUnbounded is changed throughout the code (in GridAndDomain.F90 and in 
Flows.P90) to instead use XUnbounded and YUnbounded as appropriate. 
If HUnbounded is used in Input file instead of XUnbounded and YUnbounded 
(for backward compatability) then XUnbounded and YUnbounded are set equal 
to HUnbounded. This functionality can now be used to define domains that 
are bounded in the Y direction but unbounded in the X direction, eg for 
polar domains. 

GlobalParameters.F90 is altered to allow a larger number of met domains to be
used simultaneously (through nesting), to allow, for example, all 14 parts of
the cut-up global met to be nested in one input file.

Bug fix: When using nested met files, unless the met is valid for the domain in the 
first of the files, the ZCoord is set wrong. This has been corrected in Flows.F90, in 
subroutine WhichFlow, by setting Position%TopogValid, Position%PSValid and 
Position%Rho equal false If (Flag .and. .not.FlowMemory%In(i, j)). 
      
Bug fix: 'Stripy' met output when using cut-up global domains. This was caused
by NAME converting X into grid index coordinates but cycling around the global
one extra time than neccessary resulting in no met data at the point. Corrected
in GridAndDomain.F90 in subroutine GetHCoeffs by removing "HGrid%X0 + HGrid%dX *" 
from XGridCentre calculation. This ensures that XGridCentre is in the same 
coordinate system as XL. Also added Abs() for the case that dX is negative.

Have added met defns for each of the cut-up global domains to Resources/Defns - 
see changes file in Resources/Defns.

Lucy Davis

!-------------------------------------------------------------------------------------

28/1/09

Bug fix to DiffusionProcessReflect in Particle.F90. In equation for exit 
velocity which is solved numerically, we now expand erf fuction when argument 
is large to avoid problems. Added two new subroutines ReflectInterfaceW and 
TransmitInterfaceW for evaluating the functions f, g which occur in the 
equations f(x) = 0, g(x) = 0 which need to be solved to give the reflected and 
transmitted velocities, respectively. Also if no root of the reflection or 
transmission equation is found due to argument of exp() being small, then the 
particle is put at the interface and total exit velocity set to zero. Error 
expected to be small and no worse than expanding exp as series expansion.

Helen Webster

!-------------------------------------------------------------------------------------

30/1/09

Added cloud gamma modelling. This includes the addition of the approach
based on the 3D Lagrangian particle model for direct plume gamma dose rate 
calculations and the semi-infinite plume approach. The modules updated include:
Case.F90, CoordinateSystem.F90, GlobalParameters.F90, Input.F90, MainNameIII.F90,
Output.F90, Particle.F90 and Species.F90. 

Peter Bedwell

!-------------------------------------------------------------------------------------

4/2/09

Chemistry.F90
Minor bug fix to the H2S reactions supplied by Alex.

Claire Witham

!-------------------------------------------------------------------------------------

5/2/09

Updated semi-infinite cloud approximation for cloud gamma modelling to include
a check in Output.F90 and modify the input file column heading in Input.F90 from
"Semi-infinite approach?" to "Semi-infinite approx?".

Peter Bedwell

!-------------------------------------------------------------------------------------

5/2/09

Corrected a bug found in the SetUpReqs subroutine in the Output.F90 module. In 
setting up the extra field requests, all requests up to and including the cloud 
gamma modelling field requests were being set up but the coding was such that no 
subsequent field requests were being setup.

Peter Bedwell

!-------------------------------------------------------------------------------------

5/2/09

Output.F90
Particle.F90

Updated output requests '# Particles' and '# Particles By Species' to use P64 reals
("double-precision") instead of Std reals, because the Std reals were unable to 
increment large particle counts (values exceeding 16.7M).

a) In Output.F90, the QInfo array has been updated and the check on processing steps
   in the function "InitFieldReq" has been amended to only reject processing when
   the field type is a Time.

b) In Particle.F90, references to the Results arrays in subroutines "ParticleNumbers"
   and "ParticleNumbersBySpecies" have been updated from type Std to type P64.

Andrew Jones

!-------------------------------------------------------------------------------------

9/2/09

Flows.P90

In subroutine WhichFlow, changed Position%Rho = .false. (not a logical) to 
Position%RhoValid = .false. This is a correction to the previous bug fix for using 
nested met files.

Lucy Davis

!-------------------------------------------------------------------------------------

11/2/09

Output.F90

Additional changes related to the change on 5/2/09 to use P64 reals for particle
numbers output. The previous changes did not include the processing of averages or
integrals for P64 quantities. This capability has now been added. Generally speaking,
the processing is not as extensive as for Std precision values (e.g. percentiles,
probabilities and pdfs are not currently supported), and some of the changes will
need to be revisited later.

a) Temporary check included in subroutine SetUpReqs to ensure that the only processing
   requested for P64 quantities is averaging/integrating.

b) Several 'if' tests have been added in subroutines ProcessFields and Field2AvInt to
   distinguish between the Std and P64 quantities.

c) A couple of bug fixes in subroutine OutputFields to set logical flag NonZeroLine
   to true for P64 outputs and also for time quantities that are absolute times
   (as opposed to non-zero time intervals). The NonZeroLine flag needs to be set
   here to allow an output line to be written.

Andrew Jones and David Thomson

!-------------------------------------------------------------------------------------

17/2/09

NWPMet.F90
MainNameIII.F90

Improvements have been made to the checking of headers in met files, principally to
alert when the forecast step is not consistent between separate fields at a given
met time or when the validity time in these headers is not consistent with the time
of the met file (as specified in the filename).

The subroutines ReadNWPMet and Read2dField have been changed in NWPMet.F90, such that

a) for GRIB Edition 1 met files, the f/c step time unit is confirmed to be in hours
   and the f/c step of every field is checked for consistency against that of the
   first valid field in the met file. The validity time is not checked here as this
   has already been used explicitly in the reading of the met field.

b) for PP and Name II met files, both the validity time and f/c step are checked for
   each field. Note that further checks (of grids, etc.) are desirable here.

An inconsistency in any forecast step causes the 'InconsistentHeader' flag to be set
as true. An inconsistency in any validity time is reported by setting a new flag
'InconsistentValidityTime' to true. This, in turn, invokes a new Controlled Message
'Inconsistent validity time' (with a default behaviour to report as an error).

The new Controlled Message 'Inconsistent validity time' has been added to the set of
GlobalMessageControls in MainNameIII.F90 to allow error messages to be regulated
(e.g. when a met file has been duplicated using a new time in its filename).

Andrew Jones

!-------------------------------------------------------------------------------------

19/2/09

Particle.F90 - Bug fix to DiffusionProcessReflect. For particles which are 
reflected off the ground and for which Particle%X(3) > Zs, Particle%X(3) is 
now recalculated so that wsed is not damped by z/Zs above Zs.

Note a similar bug fix is required to OneParticleTimeStep but since the 
timestep is small here (inhomogeneous scheme), it is unlikely to affect many,
if any, particles.

Helen Webster

!-------------------------------------------------------------------------------------

20/2/09

Some corrections made to make file in connection with ErrorAndMessageII.F90.

Dave Thomson

!-------------------------------------------------------------------------------------

20/2/09

Bug corrected which affects runs with no sources and with met output requested at just 
a single time. The bug resulted in no met being read in.

Lois Huggett and Dave Thomson

!-------------------------------------------------------------------------------------

20/2/09

A check has been added to prevent two locations in the same set of locations having 
the same name.

Lucy Davis and Dave Thomson

!-------------------------------------------------------------------------------------

20/2/09

Area at risk output added. This is based on considering concentration relative to the 
maximum concentration at the same distance, and reexpressing this as y/sigma_y using 
the relationship that would apply to a Gaussian plume. In fact Min(sigma_y/y, 1.0) is 
output, so that the value goes to zero where the risk is small. Value = 1, 1/2, 1/3 
etc corresponds to y/sigma = 1, 2, 3 etc. 

To do this, a range of changes have been made to Output.F90 and a routine InterpXY has 
been added to GridAndDomain.F90.

If time averaging is requested when asking for area at risk, this is applied to the 
concentration field from which the area at risk is derived before the latter is 
derived.
 
Dave Thomson

!-------------------------------------------------------------------------------------

20/2/09

Ability to convert puffs to particles added.

Dave Thomson

!-------------------------------------------------------------------------------------

20/2/09

Bug fix to obtaining 'area at risk' output from time averaged fields. Different 
numbers of time levels may be kept in memory for the area at risk field and for the 
(averaged) concentration field from which it is derived. Hence CalciTA needs to be 
called twice, once for each of these fields.

Also the pointer Process in routine PrepareResults could have been used before it was 
associated. This has been fixed by changing a test from FieldReq%nProcesses > 0 to
FieldReq%iLastProcess > 0.

Dave Thomson

!-------------------------------------------------------------------------------------

23/2/09

Minor changes to simplify code structure relating to the new and old random number 
generators. Routine RandomNumber put "in-line" in GetRandomNumber, all variables 
needed to characterise either generator stored in a global variable of type 
RandomState_, restart system simplified by storing everything needed to reconstruct 
the random number state in the restart file, avoiding the use of mode 'G' and mode 'S' 
in connection with the restart file (this means 'S' is now no longer used at all and 
'G' will only be used in connection with the user specified seed option, an option 
which is not yet implemented in full), and getting and setting the seed of the 
intrinsic compiler provided generator within the restart write and read routines.
Also when a random seed is selected, the seed is written out from within Maths.F90 for 
both generators (this requires a change in module compilation order). 

In making the two random number generators more similar in structure we have also
rationalised the settings for 'Random Seed' in the input file. This can now be
    'Fixed'             - fixed initial seed  } with normal random number generator
    'Random'            - random initial seed } 
    'Fixed (Parallel)'  - fixed initial seed      ] with random number generator
    'Random (Parallel)' - random initial seed     ] suitable for parallel processing.
    'Input (Parallel)'  - user input initial seed ]
An 'input' option (user input initial seed with normal random number generator) should 
be added in due course (this is the partially implemented mode 'G'). Default initial 
seed for the 'Input (Parallel)' option (used if zero is input) adjusted to match that
for 'Fixed (Parallel)'.

Dave Thomson and Lois Huggett

!-------------------------------------------------------------------------------------

23/2/09

Minor tidying of code.

Stand-alone building model directive used in Building.F90 in connection with the new
random number generator.

Previous bug fix in subroutine UpdateNWPFlow (in NWPFlow.F90) to allow the FixedMet 
option to work correctly (the ValidityUnimprovable status was not being set properly 
in FixedMet cases) extended to other flow modules.

Dave Thomson

!-------------------------------------------------------------------------------------

24/2/09

Global parameter MaxReqInfoTimes increased to 60.

Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 5.3 of NAME III released 25/2/09.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

2/3/09

Case.F90 
Added extra loops in subroutine ReleaseParticle to kill off the Extra part of 
particles under all release conditions.  This is a bug fix to solve errors 
reporting "too many full particles" when no full particles were released, but
particles at very edge of domain were being killed off immediately.

Claire Witham and Dave Thomson

!-------------------------------------------------------------------------------------

16/3/09

Enable access to all 9 land use fractions (previously was just bare soil 
fraction). Surface derived type now has array LandUseFracs(9). Changes to 
Source.F90, FlowAndFlowProfile.F90 and NWPFlow.F90.

Helen Webster

!-------------------------------------------------------------------------------------

17/3/09

Case.F90 - bug fix to OneParticleTimeStep. For inhomogeneous scheme need to 
recalculate Particle%X(3) if > Zs after reflecting off ground. Since timestep 
is small, should have little or no impact.

Helen Webster

!-------------------------------------------------------------------------------------

2/4/09

Case.F90
CoordinateSystem.F90

Corrected problem of particles disappearing over poles:

Have added in new variables to HCoord of YEdgeMax, YEdgeMin and YEdge. These 
are set in InitHCoord. YEdgeMax and YEdgeMin are the location of the coordinate
system poles, in the current coordinate system. YEdge is set to be .true. 
currently only for lat-long based coordinate systems.

New subroutine RationaliseHPosition added in CoordinateSystem.F90. This places any 
particle with a Y position beyond the pole back inside the domain and corrects 
the X position accordingly by moving it by 1/2 * XCycle. This subroutine also
corrects the X position to be as close to zero as possible. 
Subroutine RationaliseHPosition is called in OneParticleTimeStep and OnePuffTimeStep
after evolving the particle position, but only if YEdge is .true. 

Lucy Davis

!-------------------------------------------------------------------------------------

6/5/09

Chemistry.F90

Changes in UpdateParticleMasses:

Increased the ExcessNegativeMass limit to -0.05 from -0.01 to reduce number of
warning messages.  (Comment from Ali: limit of 0.01g is equivalent to 1E-6 ug/m3 
for a 10kmx10kmx100m grid box so I think going to 0.05 is ok. If we ever start 
running with much smaller grid boxes we might want to re-visit this though.)

Changed the re-assignmnet for NH4NO3 to 0.5 to NH3 and 0.5 to HNO3, rather than 
0.5 to NO, as its nh3 + hno3 reversibly to NH4NO3.
 
Claire Witham and Alison Redington

!-------------------------------------------------------------------------------------

13/5/09

NWPFlow.F90

Changes in SurfaceInfoFromMet:

Allow ancillaries to be on a different grid to met. Calculate HCoeffs for 
ancillary grid. All ancillaries are currently assumed to be on same grid.

Helen Webster

!-------------------------------------------------------------------------------------

13/5/09

Ancillary.F90

Changes to UpdateAncillaryMet:

Bug fix. Monthly ancillaries need to be read at start of each month. Previously
this wasn't happening.

Helen Webster

!-------------------------------------------------------------------------------------

22/6/09

Chemistry.F90

Bug fix. Version 11 of intel compiler produced an error due to very long 
lines with many trailing blanks - it treated them as if they had 
continuation marker.

Just removed blank space from offending lines.

Matthew Hort

!-------------------------------------------------------------------------------------

30/6/09

Particle.F90

Updated the Hydrogen dry deposition velocity in DryDeposition subroutine to 
use monthly values derived from measurements in the Northern Hemisphere by
the EuroHydros project.

Claire Witham

!-------------------------------------------------------------------------------------

30/6/09

GlobalParameters.F90
MainNameIII.F90
Source.F90

Updates for air quality system:

Global Parameters.F90: 
  - Increased MaxSources to 45000 instead of 35000.
  - Increased MaxFieldReqs to 400 instead of 200.
  - Increased MaxFilesPerSet to 30 instead of 20.
  
MainNameIII.F90 }
Sources.F90     }
  - Added in Controlled Message 'Zero source strength' to allow suppression of
    Warning: All source strengths for source are zero. 
    This can be activated in input file.
    
Lucy Davis

!-------------------------------------------------------------------------------------

1/7/09

Chemistry.F90

Change to HO2 chemistry so that it is not set to zero at start of
each chemistry time-step, but instead is calculated using the amount existing
from the previous timestep.  This approach is valid as the lifetime of HO2 is 
slightly larger than the typical model time-step of 15min.  
This change leads to big improvements in modelled ozone concentration for both 
"plume particles" and "background particles" options.

Claire Witham and Alex Archibald

!-------------------------------------------------------------------------------------

6/7/09

Output.F90

In subroutine OutputFields changed header loops so that there are the same number
of lines in the field headers for North-South and East-West vertical slices.

Susan Leadbetter

!-------------------------------------------------------------------------------------

10/7/09

String.F90

Added optional variable 'Truncate' to function FormatChar to cut
down names for output if too long.

Output.F90

Field requirement names now truncated if too long for columns in output file
to avoid having rows of asterisks for long names.

Lois Huggett

!-------------------------------------------------------------------------------------

21/7/09

NWPMet.F90

Changes required for 1.5km met which does not have any convective stashes.
Allow convective stashes (convective cloud amount, convective cloud base, 
convective cloud top, convective rain and convective snow) to be missing from 
the met file and to be fixed up to default values (cloud base and cloud top to 
be -Huge/3 and everything else to be zero).

Helen Webster

!-------------------------------------------------------------------------------------

29/7/09

Case.F90  
Chemistry.F90
Source.F90

Changes made to allow for a temperature sensitive release for alpha pinene
and subsequent chemistry to form secondary organic aerosol.

Case.F90 - flow and surface information is now retrieved for met dependent 
chemistry sources.

Chemistry.F90 - formation of SOAP (stands for SOA precursor) and SOA. pH has
been changed from a fixed value of 5.8 to being limited to 5.8, in that we 
allow NAME to model more acidic pH's but don't allow it to go more basic than 5.8.
This has been shown to reduce over-prediction of sulphate aerosol.

Source.F90 - temperature sensitive release for alpha pinene has been added. Release
of biogenic isoprene is set to zero for now until we work out a light sensitive
release parametrization.

Alison Redington

!-------------------------------------------------------------------------------------

30/7/09

GlobalParameters.F90:
 - Updates for Air Quality system
 - Increased MaxFieldReqs to 650 instead of 400
 - Increased MaxSources to 60000 instead of 45000
 - Increased MaxFieldReqsPerReqInfo to 250 instead of 200
 
Output.F90
 - Bug fix
 - Subroutine CalcNextReqInfoT
 - Check ReqInfo%nFields is less than MaxFieldReqsPerReqInfo
 - Check ReqInfo%nPPInfos is less than MaxPPInfoReqsPerReqInfo
 - Fatal Error if not
 
Lucy Davis

!-------------------------------------------------------------------------------------

8/9/09
 
NWPFlow.F90 - bug fix to SurfaceInfoFromMet. Do loop missing over land use 
types so Surface%LandUseFracs(i) not defined correctly.

Helen Webster

!-------------------------------------------------------------------------------------

21/9/09

Case.F90
Particle.F90
Source.F90

New sedimentation velocity calculation implemented based on that of NAME II
(Stokes regime and Cunningham slip-flow correction for small particles) but
with adaption for large particles (outside of the Stokes regime) as in TDN
244. The sedimentation velocity depends on the particle's diameter and density 
and on atmospheric flow variables (pressure, temperature, density) so it
is now calculated every timestep. Density and diameter now stored on the
particle derived type.

Note that, unlike before, the value given to the input "Particle Density" in 
the Sources block now matters.

Helen Webster

!-------------------------------------------------------------------------------------

22/9/09

A start made on a simple urban modification of the mean wind profile. Currently not 
used.

Dave Thomson

!-------------------------------------------------------------------------------------

24/9/09

Bug fix in routine Step2 in Puff.F90. An if test is required to deal with the special
case where the puff size in the vertical is zero.

Dave Thomson

!-------------------------------------------------------------------------------------

26/9/09

Bug fix in routine GetLincomFlow in LincomFlow.F90. Flow%H was interpolated in time 
but not Flow%ZInterface(1). As a result they are not equal which can cause a problem
in DiffusionProcessReflect (the problem is manifest through DryDepFrac being 
calculated to be bigger than 1). This is because the depth over which deposition is 
applied is limited by one of H & ZInterface(1) and so can be larger than the other 
which upsets the logic used in DiffusionProcessReflect.

Dave Thomson

!-------------------------------------------------------------------------------------

28/9/09

Bug fix in Restart.F90. List-directed-reads interpret '/' in the file as an indication
that the read should be terminated. This prevents reading of paths defined with '/'. 
All list directed formats in Restart.F90 replaced by '(A)' format.

Dave Thomson

!-------------------------------------------------------------------------------------

30/9/09

Time labelling of met data in SingleSiteMet.F90 corrected for relative-time-frame 
cases. Previously there were time labelling errors when met lines had errors or gave 
inadequate data.

Dave Thomson

!-------------------------------------------------------------------------------------

2/10/09

Routines FindMessageControlIndex and FindDomainIndex changed to ensure the function
result is defined. Routine FindAttribIndex altered (without changing functionality) to 
follow the same structure as FindMessageControlIndex and FindDomainIndex.

Dave Thomson

!-------------------------------------------------------------------------------------

4/10/09

Check for identical source names added. The check is done by sorting the list of 
source names. Code to support sorting is given in a new file Sort.F90.

MaxSources removed from the global parameters module. This is now input via the 
variable "Max # Sources" in input block "Main Options". There is a default value of 
100.

Dave Thomson

!-------------------------------------------------------------------------------------

6/10/09

Changes made to enable updating met and flow "on demand". The changes consist of:

Variable "Update On Demand?" added to each met/flow module input block. This has 
default "No". It can be set to "Yes" to indicate that the met/flow module is to be 
updated only when required. It is stored in the CommonMet/CommonFlow structures.

Variable "Same Results With/Without Update On Demand?" added to "Main Options" input 
block. This has default "No". It can be set to "Yes" to indicate that the same results 
are required whether or not update-on-demand is used (but note that it may do this by 
altering results obtained both with and without update-on-demand).

Messages for individual met and flow module updates moved from UpdateMets/Flows to
UpdateMet/Flow.

Routines HInDomain and ZInDomain added to GridAndDomain.F90 to supplement XInDomain.
These are now used instead of XInDomain in WhichFlow and in XInTheDomain in Flows.F90 
to avoid having to do a vertical coord conversion (which requires flow information) to 
decide if we are in a domain, when its clear from the horizontal position that we are 
not in the domain.

If test(s) surrounding call to UpdateMet simplified.

Variable OverallTValid moved into the Flows structure. It is no longer returned by
UpdateMetsFlows but a function MetsFlowsOverallTValid has been created to supply it 
where needed outside the mets and flows modules. Despite this, OverallTValid still 
needs to be passed by argument list in some places, e.g. into the mets module and we 
have retained it in similar places in the flows module.  

DueForUpdate flags added to CommonMet and CommonFlow structures. Set to false in 
InitCommomMet/Flow, ResetMets and ResetFlows, UpdateMet and UpdateFlow.

PrepareForUpdateMet and PrepareForUpdateFlow routines created. These are called from 
UpdateMets/UpdateFlows ahead of the call to UpdateMet/UpdateFlow, but the latter are 
not called when update-on-demand is set. The routines set the DueForUpdate flags to 
true. They also call "prepare for" routines for each met/flow module. These answer the 
question, "if the module was updated now, when is the earliest subsequent time when 
the validity of the met/flow module might change" and allow the module to say that it 
should really be updated now, despite update-on-demand being set.

If test(s) surrounding calls to UpdateMet/UpdateFlow from UpdateMets/UpdateFlows 
rationalised, including to account for PrepareForUpdateMet and PrepareForUpdateFlow.
Updating of OverallTValid also rationalised.

UpdateMet called from UpdateFlow to enable update of met on demand. This requires 
iMetCase to be passed through UpdateFlows and UpdateFlow.

WhichFlow restructured to alter the order of the tests used to determine whether the 
flow module is the right one (in particular the FlowMemory%InValid test is now first).
The remaining tests are rationalised to avoid the mixture of Else-blocks and Cycle 
instructions. FlowMemory is now always updated if any test is definitive. The test for
the flow module being valid is now enclosed in an if-test to check whether the flow 
module's DueForUpdate flag is set. If the flow module is DueForUpdate and seems 
otherwise OK, then it has to be updated before it can be selected (and possibly before
doing the vertical coord test). Appropriate calls to UpdateFlow have been added. To
satisfy the argument list of UpdateFlow, variables iCase, iMetCase and MetTime are
stored in Flows and variables Mets and Units are passed through to WhichFlow. Routines 
UpdateFlow, GetAttribField and WhichFlow as declared recursive.

Dave Thomson

!-------------------------------------------------------------------------------------

23/10/09

Time interpolation in SingleSiteFlow.F90 corrected. The time between met data was hard 
wired as 1 hour which is not right if data is missing.

Error message added for the case where deposition is requested at sync times.

Trap added for very small ustar causing divide by zero or overflow in routine 
HomogTurb in FlowAndFlowProfile.F90. However the code probably did do the right thing 
in response to divide by zero or overflow (provided compile options to trap the error 
were not used).

Cloud, Rain and Surface changed from intent InOut to Out in GetAttrib and in routines 
called from there.

Redundant code removed: 
  two bits from old deposition scheme in Case.F90 marked 'If (.false.) Then'; 
  routines EvolveParticle_Old and DiffusionProcessReflect_Old in Particle.F90;
  bit from old sedimentation scheme in Particle.F90 marked 'If (.false.) Then';
  routine Step7_Old in Puff.F90.

Preprocessor symbol LinuxIntelV9 no longer used and removed from code and compilation
scripts. Compilation script LinuxIntelRelease_EMARC removed.

Changes needed by Glenn Carver for Sun workstations added:
  Various if def blocks:
    AncillaryMet.F90: open statement for ancillary met file, BinaryFormat set up
    NWPMet.F90: open statement for met file, BinaryFormat set up
    Output.F90, routines OutputFields and OutputPPInfos
    String.F90, routine ConvertFileName
    System.F90, routine SubmitSystemCommand 
    Unit.F90, routine FlushUnit
  Various incorrect uses of == and /= replaced by .eqv. and .neqv.:
    AncillaryMet.F90: routine NWPMetDefn2Eq
    NWPMet.F90: routine NWPMetDefn2Eq
    Output.F90: routines InitProcess and ProcessEq
    Species.F90: routine SpeciesEq
  Different error messages for end of file and for error in connection with reading 
    topography file in NWPMet.F90
  Improved error messages in routines CalcSatVapP and CalcMixingRatio in Physics.F90
  Variables returned by GetCommandLineArguments always initialised
  Tests on IOStat in Restart.F90 replaced by tests on IOStat /= 0
  Time3D_ declared public in Case.F90
  Global parameters giving character string lengths increased
  Length of MetFile name in call to InitMetInput in SingleSiteMet.F90 corrected
  Makefile replaced by file supporting a range of platforms and compilers.

Open statements, BinaryFormat variable, OpenFile calls and ConvertFileName calls 
rationalised a little and MaxFileNameLength parameter increased.

Dave Thomson

!-------------------------------------------------------------------------------------

9/11/09

Source groups implemented. This enables groups of sources to be set up and output to 
be restricted to particular source groups.

Detailed changes are as follows:

Parameters MaxSourceGroups and MaxSourceGroupsPerSource added to GlobalParameters.F90.

Input of source groups set up. Source groups are input using the column keyword 
"Source Groups" in the "Sources" input block. The value given for this keyword should
be the source group names to which the source belongs, given as a semi-colon separated 
list.

Treatment of delimited lists rationalised with parsing routines moved to 
HeadedFile.F90.

Derived types in Sources.F90 modified appropriately, input source group names stored 
with each source, combined list of source groups assembled and stored in Sources, 
indices set up for each source giving the index of the source groups in the combined 
list. For assembling the combined list two methods have been coded - a straightforward 
implementation (this is currently used) and a method using sorting (this can only be 
invoked by editing the code). Some experimentation on the cost of the methods is 
needed to decide on the best approach. In setting up the indices, the various "set up"
routines in Sources.F90 which are used for setting up various indices have been 
combined into one. 

For each field requirement, indices have been set up giving the index of the source 
group (if any) used. (It was already possible, in the input, to specify a source group
with each field requirement, although this was not used.)

CalcParticleResults and CalcPuffResults amended to restrict output calculation to 
particles and puffs from a particular source group.

Output column headers modified to give the source group.

Dave Thomson

!-------------------------------------------------------------------------------------

15/11/09

SingleSite.F90 altered so that the wind direction at the input height equals the input 
wind direction. Previously the surface wind direction was set equal to the input wind
direction and so the wind direction at the input height was different if there was 
turning of wind with height.

Matthew Hort and Dave Thomson

!-------------------------------------------------------------------------------------

17/11/09

Bug in NWPFlow corrected. TCoeffsEnd => NWPFlowMemory%TCoeffs replaced by TCoeffsEnd 
=> NWPFlowMemory%TCoeffsEnd twice. Should improve time interpolation when land 
surface properties are required or when precipitation data should not be interpolated.

Dave Thomson

!-------------------------------------------------------------------------------------

23/11/09

Sedimentation method in puff scheme (routine OnePuffTimeStep) corrected to reflect the
fact that particle diameter is in microns not metres. Also the particle diameter and 
density which are needed for this calculation have been set to zero to prevent the 
scheme being used (previously they were uninitialised and so probably zero, but not
reliably so). In future they should of course be made non-zero (when appropriate), but 
this will require some further work. The result is that at present there is no 
sedimentation in the puff scheme.

In addition, particle density is now accessed in InitParticle directly from the source 
derived type rather than being passed through the argument list as a separate item.

Separate routine added for terminal velocity in Physics.F90 but routine not yet wired 
up. In due course this routine will replace duplicated code in OneParticleTimeStep and 
OnePuffTimeStep.

Dave Thomson and Helen Webster

!-------------------------------------------------------------------------------------

24/11/09

NWPFlow.F90 modified so that the horizontal coord system used by the met and ancillary 
grids can be different.

Dave Thomson and Helen Webster

!-------------------------------------------------------------------------------------

26/11/09

CalcParticleResults and CalcPuffResults in Case.F90 modified to calculate 
flow/cloud/rain information if this is required with "Sets of Particle/Puff 
Information". Previously the flow/cloud/rain output was the value at the start of the 
time step while the particle/puff position was at the end of the time step. In fact 
this is still the case for some output which doesn't use flow/cloud/rain but the value 
stored with the particle/puff. This needs further attention but is not a serious 
problem. At the source position (before the first step) the flow/cloud/rain 
information was undefined (and could cause a fatal error on some compilers in trying 
to compute relative humidity from the undefined data). The fatal error has now been 
fixed.

Dave Thomson

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 5.4 of NAME III released 27/11/09.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

02/12/2009

Case.F90:
The variables Flow, Cloud and Rain have been made local in the subroutines
CalcParticleResults and CalcPuffResults. These variables are used when met details
are asked for in a request for particle-puff information. Including them as local
variables ensures that the met at the current particle/puff location is retrieved
rather than using saved values (which might be out of date).

Dave Thomson

!-------------------------------------------------------------------------------------

10/12/2009

Changes to AncillaryMet.F90, Case.F90, Chemistry.F90, CommonFlow.F90,
FlowAndFlowProfile.F90, Flows.P90, GlobalParameters.F90, Input.F90,
MainNameIII.F90, NWPFlow.F90, NWPMet.F90, Output.F90, Particle.F90,
Source.F90 and Species.F90.

Code added to cope with extra stashes in UM met files (canopy height, canopy
water and stomatal conductance) and ancillary files (land use fractions,
land fractions, leaf area index and canopy height).

New land use dependent dry deposition scheme added for O3, NO, SO2, H2, NH3,
CH4, HCHO, PAN, NO2, CO and HNO3. The scheme is turned on by setting the
column keyword "Land use dependent dry dep" to be "Yes" in the Species block.
If this is set to yes for a species not covered by the land use dependent
scheme, a warning is given and the old dry deposition scheme used. Stomatal
conductance and canopy water are required in the met file. Ancillaries of
land use, land/sea mask and leaf area index are required. Canopy height and
soil moisture can either be in the met file or provided as ancillaries.

Revisions to dry deposition of aerosols. The deposition velocity is
calculated using vd=1/(Ra+Rb) (i.e. surface resistance is assumed to be
zero). Ra is unchanged. Rb is now calculated using a formula given by
Underwood, Rb=300/ustar, and for particles larger than 1um, Rb is given by
Rb=300/(ustar * D^2) where D is the (mean) particle diameter in um. The (mean)
particle diameter is known internally for particulate sources (i.e. those that
sediment, e.g. volcanic ash), Particle%Diameter, and is specified (in um) for
other aerosols in the input file under the column header "Mean aerosol diameter"
in the Species block. 

Surface flow structure split into surface, soil and plant to enable
different types of runs requiring a different subset of surface / ancillary
data to run without having to provide all ancillary and surface data. E.g. a
dust run can run without having to provide vegetation information or a run
using the new land use dependent dry deposition scheme could be run without
soil information. A dust run requires surface and soil whereas a run using the
land use dependent dry deposition scheme requires surface and plant.

Helen Webster

!-------------------------------------------------------------------------------------

15/12/2009

Modified the Makefile for NAME such that it now takes into account the dependencies
correctly.

Using a makefile with the correct dependencies speeds up the compilation in most
cases as, compared to the compilation scripts, only those part of the code which have
been changed will be recompiled. For details on the usage and different options for
make, see the Makefile.

The following two files have also been added:

1) NameIII_sources: The Fortran source files of Name are specified here, obviously
this file needs to be modified when adding new .F90 files to the project or renaming
existing ones.

2) makedepend.pl: PERL script to generate dependencies, these will be written to
Makefile_dependencies, which is read by the Makefile at compile time.

Eike Mueller

!-------------------------------------------------------------------------------------

18/12/2009, 21/12/2009

Some changes to the Makefile:

 a) Made 'all', 'nameiii', 'depend' and 'clean' targets in .PHONY.
 
 b) Corrected linking dependencies. Now code will only be linked, if the executable
    does not exist already (before, it was always linked).
 
 c) Added the possibility of specifying custom Compiler and Linker flags by loading
    them from a file (this will be useful for development work, when these options
    could change frequently).
 
 d) Also added make $(SOURCES) in make depend. This makes sure that all files are
    preprocessed before makedepend.pl is called.

Eike Mueller

!-------------------------------------------------------------------------------------

22/12/2009

Further changes to Makefile:

 a) Added compiler option -DLinuxIntelV9
 
 b) Replaced 'make $(SOURCES)' in make depend by a more specific 'make $(PSOURCES)'
    which only preprocesses those F90 files which correspond to a P90 file.

Eike Mueller

!-------------------------------------------------------------------------------------

05/01/2010

Case.F90: Bug fixes to sedimentation velocity calculation in OneParticleTimeStep.
The temperature in dynamic viscosity parametrisation should be in degrees C,
kinematic viscosity = dynamic viscosity / rho (in TDN 244) and 
"a" (particle radius) in Pruppacher and Klett is particle size in m (not um).

Helen Webster

!-------------------------------------------------------------------------------------

07/01/2010

Case.F90 and Physics.F90: Propagate bug fixes of 05/01/2010 for sedimentation
velocity calculation to puffs (OnePuffTimeStep) and TerminalVelocity function
(in Physics.F90 and not currently used).

Helen Webster

!-------------------------------------------------------------------------------------

07/01/2010

Chemistry.F90: Long lines with trailing blanks caused problems with Intel
Fortran compiler version 11. Offending trailing blanks removed (see previous
occurrence reported on 22/06/09).

Helen Webster

!-------------------------------------------------------------------------------------

22/01/2010

Tokens2Species in Input.F90 and Drydeposition in Particle.F90: Simplified options
in Species block for dry deposition to avoid confusion and added a fatal error
message if multiple and conflicting options are given.

Only one of "Deposition velocity", "Surface Resistance", "Land use dependent dry
dep" and "Mean aerosol diameter" should be given. The scheme used is as follows:

 a) "Deposition velocity" specified - dry deposition calculated based on given
    deposition velocity
 b) "Surface Resistance" specified - surface resistance used to calculate deposition
    velocity (vd=1/(Ra+Rb+Rc)
 c) "Land use dependent dry dep" set - land use dependent dry deposition scheme used
    and surface resistance calculated for each land use type.
 d) "Mean aerosol diameter" specified in um - aerosol dry deposition scheme used.
    Deposition velocity calculated (vd=1/(Ra+Rb) where Rb=300/ustar for mean aerosol
    diameters < 1um and Rb=300/(ustar*D^2) where D is diameter in um for mean
    aerosol diameters > 1um.

If all four headings are left blank then the code assumes that vd=0 and there is
no dry deposition.

The exception to the above is for particulate species (i.e. sedimenting species).
Sedimenting species use the aerosol dry deposition scheme regardless of the
"Deposition velocity", "Surface Resistance", "Land use dependent dry dep"
and "Mean aerosol diameter" columns in the species file.

Helen Webster

!-------------------------------------------------------------------------------------

22/01/2010

SpeciesEq function in Species.F90 updated with tests on LandUseDryDep (logical
flag indicating new land use dependent dry deposition scheme to be used) and
AerosolDiameter (mean aerosol diameter for aerosols).

Helen Webster

!-------------------------------------------------------------------------------------

22/01/2010

WhichFlow subroutine in Flows.P90 and OneParticleTimeStep in Case.F90:

In WhichFlow the incorrect assumption that if a particle was in the domain then
the module was valid for a specific attribute was made. This resulted in a
segmentation fault when running the new land use dependent dry deposition
scheme if plant information was not available.

In OneParticleTimeStep, improved error trapping from GetAttrib of surface and plant
information for land use dependent dry deposition scheme.

Helen Webster

!-------------------------------------------------------------------------------------

12/02/2010

Output.F90.
Added 'units' of 'N/A' to area at risk quantity. This was required to enable
RIMNET to process these files correctly.

Matthew Hort

!-------------------------------------------------------------------------------------

18/02/2010

Updated compilation script LinuxIntelRelease_GRIBEX to include linking of additional
shared library libpbio.so when using the new shared object version of gribex. Now
there are two separate shared libraries libgribex.so and libpbio.so to link (see
the Changes file in ../Code_Gribex for further details).

Andrew Jones

!-------------------------------------------------------------------------------------

24/02/2010

Minor updates to Chemistry.F90:

HO2 changed back to being zeroed between chemistry timesteps (see previous change
01/07/2009) after consultation with Alex Archibald (University of Cambridge).
The atmospheric lifetime was not really appropriate to leave it running free and
too much HO2 was having a detrimental effect on other species.

HONO reaction rate was decreased by a factor of 10 to that recommended by
Harrison & Kitto.

Alison Redington

!-------------------------------------------------------------------------------------

26/02/2010

Implemented the first phase of the code parallelisation with OpenMP. This involves
the parallelisation of the main particle loop in LoopParticlesPuffsAndTimeSteps in
Case.F90, the chemistry loop in ChemistryUpdate in Chemistry.F90 and the calculation
of results in RunToSyncTimeOrMetFlowUpdateOrEndOfCase in Case.F90. The timer module
has been added in Timers.F90 and timer calls added in some of the modules.

The code can still be compiled and run in serial mode using the standard compile
scripts. To compile with OpenMP support, please use the Makefile with the options
"MODEL=openmp", see ReadMe.txt for more details.

All calls to OpenMP routines are preceded with "!$" which means that they will be
ignored when compiling without OpenMP.


Detailed list of changes:

a) Timers.F90
Added the timer module. It is based on ideas in the timer library developed by
Graham Riley and Rupert Ford (Univ. of Manchester) during the parallelisation
of the NAME III v5.3 code.
This module contains a set of routines for timing sections of the code, it is
activated at compile time by setting the preprocessor variable "UseTimers".
Note that so far it only works together with OpenMP as it uses the OpenMP function
"omp_get_wtime" due to the lack of a standard timer call in Fortran.


b) NWPMet.F90
In Read2dField, the variables IHeader, RHeader and MissingL have been declared
to be THREADPRIVATE. This has to be declared explicitly as variables with the
'Save' attribute are SHARED by default, which generated problems when running on
more than one processor.


c) Particle.F90
Added !$OMP ATOMIC and !$OMP CRITICAL statements to protect updates to shared
variables.


d) Unit.F90
The variable "Units" is passed with Intent(InOut) to GetNewUnit and CloseUnit,
this makes it a shared variable which is protected by adding CRITICAL constructs.
As 'Return' statements are not allowed within a CRITICAL region, this has been removed
from the DO loop in GetNewUnit and replaced with an 'Exit' statement and the 'Return'
is placed immediately after the CRITICAL region.


e) Flows.P90
When running with "MetOnDemand", two particles handled by different threads might
request to update the same flow or met module. To prevent this a number of locks are
created, one for each flow and met module (they are called FlowLocks and MetLocks)
which ensure that only one thread at a time can call UpdateFlow and UpdateMet for a
given module.
In UpdateFlow the lock corresponding to the MetModule which is to be updated, is
set immediately before calling UpdateMet and unset after the function call. The same
technique is used in the subroutine WhichFlow to protect calls to UpdateFlow (In
the latter case, timers have also been added (one for each thread) to be able to
study the correct update behaviour).
At the end of the module, a set of routines have been created for setting and
unsetting the locks for a given flow/met module and for starting and stopping the
timers.
The locks need to be initialised with CreateFlowMetLocks before using this module
and are destroyed with DestroyFlowMetLocks.
The maximal number of threads that can be used is controlled by the module parameter
MaxThreads, which is set to 8 by default. However, this is only relevant for the
timers used, as there is one per thread.


f) Case.F90
Several timers have been added and a flag that is set to .true. as soon as they are
initialised in the first call to RunToRestartDumpOrSuspendOrEndOfCase.
Time spent in the following sections of code is measured:

 - Timer ReleaseTimer: Call to Release in RunToRestartDumpOrSuspendOrEndOfCase
 - Timer LPPATsTimer:  Call to LoopParticlesPuffsAndTimeSteps (i.e. the main particle
                       loop) in RunToSyncTimeOrMetFlowUpdateOrEndOfCase
 - Timer CalcFlowAndOtherResultsTimer: Call to CalcFlowResults and CalcOtherResults
                                       in RunToSyncTimeOrMetFlowUpdateOrEndOfCase
 - Timer ProcessOutputTimer: Call to ProcessAndOutputResults in
                             RunToSyncTimeOrMetFlowUpdateOrEndOfCase
 - Timer ChemistryTimer:     Call to ChemistryUpdate in 
                             RunToSyncTimeOrMetFlowUpdateOrEndOfCase

In RunToSyncTimeOrMetFlowUpdateOrEndOfCase, the subroutine
LoopParticlesPuffsAndTimeSteps, which contains the main particle loop, is now
called within an OpenMP PARALLEL region. In the the same subroutine, the calculation
of results has been moved to a new subroutine CalcParticleResultsSub. This was
necessary because of a bug in the ifort compiler (see stage one report on
parallelisation by Graham Riley and Rupert Ford), which does not allow the direct
parallelisation of the loop. The loop over particles in CalcParticleResultsSub is
parallelised with an !$OMP PARALLEL directive. Care has to be taken when killing
particles, this is done within a !$OMP CRITICAL region. When running the code in
parallel, the order in which the particles get killed is different from what happens
in the serial case. To be able to make the results more reproducible, it is also
possible to set the flag 'Reprod', in which case the particles are killed within
an !$OMP SINGLE region outside the main loop, which ensures that they are killed
in the same order as in a serial run.

In LoopParticlesPuffsAndTimeSteps, instead of looping over puffs (j=1) and
particles (j=2) in ParticlePuffLoop1, the two cases are now treated separately.
The puff case has not been parallelised yet and the code is executed within a
!$OMP SINGLE region. The loop over particles is executed within a !$OMP DO construct.
The processing of each particle/puff has been moved to a separate subroutine called
LoopParticlesPuffsAndTimeStepsSub (again, this was necessary due to a bug in the
intel fortran compiler). As the loop is outside the subroutine now, the exit condition
had to be changed from

  'If (.not.ParticleActive(Particle)) Cycle ParticlePuffLoop2'

to

  'If (ParticleActive(Particle)) Then [...] End If'

In the subroutine Release, an !$OMP ATOMIC directive was added to protect updates to
shared variables. In the subroutine OneParticleTimeStep the updates to the shared
variable DispState are protected by an !$OMP CRITICAL region.


g) Chemistry.F90
The main chemistry loop has been surrounded with an !$OMP PARALLEL DO directive.


h) MainNameIII.F90
The locks in Flows.P90 and the routines for setting and unsetting them have been made
accessible by expanding the Use FlowModule, Only: ... statement.
These locks and the Timer module are initialised and finalised in the main routine.


i) Makefile
The default COMPILERMODE is set to Optimized. Parallel compilation is now enabled with
"MODEL=parallel". The option USETIMERS has been added for compiling with the timer
module. A compiler/linker flag "-heap-arrays" has also been added. This was necessary
due to a segmentation fault in the subroutine ProcessNWPMet when using parallelised
met read (note, however, that this has not been implemented yet in the source code).
The method by which the name of the executable is constructed has been adjusted. It
is called 'nameiii.exe' by default but the following labels are added to the filename:

 - 'Debug',  if compiled with COMPILERMODE=Debugging
 - '_64bit', if compiled on a 64-bit system
 - '_par',   if compiled in parallel mode


NameIII_sources
The source file Timers.F90 has been added to the list of source files.


LinuxIntelRelease, LinuxIntelDebug and LinuxIntelRelease_GRIBEX
The file Timers.F90 has been added to the list of source files.
In LinuxIntelRelease_GRIBEX, the installation path has also been changed to use an
absolute path which is constructed using the 'pwd' command.


Eike Mueller

!-------------------------------------------------------------------------------------

01/03/2010

The compiler flag -DLinuxIntelV9 has been removed from the Makefile. This was used in
v5.3 to control the size of the random seed array but has been removed in v5.4.

Eike Mueller

!-------------------------------------------------------------------------------------

01/03/2010

Adapted NWPMet.F90 to allow skipping of missing met files. This capability will be
useful for forecast files from the Global model, which is 3-hourly up to forecast step
T+72 and 6-hourly between T+72 and T+144, as no externally interpolated .pp files need
to be created.

In the subroutine ReadNWPMet, an Intent(In) parameter AllowSkip has been added which
determines whether a particular file is to be skipped if it cannot be read from disk.
If this parameter is set to .true. and a file is not found, a warning will be
printed out and the Intent(Out) parameter Skip is set to .true., otherwise an
error message is printed out. In the subroutine UpdateNWPMet, a maximum number
of MaxSkip (hard wired to 1) files is skipped and the met times and the parameter Dt
in NWPMet are adjusted accordingly (Dt of NWPMet is used to calculate the temporal
interpolation coefficients in GridAndDomain.F90). Note that subsequent met updates
then revert back to using the value of Dt given in the NWP met definition.

The ability to skip missing met files is currently controlled using the parameter
MaxSkip. This is a global control in the sense that all met definitions will be
treated in the same way. In the future, the behaviour of the met skipping could
be made dependent on the met type by including this information in the met definition.

Eike Mueller

!-------------------------------------------------------------------------------------

03/03/2010

Minor change to RadarMet.F90 so that code uses NWP rainfall if radar met is missing.

Code now tests the status of Error and does no longer just check radar met file
is available. Error code changed to 2 so if radar met file is missing this is no
longer a fatal error.

Laura Burgin

!-------------------------------------------------------------------------------------

03/03/2010

Source.F90: Bug fix in CalcSeaSaltSourceStrength. The test for over sea now uses
Surface%LandFrac (< 1). SourceStrength is modified by the factor (1-Surface%LandFrac)
(i.e. no change for a totally sea grid box (factor of 1) but a reduced source strength
for a fractional sea grid box).

Helen Webster

!-------------------------------------------------------------------------------------

03/03/2010

Input.F90: Long lines in Tokens2Species reduced to work with version 11 of the
Intel Fortran compiler (see also the change implemented on 07/01/2010).

Helen Webster

!-------------------------------------------------------------------------------------

04/03/2010

Case.F90: Bug fix in Release. Get flow and surface information for dust and sea-salt
sources now has height hard-wired to 10 m to ensure correct wind speed is used for
sea-salt releases. Previously 0 m meant that U and V were always zero and therefore
no salt was released.

Alison Redington

!-------------------------------------------------------------------------------------

04/03/2010

NWPFlow.F90: In CloudInfoFromMet, Cloud%ConCloud and Cloud%DynCloud are now
obtained using nearest neighbour (was interpolated) in line with cloud base
and cloud top. In RainInfoFromMet Rain%ConPpt and Rain%DynPpt are now obtained
using nearest neighbour (was interpolated) in line with cloud.

SingleSiteMet.F90: In ReadSS, cloud fix up removed (previously fixed cloud amount
to 1.0 if precipitation > 0 but cloud amount = 0). Note that this means that cloud
and precipitation can be out of sync but this is true for other met types.

Particle.F90: Fix up cloud base and cloud top (both dynamic and convective)
within WetDeposition if they were undefined (<0) and precipitation is above
PptCrit (0.03 mm/hr). This allows wet deposition to take place if there is
rain but no cloud. The wet deposition parametrisation uses Max(convective
cloud amount, 0.05) so for zero convective cloud a "fix up" to 0.05 is already
in place. No fix up for dynamic cloud amount is required (the parametrisation
does not depend on it). The fix ups to cloud base and cloud top are only local
to WetDeposition so cloud and precipitation could be out of sync elsewhere.

Helen Webster

!-------------------------------------------------------------------------------------

11/03/2010

Case.F90: Fatal error added to OnePuffTimeStep so that if the LandUseDryDep flag
("Land use dependent dry dep" in the Species block in the NAME input file) is set
for any species in a puff run then the run fails. Longer term the ability to run
the new land use dependent dry deposition with puffs should be enabled.

NWPMet.F90: Change ExtrapolationLevelsAbove to 4 for stomatal conductance
and canopy water so that for global met data, where the met files only have
an average grid box value, the value read into pseudo z level 1 (the average
gridbox value) will be proliferated to pseudo z levels 2-5 so that the
average value is stored for all 5 plant types. Fix up to do the above added
to ProcessNWPMet.

NWPFlow.F90: Fix up for stomatal conductance added to PlantInfoFromMet.
With global NWP met, a stomatal conductance value of 1.0E6 is used for ice
regions. However, the land use fractions ancillary may not be in agreement
with the stomatal conductance representation of ice (e.g. if ancillaries on
a different grid to the NWP met are used or in regions where ice may be
seasonal). The fix up implemented defaults stomatal conductance to an
arbitrary value of 0.01 if the stomatal conductance is > 1000.0 (i.e.
suggesting ice). Note that a fixed up stomatal conductance value will only
be used if the land use fraction of any of the plant types (land use
categories 1-5) are greater than zero.

Helen Webster

!-------------------------------------------------------------------------------------

11/03/2010

GlobalParameters.F90: MaxNWPMetFields increased to 90.

Alistair Manning

!-------------------------------------------------------------------------------------

12/03/2010

Implemented the second phase of the code parallelisation with OpenMP. This includes
the parallelisation of the reading of met data. Depending on the value of the
environment variable USEPARALLELIO, met data is read (and processed) by a separate
IO thread which is synchronised with the worker thread(s). Note that at the moment
parallel met reads are incompatible with using MetOnDemand and the skipping of
missing met files (If USEPARALLELIO is "TRUE" or "READONLY", any missing met files
will cause the code to abort with an error).
The number of threads in the different parallel loops is now controlled by the
environment variables PARTTHREADS, CHEMTHREADS and PARTUPDATETHREADS. If these
are not set, the default value as set by OMP_NUM_THREADS is used.


Detailed list of changes:

NameIII_sources
Added IOThreadModule.F90 and OpenMPModule.F90 to the list of source files.

LinuxIntelDebug, LinuxIntelRelease and LinuxIntelGRIBEX
Added IOThreadModule.F90 and OpenMPModule.F90 to the list of source files.

IOThreadModule.F90 [new file]
This module controls the behaviour of the IO thread which loops over the different
met modules and reads data into a prefetch buffer if the data has been marked
for prefetch by the worker thread.

OpenMPModule.F90 [new file]
This module contains subroutines for initialising and synchronising the IO and
worker threads.

Mets.P90
Synchronisation calls added to synchronise met update (which is called by the worker
thread) with the IO thread.

CommonMet.F90
Added several fields which are needed for storing prefetch information to the type
CommonMet_. These fields are used for passing information between the IO- and
worker threads.

Timers.F90
Extended the number of digits which are used for displaying times in the output
subroutines.

Case.F90
Changed the number of threads in the particle loop and the loop which calculates the
contribution of particles to the output to ParticleThreads and ParticleUpdateThreads.
Changed the scheduling strategy in the particle loop to "static,16", this is the
number which Rupert and Graham recommend in their final stage 2 report. Changed the
set of timers used and added a subroutine CaseModuleTimerSummary which prints out
the total time spent in these timers. For efficiency reasons, Reprod has been changed
to .false. in CalcParticleResultsSub, this means that the results from a parallel run
will differ from a serial run, even if 'Fixed (Parallel)' is used for the random seed.

Chemistry.F90
The number of threads in the chemistry loop is now set by the variable
ChemistryThreads defined in OpenMPModule.F90.

MainNameIII.F90
Added calls to the initialisation and finalisation routines of the OpenMPModule.
Processing of one case has been moved to the separate subroutine
RunToSuspendOrEndOfCase. In this subroutine the parallel IO synchronisation
is initialised. After a barrier the IO- and worker-threads are treated differently:
the worker thread processes the case as before and the IO thread reads met data
whenever it finds a prefetch request (see subroutine StartIOThread in
IOThreadModule.F90).

NWPMet.F90
The subroutines ReadNWPMet and ProcessNWPMet have been made public as they are called
by the IO thread from within IOThreadModule.F90. In the type NWPMet_ the size of the
second dimension of ValidAttribs? has been increased as we now need these attributes
for three buffers (old, new and prefetch). In the same type the fields Prefetch
(index of prefetch buffer) and PrefetchTime (time of met to be prefetched) have
been added. Added timer calls to measure time spent on reading and processing met.
Changes to subroutine UpdateNWPMet:
The times MetTime3 and SMetTime3 are introduced to store the time of the prefetch
buffer, the last dimension of the NWPMet fields is set to NBuffers=3 if parallel IO
is used, NBuffers=2 otherwise. If this has not happened already, the timers for
reading and processing met data are initialised and timer calls have been added
around the corresponding subroutine calls. In the first met update, the index of the
prefetch buffer is initialised if necessary and the old, new and prefetch buffer
are swapped to prepare for data prefetch. If parallel IO is used, NWPMet is marked
for prefetch by setting the appropriate variables in NWPMet%C. Data is then read
and processed, but only if this is not done by the IO thread. If we use parallel IO
skipping of met files is not allowed.
In the subroutine ReadTopog, the third topography buffer is copied from the first
if parallel IO is used.
In ReadNWPMet an additional parameter idx has been added which determines into
which buffer the met data is read. The arrays Dummy, DummyU and DummyV are made
allocatable and are allocated, their size depends on whether we use parallel IO
or not.
In ProcessNWPMet, added the parameters OldIdx and NewIdx which determine which data
will be processed (this is necessary as the subroutine might be called by the
IO thread, which will process the data in the 'prefetch' and 'new' buffers instead
of 'old' and 'new'). As ProcessNWPMet calls several other subroutines, a parameter
NewIdx is added to the following subroutines as well: CalcH, CalcZAboveGroundDot,
ConvertZColumn, PToZColumn, ZToPColumn and CalcCloudInfo.

Eike Mueller

!-------------------------------------------------------------------------------------

15/03/2010

Input.F90: Change to column headers in the Species: block. "Wet Type" has been
removed and "Wet Dep?", "A" and "B" added. A value "Wet Dep?" ("Yes" or "No") is
compulsory. "A" and "B" are optional. The old options for "Wet Type" are
equivalent to the following:

 "Wet Type" = "0" (i.e. no wet deposition)
  --> "Wet Dep?" = "No". Any value specified for "A" or "B" is ignored.
  
 "Wet Type" = "1" (i.e. standard NAME wet deposition scheme by Tom Choularton)
  --> "Wet Dep?" = "Yes" and "A" and "B" left blank / not specified.
  
 "Wet Type" = "2" (i.e. SO2 deposition scheme)
  --> "Wet Dep?" = "Yes", "A" = "2.4E-5" and "B" = "0.79".

Any other wet deposition coefficients (A, B > 0) can be entered in the Species block.

Species.F90: WetType removed from the Species derived type and A and B added.
Related changes to InitSpecies and SpeciesEq.

Particle.F90: Changes to WetDeposition. Only apply wet deposition if particle
is below cloud top (previously if the SO2 or orographic enhancement parametrisations
were used then wet deposition occurred even if above cloud top). Mass is now adjusted
after dynamic wet deposition and used in convective wet deposition step.
SO2 wet deposition scheme replaced with generic scheme with A and B coefficients
specified in NAME input file. Restructure of subroutine to be (hopefully) more
efficient and clearer.

Helen Webster

!-------------------------------------------------------------------------------------

15/03/2010

Input.F90: Change default for "Land use dependent dry dep" in SpeciesInputNames
to "No" and remove test on blank in Tokens2Species.

Helen Webster

!-------------------------------------------------------------------------------------

17/03/2010

GlobalParameters.F90

Increased MaxHGrids from 60 to 70 to cope with larger number of grids required
in air quality runs due to the use of split Global met data and the need to create
boundary conditions for nested air quality domains.

Lucy Davis

!-------------------------------------------------------------------------------------

19/03/2010

Case.F90

Added DispState%iHCoordLatLong into Restart file write and reads (subroutines
WriteRestartFileDispState and ReadRestartFileDispState).

Particle.F90

In the WetDeposition subroutine, 'If' statements have been split into two so that
DynCloudBase/DynCloudTop and ConCloudBase/ConCloudTop are only tested when defined.

Lucy Davis

!-------------------------------------------------------------------------------------

22/03/2010

FlowAndFlowProfile.F90
Added new subroutine ModifyTurbByTerminalVelocity which modifies turbulence
sigmas, taus and Ks and derivatives if particle is sedimenting to account
for trajectory-crossing and inertial effects. Added z-derivatives of Lagrangian
timescales to the Flow_ derived type, corrected nTurbLayers to an integer
(was incorrectly a real) and modified to store sigma_w^2 and Tau_w (rather than K_w)
for turbulent layer scheme. Propagated these changes to other routines.


Building.F90, SingleSiteFlow.F90, LincomFlow.F90 and NWPFlow.F90
Changes to remove dTauUUdZ from routines since now part of Flow_ structure.


Case.F90
In OneParticleTimeStep and OnePuffTimeStep, replaced sedimentation velocity
calculation with call to TerminalVelocity subroutine and added call to
ModifyTurbByTerminalVelocity immediately afterwards.

Particle.F90
In arguments of TransmitInterfaceW and ReflectInterfaceW only pass Particle%WSed
and not all of Particle. In DiffusionProcessReflect, TransmitInterfaceW and
ReflectInterfaceW, calculate K_w values on either side of the interface from
sig_w^2 and tau_w values (since K_w no longer stored for turbulent layer scheme
in Flow).

Helen Webster

!-------------------------------------------------------------------------------------

23/03/2010

Case.F90
In OneParticleTimeStep and OnePuffTimeStep added extra restrictions to time step (RDt)
for case when sigmas / taus etc. have been modified by the sedimentation velocity.
Recalculate SDt to be in agreement with RDt.

Helen Webster

!-------------------------------------------------------------------------------------

24/03/2010

Case.F90
In OneParticleTimeStep and OnePuffTimeStep expanded logs and exps in series
expansion when argument of log is close to 1 and argument of exponential is
close to zero to prevent precision issues in calculation of DrydepFrac and
reflection off ground for inhomogeneous scheme.

Helen Webster

!-------------------------------------------------------------------------------------

07/04/2010

Two minor bugfixes and implementation of new synchronisation mechanism with 3 locks.

The kind of lock variables in OpenMPModule.F90 and Flows.P90 have been changed to
the system independent kind=OMP_lock_kind as otherwise a runtime error occurs on
32-bit systems (they had previously used Integer*8).

In OpenMPModule.F90 implemented the new synchronisation mechanism with three locks
instead of four.

In Flows.P90 added #ifdef statements in the subroutines UpdateFlowTimerOff and
UpdateFlowTimerWriteLast as otherwise an error message will be printed out by default
when running in serial mode with UseTimers switched off.

Eike Mueller

!-------------------------------------------------------------------------------------

08/04/2010

Change to the array layout in Type(ChemistryState_). Added timer to Chemistry module
and hardwired the scheduling strategy of the 'particle update' loop.

MainNameIII.F90:
Included a call to ChemistryModuleTimerSummary which will print out timing information
for the chemistry loop at the end of the run if the flag UseTimers is set.

Chemistry.F90:
Added a timer 'ChemistryLoopTimer' which measures the time spent in the parallelised
chemistry loop (previously the time spent in ChemistryUpdate was measured in Case.F90
which also included the serial part of this subroutine). The subroutine
ChemistryModuleTimerSummary can be used to print out summary information on this
timer at the end of a run. In the structure Type(ChemistryState_) the arrays
Mass, OldMass and Chemfield used to be laid out as (x, y, z, Species). However, they
are always looped over in the order x, y, z, Species which is not consistent with
the way they are laid out in memory (In Fortran the left-most index runs fastest and
the (x, y, z, Species) layout lead to a large number of L2 cache misses). The layout
of these arrays has been changed to (Species, z, y, x). The same restructuring was
done for the three dimensional arrays O3LIM and H2O2LIM. Overall this leads to a
performance increase of around 10%. It is likely that restructuring of other arrays
in this structure and the code in general will lead to similar performance gains.

Case.F90:
Now hardwired the scheduling strategy in the parallelised 'particle update' loop to
"dynamic,16". Reversed the order of indices in the array ChemistryState%ChemField
(see above changes to Chemistry.F90).

Eike Mueller

!-------------------------------------------------------------------------------------

13/04/2010

Updated the subroutine Read2dField in NWPMet.F90 to improve checking of headers
when using pp met files. The grid size (nX / nY) and grid spacing (dX / dY) of
each met field is now checked for consistency with the information in the NWP
met definition file. An 'Inconsistent Header' message is generated if the
header does not match the met definition. The tests for the grid spacing compare
real variables to a level of precision specified in a new local parameter
'CoordTolerance'. This value is in degrees and is initially set as 0.001 but
this can be changed if required.

Andrew Jones

!-------------------------------------------------------------------------------------

29/04/2010

Case.F90
Changed from a fatal error to an ordinary error if DrydepFrac is out of range in
OneParticleTimeStep and OnePuffTimeStep. Fix up DrydepFrac to be in range 0-1.

Helen Webster

!-------------------------------------------------------------------------------------

25/05/2010

Case.F90
Correction to time step restriction for Particle%WSed > 0 in OneParticleTimeStep and
OnePuffTimeStep. The additional restriction is calculated separately and SDt and RDt
are only then altered if this is less than the current time step. Otherwise,
converting RDt back to SDt introduces a rounding error.

Helen Webster

!-------------------------------------------------------------------------------------

07/06/2010

Chemistry.F90
Bug fix. Corrected order of writing out nX, nY, nZ, nSpecies and nChemFields for
restart files in WriteRestartFileChemistry.

Lucy Davis

!-------------------------------------------------------------------------------------

08/06/2010

Removed the remaining flush(6) statement from OpenMPModule.F90

Eike Mueller

!-------------------------------------------------------------------------------------

16/06/2010

Output.F90:
In subroutine OutputFields, calls to TRIM have been removed when constructing lines
in the output file (instead, the current position along the line is stored).
This makes the routine significantly faster as TRIM is inefficient. In the same
subroutine, the loop over output groups has been parallelised with OpenMP, which
gives an additional benefit on multi-core processors.

CompilerInfo.F90 (new module):
A new module has been added which contains references to two preprocessor macros
COMPILETIME and COMPILERVERSION which are set to the current date and to the compiler
version when the module is compiled with the Makefile (note that for this module,
preprocessor macro expansion has to be enabled, in contrast to all other source code,
for which macro expansion is disabled to avoid accidential expansion).

The value of COMPILETIME and COMPILERVERSION is printed at the start of each NAME run.
Currently, the compile scripts LinuxIntelRelease and LinuxIntelDebug do not support
this functionality, as they compile the entire source code in one step with
preprocessor macro expansion disabled for all source files.

If COMPILETIME and COMPILERVERSION are not set, they default to 'unknown'.

In the Makefile, added the compiler flag -sox for the Linux Intel compiler which will
include information on the compiler version and compiler options used for compilation
in the executable. This information can be retrieved from the executable by using
the command

 strings --all <executable> | grep comment:

Adapted the compile scripts LinuxIntelRelease, LinuxIntelDebug and
LinuxIntelRelease_GRIBEX to include the new module CompilerInfo.F90 and with
the -sox option. This means that the compiler information will be embedded within
the executable (and can be viewed using the above command) but it will not appear
at the start of each NAME run.

MainNameIII.F90:
Added calls to the subroutines in CompilerInfo.F90 which print out the compiler
version and compile date.

Eike Mueller

!-------------------------------------------------------------------------------------

17/06/2010

NWPMet.F90:
Updated the subroutine ReadNWPMet to explicitly check for presence of a GRIB met file.
This allows a missing met file to be trapped in the usual way and, if alternative
met/flow information is available, for the NAME run to continue. With the previous
coding, a missing met file would generate an error when the embedded PBIO routine
attempted to open the file and this caused the run to terminate.

Modified the subroutine Read2dField to allow GRIB header element KSEC1(18)
to be either 0 or 1 (i.e. 'analysis' and 'forecast' fields).

Also adapted the code so that missing GRIB files can be skipped in exactly the same
way as for .pp files.

Andrew Jones and Eike Mueller

!-------------------------------------------------------------------------------------

24/06/2010

Modified Output.F90 so that NAME only writes out the first 2 met type definitions
that have been used. Without this, NAME lists all met definitions used (which can be
a very long list).

Matthew Hort

!-------------------------------------------------------------------------------------

29/06/2010

I made the following three changes to the code:

(I) Instead of using public module variables such as UseParallelIO and 
ParticleThreads to control the behaviour of the OpenMP module, I now created 
a Type(OpenMPOpts_) for this. A variable of this type is used in MainNameIII, 
and I also added a variable of this type to the Type(NWPMet_). This will 
allow us to switch on Parallel MetRead for individual NWPMet instances in the 
future.

(II) OpenMP options are read from the input file instead of setting them via
environment variables. The only is exception SCHEDULE for the chemistry loop,
which needs to be set via the environment variable OMP_SCHEDULE.
[Note that in OpenMP 3.0 the scheduling strategy could be set at runtime with the
library routine omp_set_schedule() but this is not supported by the version of
OpenMP which we currently use.]


(III) I added a block for specifying the timer module options to the input 
file. I changed the structure of the timers module and added a new structure 
Type(TimerOpts_) which is used to control the behaviour of this module. Even 
if the code is compiled with support for timers, these can now be switched 
off completely or only a summary can be requested, instead of writing a line 
to the timing log file every time a timer is called. In the modules which 
use timers (Case.F90, Chemistry.F90, IOThreadModule.F90 and NWPMet.F90), I 
moved the creation of these timers to separate subroutines.


Description of new input file options:
======================================

(*) OpenMP module:

The block 'OpenMP Options:' in the input file is used to control the 
behaviour of OpenMP. It has the following columns:

Use OpenMP? [default: 'No']:
This is set to 'Yes' if we want to use OpenMP. This variable overwrites all 
other OpenMP variables, i.e. if it is set to 'No', then all thread numbers 
are set to one and ParalleMetRead/Process are set to .false.

Threads [default: 1]:
Number of threads in the parallel sections of the code. This can be 
overwritten for individual sections by the following entries:

Particle Threads [default: 1]:
Number of threads in the particle loop.

Particle Update Threads [default: 1]:
Number of threads in the particle update loop.

Chemistry Threads [default: 1]:
Number of threads in the chemistry loop.

Output Group Threads [default: 1]:
Number of threads in the output group loop.

Parallel MetRead? [default: 'No']:
If this is set to 'Yes' NWP Met Data is read (but not necessarily processed) 
by a separate IO thread.

Parallel MetProcess? [default: (value of 'Parallel MetRead')]:
If this is set to 'Yes' NWP Met Data is processed by a separate IO thread.
Note that if 'Parallel MetProcess?' is enabled, 'Parallel MetRead?' will 
automatically be set to 'Yes', irrespective of its value in the input file.
Also, 'Parallel Met Process' is set to the value of 'Parallel Met Read' by 
default, which means that if 'Parallel Met Process' is not specified in the 
input file but 'Parallel Met Read' is set to .true., NWP met data will 
automatically be read AND processed by the IO threads.


(*) Timer module:

The block controlling the timer module specific options is called 
'Timer Options:'. The following two columns can be specified:

Use Timers? [default: 'No']:
Use timers and write timer information to timing log file.

Summary Only? [default: 'Yes']:
Only print out summary information on how long an individual timer was 
switched on at the end of the run.




Detailled changes:
==================

Mets.P90

In the subroutine UpdateNWPMet() I now go through each NWPMet instance in 
Mets to check whether one of them has the ParallelMetRead flag set to true in 
its OpenMPOpts. Only if this is true are the synchronisation routines 
LookaheadFileReadCompleteWait() and LookaheadFileReadRequest() called. At the 
moment the ParallelMetRead flags of all NWPMet modules have to be consistent, 
but this might be changed in the future if ParallelMetRead is enabled 
selectively for individual NWPMet instances.
Previous version copied to Mets02.P90.


OpenMPModule.F90

I replaced the global variables UseParallelIO, ProcessDataOnIOThread, 
ParticleThreads, ChemistryThreads and ParticleUpdateThreads by the structure 
Type(OpenMPOpts_) (which in addition contains a field for controlling the 
number of threads in the OutputGroup Loop), which is used to pass OpenMP 
options between subroutines. I made WorkerThreadID and IOThreadId private 
parameters to avoid them being overwritten. The variable 
NumberOfParallelIOThreads should not be overwritten outside of this module, 
so I made it private and added a public subroutine 
GetNumberOfParallelIOThreads.
The subroutines InitialiseOpenMPConfiguration() and 
CheckOpenMPConfiguration() are replaced by the PreInitOpenMPOpts(), 
InitOpenMPOpts() and CheckOpenMPOpts() to bring the module in line with 
other modules.
These subroutines now carry out the following tasks.
(*) PreInitOpenMPOpts(): This is called before reading options from the input 
file to set the fields in the OpenMPOpts variable passed to it to the default 
values.
(*) InitOpenMPOpts(): Called after successfully reading the block 
'OpenMP Options:' from the input file. Check the conistency of the different 
OpenMP options and initialise the locks for parallel MetRead.
(*) CheckOpenMPOpts(): Check that the module has been initialised and print 
out OpenMP options.
In the subroutines InitOpenMPConfiguration() and FinaliseOpenMPConfiguration() 
I added the parameter OpenMPOpts. In the synchronisation routines 
LookaheadFile...() I no longer check for parallel IO explicitly within the 
subroutine, this now needs to be done before calling these subroutines!
Note that the 'OpenMP Options:' block is optional in the input file, and if not
supplied then the defaults will be used.
Previous version copied to OpenMPModule02.F90.


MainNameIII.F90

I added the global variable OpenMPOpts which controls the OpenMP options. 
This required changes to some subroutine/function calls which now take this 
parameter and a few other changes to function calls. In 
RunToSuspendOrEndOfCase() I added the local variable 
NumberOfParallelIOThreads, which is initialised with a call to 
GetNumberOfParallelIOThreads() and can be passed to NUM_THREADS().
A small change to a subroutine call to pass OpenMPOpts to the output 
subroutines. IOThreadTimerSummary can be called without checking for 
ParallelMetRead as the subroutine will not do anything if the IOThread timers
have not been initialised.
The call to InitialiseTimers() is no longer needed, as the timer module is 
now initialised when reading the input file, there is now a call to 
CheckTimerOpts() just after the call to CheckOpenMPOpts(). I added a timer 
TotalTimeTimer? to measure total runtime (note that this does not measure 
some initialisation routines, but their contribution to the overall runtime 
should be small). In the modules CaseModule, NWPMetModule, IOThreadModule and 
ChemistryModule? the timers are now created in separate subroutines which 
need to be called from MainNameIII.F90.
Previous version copied to MainNameIII06.F90.


Input.F90

In the subroutine ReadInputFiles() I added calls to the new subroutines 
PreInitOpenMPOpts(), OpenMPOptsInputName() and Tokens2OpenMPOpts(). I also 
had to modify the subroutine Tokens2NWPMet() to make sure that OpenMPOpts are 
passed on to InitNWPMet() called there.
The two new subroutines OpenMPOptsInputNames() and Tokens2OpenMPOpts() are 
used to define the OpenMP options block and to read the columns in this block 
into the correct fields of OpenMPOpts.
I added functionality for reading timer options from the input file. For this 
I added two subroutines TimerOptsInputNames() (this adds information on the 
timer block to HFBlockForms) and Tokens2TimerOpts, which parses the timer 
options in the input file and initialises the timer module with these options.
Previous version copied to Input05.F90.


IOThreadModule.F90

Some small changes to account for the fact that the global variables 
ProcessDataOnIOThread and UseParallelIO have been replaced by the 
Type(OpenMPOpts_). Timer summary information is only printed out if the 
timers have been initialised.
I added a subroutine IOThreadModuleTimerInitialise() to create the timers 
used in this module.
Previous version copied to IOThreadModule01.F90.


NWPMet.F90

I added a field of Type(OpenMPOpts_) to the Type(NWPMet_), this can be used 
to switch ParallelMet on/off for individual NWPMet instances. At the moment 
the OpenMP options are set when the instance is initialised in InitNWPMet().
Some small changes to account for the fact that the global variables 
ProcessDataOnIOThread and UseParallelIO have been replaced by the 
Type(OpenMPOpts_). Timer summary information is only printed out if the 
timers have been initialised.
I added a subroutine NWPMetModuleTimerInitialise() to create the timers used 
in this module.
Previous version copied to NWPMet08.F90.


Output.F90

Changed the parameter lists of several subroutines to be able to pass 
OpenMPOpts to OutputFields, where it is used to determine the number of 
parallel threads in the OutputGroup loop.
Previous version copied to Output05.F90.


Chemistry.F90

Timer summary information is only printed out if the timers have been 
initialised. Changed the name TimersIsInitialised -> TimersInitialised in 
line with naming conventions of other modules that used timers.
I added a subroutine ChemistryModuleTimerInitialise() to create the timers 
used in this module.
Previous version copied to Chemistry08.F90.


Case.F90

Timer summary information is only printed out if the timers have been 
initialised. A small change to a subroutine call to pass OpenMPOpts to the 
output subroutines. omp_lib is not needed in this module.
I added a subroutine CaseModuleTimerInitialise?() to create the timers used 
in this module.
Previous version copied to Case16.F90.


Flows.P90

Removed timers from this module.
Previous version copied to Flows05.P90.


Timers.F90

I replaced the subroutine InitialiseTimers by the new subroutines 
PreInitTimerOpts, InitTimerOpts and CheckTimerOpts. The first is called 
before reading these options from the input file to set the default options. 
The second checks the options for consistency (and prints out a warning if 
the user tries to use timers with a code has been compiled without support 
for the timer module) and opens the timing log file for writing. 
CheckTimerOpts prints out info messages and generates an error messages in 
case the module has not been initialised yet.
I create a new structure Type(TimerOpts_) which controls the behaviour of the 
timer module. An instance of this structure is added to the structure 
Type(Timer_).
Previous version copied to Timers02.F90.


Makefile

Default compilation is now with support for the timer module.
Previous version copied to Makefile07.

Eike Mueller

!-------------------------------------------------------------------------------------

30/06/2010

Renamed OpenMPModule.F90 -> OpenMP.F90 and IOThreadModule.F90 -> IOThread.F90.
This required changes to the NameIII_sources and the compile scripts.

Eike Mueller

!-------------------------------------------------------------------------------------

01/07/2010

Adapted the Makefile and LinuxIntelRelease_GRIBEX to improve compilations with Gribex.
They now ensure that the correct version of the GRIBEX and PBIO libraries (32-bit or
64-bit) is linked at compile time.

Eike Mueller

!-------------------------------------------------------------------------------------

01/07/2010

GlobalParameters.F90

Modified some Global Parameters to allow multiple sets of boundary conditions for
multi-nested air quality runs:
MaxFilesPerSet         - increased from 30 to 60
MaxHGrids              - increased from 70 to 90
MaxFieldReqs           - increased from 650 to 1000
MaxFieldReqsPerReqInfo - increased from 250 to 500

Lucy Davis

!-------------------------------------------------------------------------------------

02/07/2010

Removed 'Date' line from headers and updated list of authors. Removed tabs and
trailing whitespaces and checked that all lines contain at most 110
characters.

Andrew Jones & Eike Mueller

!-------------------------------------------------------------------------------------

05/07/2010

Particle.F90 and Source.F90 have been altered to include cylindroid sources with
vertical axes (in addition to ellipsoid and cuboid sources). A cylindroid is a
cylinder that has an elliptical cross-section (or, as a special case, a circular
cross-section). A cylindroid source is indicated by setting the source "Shape"
in the Sources block to "Cylindroid".

Ben Devenish.

!-------------------------------------------------------------------------------------

09/07/2010

RadarMet.F90
Revised the RadarMet_ structure and in particular the subroutine UpdateRadarMet
to align the treatment of radar rainfall data more closely with that of NWP met data.
This enabled a number of long standing issues to be addressed (such as correctly
handling missing radar rainfall files). 

Andrew Jones

!-------------------------------------------------------------------------------------

15/07/2010

I added -g to the compiler flags in Debugging mode. This allows debuggingthe code,
for example with the Intel Debugger idb or with the gnu debugger gdb.

Eike Mueller

!-------------------------------------------------------------------------------------

15/07/2010

This repeats an earlier changes (which was in v5.4 but was later lost) which allows
missing convective cloud/rain fields to be fixed up to default values. This
was discovered by running on UKV data which does not have convective cloud/rain.

Andrew Jones (committed to repository bei Eike Mueller).

!-------------------------------------------------------------------------------------

28/07/2010

Limited number of allowed OpenMPThreads. The maximal number of allowed
OpenMP threads is now controlled by the module parameter OpenMPMaxThreads in
OpenMP.F90.

Eike Mueller

!-------------------------------------------------------------------------------------

30/07/2010

Due to a memory issue in the parallel 32bit version, I changed the following
parameters in GlobalParameters.F90 back to their original values:

Integer, Parameter :: MaxFilesPerSet          =  30
Integer, Parameter :: MaxHGrids               =  70
Integer, Parameter :: MaxFieldReqs            = 650
Integer, Parameter :: MaxFieldReqsPerReqInfo  = 250

Eike Mueller

!-------------------------------------------------------------------------------------

02/08/2010

Files NameIII.opt, ...Code_NameIII/NameIII.plg and ...Code_NameIII/NameIII.dsp used by 
Windows Compaq compiler updated to include new modules in OpenMP.F90, Timers.F90 and 
IOThread.F90.

Files OpenMP.F90, Timers.F90, Flows.P90 and MainNameIII.F90 modified to avoid 
reference to omp_lib module on Windows Compaq compiler.

Dave Thomson and Andrew Jones

!-------------------------------------------------------------------------------------

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.0 of NAME III released 02/08/2010.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

24/08/2010

I ported the NAME code to the MetOffice IBM supercomputer. This required some 
minor changes to the source code (which should not have any impact on the 
functionality) and adapting the Makefile and makedepend.pl in Code_NameIII. On 
the IBM the code can currently only compiled with the Makefile, I added a script 
named IBMUnixRelease for compiling the preprocessor to the Code_Preprocessor
directory. Note that not all compiler flags of the Intel Linux compiler could
be translated to the IBM xlf compiler, in particular macro expansion is not
disabled for the IBM compiler, this needs to be revisited later.

Eike Mueller

!-------------------------------------------------------------------------------------

26/08/2010

Case.F90
In the subroutine RunToSyncTimeOrMetFlowUpdateOrEndOfCase, the comparison of times
when assessing whether to reset the PPsFinished variable to false has been modified
from

'Time2ShortTime(TargetTime) < DispState%sLastReleaseTime'

to

'Time2ShortTime(TargetTime) <= DispState%sLastReleaseTime'

This change ensures that, when modelling a single instantaneous source, the model
does not incorrectly flag all particles/puffs as being killed before they have
been released. This error could previously occur (under certain conditions) because
particles/puffs released at TargetTime itself are actually released in the next call
to the RunToSyncTimeOrMetFlowUpdateOrEndOfCase subroutine.

Andrew Jones

!-------------------------------------------------------------------------------------

08/09/2010

Parallelisation of subroutine Field2AvInt() in the output module.

This implements the OpenMP parallelisation of the two implicit loops in the 
subroutine Field2AvInt().
I added a new column Output Process Threads to the OpenMP Options: block in the 
input file, which controls the number of threads used in this part of the code. 
I added more fine grained timers for the subroutine ProcessFields() and 
OutputFields() in Output.F90. As !$OMP COLLAPSE() is only allowed in OpenMP 3.0, 
which is supported by version 11 of the Intel Fortran compiler, but not in earlier 
versions, I added an open OPENMPVERSION to the Makefile, which can be 3.0 or 2.5. 
It can also be set to ifortautodetect (default) for the Intel compiler, in which 
case it will use OpenMP 3.0 if the code is compiled with version 11 of the compiler.

I also updated the make clean option in the Makefile.

Eike Mueller

!-------------------------------------------------------------------------------------

05/10/2010

I added functionality for requesting field output in units that differ from
the unit of the source species. This required extensive changes to Output.F90, 
Input.F90, Source.F90 and Species.F90. The actual unit conversion is carried
out in the subroutine ProcessFields() in Output.F90. A new module called 
PhysicalUnits.F90 was added to the code base. This module defines material units for
output requirements and conversion factors between units.

(1) For the field requirements 'Air Concentration' and
the wet/dry/total deposition rates, this is done by specifying the value of
the additional column 'Material unit' in the block 'Output Requirements: Fields'.
If the source species is given in mass units, the output can be in a different mass
unit, e.g. it is possible to specify the source strength in g/s and output the 
deposition rate in mg/(m^2 s). Conversion between different activity units is also
possible, see the input documentation for details. The source unit still has 
to be identical to the species unit. In addition to the units defined in the code
(see file PhysicalUnits.F90), new or 'unknown' units such as 'Area of risk' can 
also be used, as long as the same unit is used for the source species and all output 
requirements that depend on this species. If the material unit of an output
requirement is left blank, the unit of the source species will be used by
default to ensure backward compatibility.

The following units can be coverted into each other (but no conversion from
activity units to mass units and vice versa is possible at the moment).

* Mass units:
  't'  : tonne
  'kg' : kilogram
  'g'  : gram
  'mg' : milligram
  'mcg': microgram
  'lb' : pound
  'oz' : ounce
  
* Activity units
  'Bq'   : Becquerel
  'mBq'  : milliBecquerel
  'mcBq' : microBecquerel
  'Ci'   : Curie

(2) An additional field requirement quantity 'Mixing Ratio' has been addded. This
gives the volumetric mixing ratio relative to dry air in ppm (parts per million) or 
ppb (parts per billion). To use this quantity, both a horizontal and a vertical grid
need to be specified, which should be very fine as in the conversion the air density 
is taken at the centre of each gridbox.

(3) Vertically integrated air concentrations can be output in Dobson units (DU).
This is only possible if the vertical grid is left unspecified and boundary
layer averages are not requested.

Eike Mueller

!-------------------------------------------------------------------------------------

07/10/2010

I fixed a bug that occurs in backward trajectory runs if metdata is output at the
particle position. The code crashes in the subtroutine ConvertToH() as the particle
position has not been initialised in LoopParticlesPuffsAndTimeStepsSub(). I added two
lines in this subroutine to fix this. In addition, flow information at the previous
timestep used to be printed out as the Extra field of the particle was used to access
this information in the subroutine ParticleInfo(). In particular this means that this
information is not available at the first timestep, for the first particle this
resulted in a blank line in the output file. Now this has been fixed by accessing
flow information directly in ParticleInfo.

Eike Mueller

!-------------------------------------------------------------------------------------

13/10/2010

I fixed two bugs in the timer module.

This first was in TimerWriteSummary, where a division by zero occurred if a timer 
had not been called at all. To avoid the, we now check whether Timer%Calls is greater 
than zero and only calculate Timer%TotalTime/Timer%Calls if this is the case.

If the MetRead/MetProcess timers are used together with MetOnDemand the same timer
might be switched on/off by different threads which generated error messages in the
Timing file. This has now been fixed by having one MetRead/MetProcess timer per
thread.

Eike Mueller

!-------------------------------------------------------------------------------------

03/11/2010

Ticket #23: Bug fix to correctly interpret missing fields in a UM pp file

NWPMet.F90
Bug fix in the subroutine Read2dField to resolve a problem when reading a pp file
with a missing met field. All subsequent met fields were incorrectly labelled as
missing (this is because the 'IOStat' local variable was not saved between calls to
the subroutine). The local variable 'IOStat' has been given the 'Save' attribute
to ensure that its previous value is not lost. The variable is also declared as
THREADPRIVATE to allow the correct behaviour during any parallel met reads.

Andrew Jones

!-------------------------------------------------------------------------------------

03/11/2010

I fixed a bug in the compile scripts LinuxIntelRelease, LinuxIntelDebug and
LinuxIntelRelease_GRIBEX in Code_NameIII: The file PhysicalUnits.F90 needs to be
included in the list of source files.

The module PhysicalUnitsModule is now included in the list of modules that are
included in the module ServiceModule. This means that in all files that used this
module explicitly, the 'Use PhysicalUnitsModule' can be deleted if ServiceModule is
already used.

Eike Mueller

!-------------------------------------------------------------------------------------

18/11/2010

Bug fix for vertically integrated output (e.g. vertically integrated
concentrations). In OutputFields in Output.F90, in the section "Z plus Z
averaging information when Z is 'across'", the test on FieldReq?%iZGrid == 0
(vertically integrated quantities) needs to come before test on 
FieldReq?%IntrinsicZAv as this is true for vertically integrated quantities. 

Helen Webster

!-------------------------------------------------------------------------------------

06/01/2011

Ticket #32: Upgrade GRIB support in NAME to use the ECMWF GRIB_API library package.

a) Fortran changes

NWPMet.F90 and AncillaryMet.F90:
Inclusion of "Use grib_api" statement when the 'GRIBsupport' compiler option is set.
The 'FileType' in an NWP met definition has been changed from 'GRIB Edition 1' to
'GRIB', as the GRIB_API supports GRIB in a generic manner. Similarly, text references
to 'Edition 1' for GRIB have been removed.
Note that a 'field code' for referencing the met fields in a GRIB file now refers to
the 'unique parameter identifier (paramId)' and does not include the local parameter
table identifier (as it did previously when using GRIBEX).
The subroutines ReadNWPMet, Read2dField (and ReadTopog in NWPMet.F90 only) have been
revised to use the GRIB_API routines for accessing fields in GRIB files.
The topography field is read in as a single message from a topography file (the first
message in that file), whereas met fields are read in an indexed manner (using a pair
of file indexes created for model-level access and single-level access to a met file).
These indexes are created using the parameters 'validityDate', 'validityTime',
'paramId', 'level' (for the model-level index), and 'perturbationNumber' (when the
met file contains several met realisations). As this filtering uses the validity
date and time, it is possible in principle for different met times to be included
in the same met file (e.g. one met file per day) although in practice other parts of
the code may not fully support this.

Miscellaneous cosmetic changes (tidying up comments, etc.).

b) Script changes

Updated Makefile to replace the GRIBEX compilation option with a GRIB_API option
instead. By default, 'USEGRIBAPI' is set to false, but this can be overriden by
specifying it as a command line option. The name of the executable file includes
'GribAPI' when compiled to link with the GRIB_API shared libraries.

Added a LinuxIntelRelease_GribAPI compilation script for standard compilation of NAME
linking with the GRIB_API shared libraries.

Deleted the LinuxIntelRelease_GRIBEX compilation script.

Andrew Jones

!-------------------------------------------------------------------------------------

03/03/2011

Output.F90
Fixed bug which allowed FindSpeciesIndex to be called with empty species when
requesting time-averaged met output. Bug fix in subroutine SetUpReqs.

Lucy Davis

!-------------------------------------------------------------------------------------

04/03/2011

Further changes related to bug fix by Lucy Davis on 03/03/2011. In two other places
in the subroutine SetUpReqs() the values of FieldReq%SpeciesName is now compared to 
the empty string before extracting the corresponding index with FindSpeciesIndex(). 
This ensures that FindSpecies() is only called for FieldRequirements which depend on 
a particular species.

Eike Mueller

!-------------------------------------------------------------------------------------

13/04/2010

Increased MaxTGrids in GlobalParameters.F90 from 100 to 200. Previous value was
exceeded following Fukishima CTBTO modelling.

Helen Webster

!-------------------------------------------------------------------------------------

04/05/2011

Ticket #38: Improve the restart functionality to allow for additional sources.

The restart functionality has been enhanced to allow for any existing sources to be
stopped and/or new sources added on a restart. Some preliminary work has also been
done to allow additional output requests at a restart, but other sections of the
code will need to be reviewed before the inclusion of additional outputs can be
regarded as being safe. As a part of these changes, various checks are performed
to ensure that any source changes are sensible for that particular restart time
(e.g. that new sources do not start before the restart time). Currently these tests
produce warning messages, but some of these warnings could be upgraded to errors
(or perhaps controlled messages) if this was thought to be more appropriate.

Currently the only recommended changes to an input file on restart are:
  i) stopping one or more existing non-instantaneous sources, or
 ii) addition of one or more new sources - but only after all pre-existing sources
     in the source list.
Other changes (e.g. modifying existing source strengths or particle release rates)
are not robust and the general advice is that such changes should be avoided.

MainNameIII.F90:
New global variables 'NewSourcesDetected' (logical) and 'iFirstNewSource' (integer)
added, which will be used to identify when additional sources have been detected in
the input file at a restart and the index of the first new source that is added.
These variables are passed through to be set in the subroutine ReadRestartFile
(see Restart.F90 below). A new subroutine RestartAdjustmentForInputChanges
(in Case.F90) is called to adjust the state of the dispersion calculation to account
for any changes in the input file at restart.

Case.F90:
New subroutine RestartAdjustmentForInputChanges has been written to adjust the
dispersion model state to take account of any permitted changes to the input file
on restart. It updates various variables in DispState that control the model run
to account for input file changes.

  a) The variables
       sFirstReleaseTime, sLastReleaseTime
       sFirstReqTime, sLastReqTime, sFirstMetTime, sLastMetTime, sLastDispTime
  Note that these controls may not be fully implemented during the restarted case
  (e.g. if DispState%Time is later than DispState%sFirstReleaseTime then any change
  in the latter time will have no real effect). Furthermore, the model will not rerun
  over a time period that it has previously covered up to the point when the restart
  file was written, even if new requests/sources have been added within that period.
  However all future events starting from the restart value of DispState%Time
  should be correctly handled.

  b) The arrays
       NextReleaseTime, NextReleaseTimeM
  For existing non-instantaneous sources that are still active according to
  information in the restart file (i.e. further particles are scheduled to be
  released), a test on the source stop time is performed that deactivates any
  stopped source by setting its next release time to the infinite future.
  A warning is also written if the new stop time is before the restart time
  (as particles already released before the restart time might still be active)
  or if existing particles contain mass that is representative of the time period
  after the release has stopped. The checking here will not capture all
  eventualities, but it should help to reduce warnings where effects are trivial.
  For any new sources, the required 3-d time arrays are allocated and the next
  release times are set to the later of the calculated next release time for that
  source and the restart time. When a new source has a stop time before the
  restart time (so that it has no effect), a warning message is issued and
  the next release time is reset to the infinite future. A warning is also
  written if a new source is set to start before the restart time (as the
  source will actually be active only from the restart time).

  c) The variable PPsFinished is recalculated to take account of any new sources
  that might release particles.

The subroutine ReadRestartFileDispState has been modified to detect and allow for
additional sources added at a restart. It compares the number of sources found in
the input file(s) with the number implied by the saved information in the restart
file. If new sources have been added to the input file(s), it reports this with a
warning message. It returns with a fatal error if some sources have been removed
from the input file(s) at restart as this is not allowed. A check has also been
included that the arrays NextReleaseTime and NextReleaseTimeM have the same size
in the restart file.

Restart.F90:
Three new arguments added to subroutine ReadRestartFile to identify when additional
sources have been detected in the input file at a restart. If so, the logical variable
'NewSourcesDetected' is set to true and the integer variable 'iFirstNewSource'
identifies the index of the first new source added. The additional arguments are
passed through to the ReadRestartFileDispState routine in the Restart module.

Andrew Jones

!-------------------------------------------------------------------------------------

06/06/11

Ticket #44: Bug in trajectory output in parallel runs.

Input.F90
Particle.F90

The call to the subroutine OutputPPInfos in Particle.F90 has been moved into an
!$OMP CRITICAL region to ensure that only one thread at a time can write particle
information output.
However, when compiled with the Intel compiler, this causes the code to crash with
a segmentation fault, unless this output is only requested at Sync times. The reason
for this behaviour is not currently known (this does not happen for the IBM compiler
on the supercomputer, so it might be an Intel compiler bug). As a temporary fix,
a warning message has been added in the subroutine that initialises the requirements
for Particle Information output in Input.F90 to make the user aware of this issue.

Eike Mueller

!-------------------------------------------------------------------------------------

08/08/11

NWPMet.F90
Subroutine ProcessNWPMet
Ticket #50 
Added and commented out code for mass consistency correction of vertical windspeed

Lois Huggett

!-------------------------------------------------------------------------------------

13/01/12

Ticket #54

NWPFlow.F90
Subroutine CloudInfoFromMet - Cloud%ConCloud and Cloud%DynCloud (Convective
cloud amount (fraction) and dynamic cloud amount (fraction) at a particular 
location and time) now changed back to interpolated values reversing the change 
of 04/03/10.
Subroutine RainInfoFromMet - Rain%ConPpt and Rain%DynPpt (Convective
precipitation rate and dynamic precipitation rate at a particular location and
time) now changed back to interpolated values reversing the change of 04/03/10.
These changes are to prevent blocky wet deposition plots showing the resolution
of the NWP model when nearest neighbour values are used.


Particle.F90
Subroutine DryDeposition - Restructuring of logic to allow dry deposition
velocity to be used if specified for a sedimenting specie.

Helen Webster

!-------------------------------------------------------------------------------------

16/01/12

Ticket #56
Output.F90
Subroutine SetUpReqs
Bugfix - added test to re-enable output of species on chemistry fields

Imogen Heard

!-------------------------------------------------------------------------------------

18/01/12

Ticket #58
Chemistry.F90
Subroutine ChemistryUpdate

Added a test so that met data is only retrieved if there are particles in the 
chemistry gridbox. This significantly reduces runtime in cases where the plume only 
occupies a small portion of the model domain.

Imogen Heard

!-------------------------------------------------------------------------------------

18/01/12

Ticket #59
Chemistry.F90 has been changed to include anthropogenic formation of secondary
organic aerosol (SOA) from toluene. Two new species added to particles: NAMEARO
(the anthropogenic SOA) and AROPREC (aerosol precursor).
PM2.5 has also been added to particles.
Species files have been updated in Resources/Defns
Case.F90 has been changed to force metdependent sources to take surface T
regardless of release height. This only affects the release of biogenic alpha
pinene and isoprene currently.
GlobalParameters.F90 increased values for MaxFilesPerSet,MaxSpecieses,MaxFieldReqs
and MaxFieldReqsPerReqInfo

Alison Redington

!-------------------------------------------------------------------------------------

17/02/12

Ticket #64: Activities associated with freezing of version 6.1.

AncillaryMet.F90
GlobalParameters.F90
NWPMet.F90
RadarMet.F90

LinuxIntelDebug
LinuxIntelRelease
LinuxIntelRelease_GribAPI
Makefile

NameIII.vfproj

NameIII.dsp
NameIII.plg

ReadMe.txt

a) Revised the implementation of endian conversion when opening unformatted binary
   data files such as NWP met and topography files (see ticket for full details and
   additional background information). Endian conversion (if required) has previously
   been specified explicitly in the Fortran code for the Windows Compaq compiler
   (using the 'convert' option in the Open statement) and by setting the environment
   variable F_UFMTENDIAN for all other compilers. The 'convert' option is supported by
   more recent versions of the Intel Fortran compiler and can now be utilised here
   as well.
   
   It has been decided to introduce a new compile directive 'UseConvert' which can be
   invoked if and when required for any specific compiler.
   
    i) Revised the relevant Open statements (in NWPMet.F90, AncillaryMet.F90,
       RadarMet.F90) for reading unformatted binary files. These now use an
       
         # ifdef UseConvert
           ... 
         # else
           ... 
         # endif
       
       block to call the Open statement with a convert argument (if supported by
       the compiler version).
       
   ii) Updated the compile scripts and Makefile for Linux to invoke the convert option
       for version 11 and later of the Intel Fortran compiler.

b) Removed the explicit library references "-lc -lm" when linking NAME with the
   GRIB API, as these references are no longer required now that linking is done
   directly by the compiler (and, in fact, the use of "-lm" generated a compatability
   warning message with version 12 of the Intel Fortran compiler). These obsolete
   references have been removed from the compilation script LinuxIntelRelease_GribAPI
   and the Makefile.

c) Revised the section of the Makefile handling the "ifortautodetect" option for
   setting the version of OpenMP to be used. Previously invoking this option set
   the variable OPENMPVERSION to 3.0 for version 11 of the Intel Fortran compiler.
   The Makefile has now been modified to match version numbers of 11 or later.
   However, following problems encountered during testing (see ticket for details)
   use of OpenMP 3.0 functionality under the auto-detect option has been disabled
   pending further investigation. The extra parallelisation supported by OpenMP 3.0
   can still be invoked directly by the user, but should be used with caution
   at this time.

d) Update of ModelVersion parameter in GlobalParameters.F90 to "version 6.1".
   Also switched the label from the 'development version' to the 'frozen version'.

e) Added Windows Visual Studio project file NameIII.vfproj for use in compiling NAME
   with the Intel Fortran compiler on Windows systems. Eike Mueller had previously
   produced this file for version 6.0 (see ticket #16: Porting to Windows) but it
   was not copied into the main code trunk. The development file was imported
   into Visual Studio and updated to include:
    i) the new compiler directive 'UseConvert'
   ii) the new module file PhysicalUnits.F90.

f) Updated the Compaq Visual Studio files NameIII.dsp and NameIII.plg for use in
   compiling NAME with the Compaq compiler on Windows (as used by David Thomson).
   These files were changed for:
    i) the new compiler directive 'UseConvert'
   ii) the new module file PhysicalUnits.F90.
   The file NWPMet.F90 was also modified to only reference the OpenMP libraries
   for the Intel Linux and IBM compilers (as OpenMP is not supported by the
   Compaq compiler).

g) Updated the ReadMe.txt to reflect recent changes.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.1 of NAME III released 20/02/2012.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

08/03/2012

Ticket #66: Post-release activities following the freeze of version 6.1.

GlobalParameters.F90
Switched the 'ModelVersion' parameter to "NAME III (development version 6.1+)"
in preparation for future development activities on the code trunk.

Andrew Jones

!-------------------------------------------------------------------------------------

24/04/2012

Ticket #53: Urban wind profile

Wind and turbulence modifications added for representing an urban canopy when NWP met
is used with appropriate ancilliary files. 

Input.F90
FlowAndFlowProfile.F90
BuildingFlow.F90
LincomFlow.F90
NWPFlow.F90
PrototypeFlow.F90
SingleSiteFlow.F90
Changes.txt

A new scheme has been added for modifying urban wind profiles and turbulence.
This works with the land-use ancillary files from the UM and depends on there being
9 land-use tiles, with urban fraction on tile 6 (and hence is not currently compatible
with met data from other sources). A new input variable "Urban canopy?" has been added
to the "NWP Flow Module Instances" block to indicate that the urban canopy effects
are to be treated. The scheme is used by switching "Urban canopy?" to "Yes"
(the default is "No"), and otherwise setting up the run to use ancillary met data
in the normal way. To use the urban turbulence scheme it is also necessary to invoke
the near-source scheme (i.e. to specify a non-zero "Velocity Memory Time" and
"Inhomogeneous Time" in the "Sets of Dispersion Options" block).

However, the urban turbulence scheme does not currently provide acceptable vertical
particle distributions (even when running with the reduced timestep of the near-source
scheme) and requires further modification, and therefore its use is not presently
recommended.

Documentation with the details of the new scheme will be added soon.

Dave Thomson and Lois Huggett

!-------------------------------------------------------------------------------------

10/07/2012

Ticket #67: Add sensible error message when metcopyrestore fails

System.F90
Added some error handling code so that the run terminates with an appropriate error
message if metcopyrestore (or any other system command) fails due to lack of memory.

Imogen Heard

!-------------------------------------------------------------------------------------

14/08/2012

Ticket #52 - Add resuspended ash as a met dependent source

Case.F90
A request for Rain information has been added when handling a met dependent source
within the subroutine Release. This information is then passed through in the call
to the subroutine ParticleReleaseInfo in Source.F90.

Source.F90
Added "RESUSPENDED_ASH" as a met dependent source type in the function InitSource,
with the specific formulation of its met dependency given in the subroutine
ParticleReleaseInfo (this is based on precipitation and friction velocity).

Susan Leadbetter

!-------------------------------------------------------------------------------------

21/08/2012

Ticket #70 - Correct bug in DiffusionProcessRelect

Particle.F90 
Modify If test in DiffusionProcessReflect to correct bug for when sedimentation
velocity exactly cancels the ambient velocity (mean and turbulent) and particle
takes an infinite length of time to reach the deposition height.

Input.F90 and FlowAndFlowProfile.F90
Ran dos2unix on these files to convert to unix format (they had inadvertently
been changed to dos format during the urban changes).

Helen Webster

!-------------------------------------------------------------------------------------

03/09/2012

Ticket #54: Deposition changes

RadarFlow.F90
Subroutine GetRadarRain - Bug corrected in linear interpolation in time.

NWPFlow.F90
Subroutine CloudInfoFromMet - Cloud%ConCloud3d, Cloud%DynCloudWater,
Cloud%DynCloudIce and Cloud%DynCloud3d now obtained by 3d (+ time) interpolation
(was nearest neighbour). Cloud%ConCloudBase, Cloud%ConCloudTop,
Cloud%DynCloudBase and Cloud%DynCloudTop now obtained by special interpolation
(was nearest neighbour) which only interpolates between points where cloud
base/top defined.

GridAndDomain.F90
Introduce new subroutine InterpCXYT to interpolate cloud base and cloud top
(ignoring those points where cloud base/top are not defined).

Particle.F90
Subroutine WetDeposition
(i) Remove the orographic enhancement scheme.
(ii) Change from original method of calculating separate convective and dynamic
components of wet deposition. A total scavenging coefficient is now calculated as the
sum of two terms, total precipitation outside regions of convective showers and total
precipitation within regions of convective showers (Cf = convective cloud fraction)

  Lambda = (1-Cf) * A1*DynPpt^B1  +  Cf * A2*(DynPpt + ConPpt/Cf)^B2

For the first term, the scavenging coefficients A1 and B1 are chosen depending on
whether the particle is in or below dynamic cloud (i.e. whether Particle%X(3) <
DynCloudBase or whether DynCloudBase < Particle%X(3) < DynCloudTop). For the second
term, the scavenging coefficients A2 and B2 are chosen depending on whether the
particle is in dynamic or convective cloud or below both dynamic and convective cloud
(i.e. whether Particle%X(3) < Min(DynCloudBase, ConCloudBase) or whether
Min(DynCloudBase, ConCloudBase) < Particle%X(3) < Max(DynCloudTop, ConCloudTop)).
(iii) Ensure that scavenging coefficients for dynamic and convective precipitation are
the same. The reasons for this are that for high resolution UM data, convection is now
being resolved. This has resulted in the dynamic precipitation in-cloud coefficients
(both rain and snow) being altered to the convective coefficients. There is very
little reasoning behind the original in-cloud dynamic rain parametrisation that is
being replaced under this change.
(iv) The legacy subroutine WetDeposition_old has also been removed.

Input.F90 and Species.F90 - Increased number of scavenging coefficients in the input
file from 2 (A and B) to 8 (A and B for in-cloud / below-cloud and for rain / snow).
Relevant input file headers in the Species block are: 'A rain - BC', 'B rain - BC',
'A snow - BC', 'B snow - BC', 'A rain - IC', 'B rain - IC', 'A snow - IC',
'B snow - IC'. Added the extra scavenging coefficients to species type.

Updated all Species files appropriately.

Input.F90 - Removed 'Wet Dep?' column keyword from the Species block. Now superfluous
to requirements as wet deposition can be controlled by the A and B scavenging
coefficients.

Particle.F90 - All scavenging coefficients (A and B) have been moved from the
NAME Fortran code to the species block of the NAME input file and hence the
coding in the WetDeposition subroutine for aerosols has been removed. Any
scavenging coefficients must now be specified in the input file. If specified,
all A, B values should be >= 0. If the scavenging coefficients are all left blank
for a species, this species is not subject to wet deposition. Alternatively, setting
any A value to zero will deactivate that particular component of the wet deposition
scheme (e.g. below-cloud washout by rain is turned off by setting ABelowRain to zero).

Helen Webster

!-------------------------------------------------------------------------------------

12/09/2012

Changes made to add midge particles for bluetongue

Source.F90
Added a met dependent source for MIDGE species and specified its Met Dependency using
the 'midge equation' in the subroutine ParticleReleaseInfo in Source.F90.

Particle.F90
Added a test in the AgentDecay subroutine to remove midges when rainfall exceeds a
critical threshold. Flow and Rain information is now passed into this subroutine.

Case.F90
Flow and Rain passed to Call to AgentDecay.

Laura Burgin

!-------------------------------------------------------------------------------------

13/09/2012

Ticket #72: Increase flexibility of input/output formats

The memory allocation of "MaxFieldReqs" and "MaxFieldOutputGroups" is changed
from static to dynamic.

The maximum number of field requirements "MaxFieldReqs" and the maximum number
of field output groups "MaxFieldOutputGroups" can be now altered via the variables
'Max # Field Reqs' and 'Max # Field Output Groups', respectively, in the "Main Options"
input block. Default values are currently set, respectively, to 650 and 100.

GlobalParameters.F90
MaxFieldReqs and MaxFieldOutputGroups are removed as global parameters.

Case.F90
Added MaxFieldReqs and MaxFieldOutputGroups to the derived type MainOpts_
and related changes to subroutine InitMainOpts.

Input.F90 
The structure of "MainOptions:" block is modified to include 'Max # Field Reqs'
and 'Max # Field Output Groups' and their default values are set to 650 and 100,
respectively.
MaxFieldReqs and MaxFieldOutputGroups now passed as arguments of subroutine
InitMainOpts for storage in MainOpts_ type.
MainOpts%MaxFieldReqs and MainOpts%MaxFieldOutputGroups are also passed as arguments
of the function InitReqs.

Output.F90
The main changes regard:
i)  Changes to the derived types Reqs_ and Results_ to set up pointers.
ii) Related changes to the functions InitReqs and InitResults for dynamic allocation
    of memory. Also added comment line to an error message to notify that both
    "MaxFieldReqs" and "MaxFieldOutputGroups" can be altered via the variables
    'Max # Field Reqs' and 'Max # Field Output Groups' in the "Main Options"
    input block.

MainNameIII.F90
Reqs is passed as an argument of InitResults and WriteRestartFile is called with
the additional argument Reqs.

Restart.F90 
Reqs is passed as argument of the function WriteRestartFile (and related changes).

Elena Meneguz

!-------------------------------------------------------------------------------------

26/09/2012

Ticket #71: Mean vs instantaneous met changes

Changes to NAME related to changes to NAME met feeds (Mean cloud, cloud liquid
water / ice and precipitation data stored in a separate met file). Code changes 
now enable multiple suffixs and multiple met file structure definitions within
an NWP met definition (corresponding to multiple met files). Introduction of a
'Next Cloud' column keyword in the NWP met definition block to ensure mean cloud
data is not interpolated.

Input.F90 - 'Next Cloud' (default is 'No') column keyword added to the NWP met
definition block. 'No' invokes interpolation in time of cloud and cloud liquid
water / ice, 'Yes' turns off interpolation in time. A semicolon separated 
array of suffixs and met file structure definitions can now be listed. Note that
the number of elements in the suffix array must be equal to the number of
elements in the met file structure definition array and must equal the number of
metfiles containing met data for a given time. A NWP met module instance can now
have an array of NWP met definitions part 2.

NWPFlow.F90 - Subroutine CloudInfoFromMet: If NextCloud then do not interpolate
cloud and cloud liquid water / ice data in time.

NWPMet.F90 - In NWP met definition part 1, allow Suffixs and MetDefn2Names to be
arrays and a NextCloud flag and a nMetDefn2Names (the number of MetDefn2Names) 
variable are introduced. In NWPMet, allow MetDefn2s to be an array allocating 
multiple met definitions part 2 to one met definition part 1 and one state of a
NWP met module. Quantities which are derived from MetDefn2s (namely, iField, 
ThreeD, k1 and k2) are now 2-d arrays. OldMetFiles is also now an array. 
Modifications to InitNWPMetDefn, NWPMetDefnEq, InitNWPMet and 
SetUpNWPMet_CoordsEtc. In ReadNWPMet, MetFiles is now an array and we loop over 
met files for opening, reading and closing met files. Unit renamed MetFileUnits
since it is now an array (and units is already in use in ReadNWPMet). In 
ProcessNWPMet, a fix up added for possibility of cloud base / top being deemed 
to be below ground (due to conversion from pressure coordinates using incorrect 
pressure / temperature - interpolation of instantaneous values compared with 
non-interpolation in time of mean cloud values). Fix up for cloud base is 0.0m 
agl whereas for cloud top, the fix up is 10.0m agl to ensure that cloud base and
cloud top do not coincide.

GlobalParameters.F90 - Increase MaxNWPMetDefn2s from 8 to 16 (since double
number of met files under these changes).

Helen Webster

!-------------------------------------------------------------------------------------

03/10/2012

Bug fix to allow time-averaged output to be produced for volume mixing ratio 
quantities.

Output.F90 - Extra if clause added when handling time averaging in the subroutine
SetUpReqs. This sets species information if the requested quantity is 'Mixing Ratio'.

Claire Witham

!-------------------------------------------------------------------------------------

11/10/2012

Ticket #44: Bug in trajectory output in parallel runs.

Input.F90
Updated the test in the subroutine Tokens2PPInfoReqs to only write a warning message
if Sync is set to false in any request for particle-puff information in a parallel
thread run (when compiled under Intel on Linux). Previously a warning message was reported
even when trajectory output was requested at sync times (which should work correctly).
The test has also been moved to later in the subroutine to the location at which
the variable 'Sync' is defined.

Andrew Jones

!-------------------------------------------------------------------------------------

15/10/2012

Ticket #76: Activities associated with freezing of version 6.2.

Minor corrections and additions following a review of all existing changes since
version 6.1.

LincomFlow.F90
Replaced "profiledata%canopy" with "ProfileData%Canopy" in the subroutine
LincomFlowInfoFromMet (for consistency with standard NAME coding convention).

System.F90
Modified the error checking when using the Intel Linux compiler option in the
subroutine SubmitSystemCommand. The error number is only retrieved and tested now
if the system command fails. Also removed the other system call (and the variable 'I')
as these are superfluous here.

Species.F90
Updated comments in the Species_ type declaration concerning allowed values
for the various 'A' and 'B' wet deposition coefficients.

Source.F90
In the subroutine ParticleReleaseInfo, the local variable 'TFV' has been replaced by a
local parameter 'UStarCrit'. The type has also been changed from Real(8) to Real(Std).
Also removed various commented-out write statements in the met dependent source blocks
for Midge and Ash Resuspension.

Output.F90
Added an 'Intent(In)' attribute to the arguments MaxFieldReqs and MaxFieldOutputGroups
in the function InitReqs. Replaced "Size(Reqs%FieldReqs)" by "Reqs%MaxFieldReqs"
(which is available in the Reqs structure) in the subroutine AddFieldReq. Also
replaced "Size(Results%Fields)" by "Reqs%MaxFieldReqs" in the subroutine InitResults.
Corrected the error message text when checking the number of field output groups
in the subroutine SetUpiReqs.

Particle.F90
Revised the deactivation of midges in the AgentDecay subroutine to consider
total precipitation rather than the separate dynamic and convective components
individually. Specifically, the test

"(Rain%ConPpt > RainCrit) .or. (Rain%DynPpt > RainCrit)"

has been replaced by

"Rain%ConPpt + Rain%DynPpt > RainCrit".

Andrew Jones

!-------------------------------------------------------------------------------------

18/10/2012

Ticket #76: Activities associated with freezing of version 6.2.

GlobalParameters.F90
Increased the global parameter 'MaxDomains' from 20 to 25.
Although there is no immediate requirement for this increase, it is thought that
the maximum number of domains should be strictly greater than the maximum number of
allowed NWP flows (currently set to 20) because in general there are some domains
defined in addition to flow domains.

Also updated the 'ModelVersion' parameter to "version 6.2" and switched the label
from the 'development version' to the 'frozen version'.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.2 of NAME III released 22/10/2012.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

04/12/2012

Ticket #78: Post-release activities following the freeze of version 6_2.

GlobalParameters.F90
Switched the 'ModelVersion' parameter to "NAME III (development version 6.2+)"
in preparation for future development activities on the code trunk.

Ticket #77: Bug in cloud base and cloud top interpolation.

GridAndDomain.F90
Bug fixed in subroutine InterpCXYT, which is used to exclude from interpolation
those array points for which the (cloud base or cloud top) field is not defined.

Andrew Jones, Elena Meneguz

!-------------------------------------------------------------------------------------

13/12/2012

Ticket #79: Chemistry update

Chemistry.F90
H2O2 is now modelled on particles if the 'background particles' chemistry option is
chosen, in the same way as ozone is. This allows advection and deposition of H2O2.

Source.F90
Special treatment of a time dependency has been added for an ammonia source.
If a source is emitting ammonia, then a time dependency (e.g. seasonal and diurnal
cycle) can be applied specifically to the ammonia species. Other species emitted
from the same source are not affected. The ammonia cycle to be used must be included
in the set of input files as a time dependency labelled as 'Ammonia', and in the
sources file the ammonia sources need to reference this time dependency under the
'Time Dependency' column (in a similar way to the treatment of traffic cycles).

Alison Redington

!-------------------------------------------------------------------------------------

09/01/2013

Ticket #80: Chemistry tidy up

Chemistry.F90 and Input.F90
All code referring to chemistry modelling option 'O3_PlumeParticles' has been removed
as this option is no longer needed. The remaining options are 'O3_AsField' and
'O3_BackgroundParticles'. Two obsolete subroutines, SetEffectiveOzoneConc and
OzoneColumnDryDepAndMixing, have also been removed.

Alison Redington

!-------------------------------------------------------------------------------------

07/02/2013

Ticket #74: Volume/Area calculation in NAME

Change to the way NAME calculates the area of a grid box. This calculation is now done
explicitly by a separate subroutine, rather than by returning the metric coefficients
at the particle position, and is exact for a lat-long co-ordinate system (based on a
spherical earth assumption).

Previously it was assumed that the grid box would be small and that the change in
latitude across the grid box was negligible and so latitude could be approximated by
the position of the particle. Now change in latitude across the grid box is calculated
explicitly. 

GridAndDomain.F90
New subroutine CalcArea added which calculates the area of a grid box explicitly.

Particle.F90
In subroutine ParticleConc the call to MetricCoeffs has been replaced with a call to
the new subroutine CalcArea.

Frances Beckett

!-------------------------------------------------------------------------------------

14/02/2013

Ticket #65: Eulerian transport model

An Eulerian advection model has been included in NAME.

Added two new modules EulerianInterface.F90 and SemiLagrangian.F90.

Case.F90
Added new logical variable EulerianModel to the DispOpts_ type to indicate that
Eulerian advection calculations are to be performed. Use of Eulerian fields is
requested using the 'Eulerian Model?' flag in the 'Sets of Dispersion Options:'
input block, and this value is passed as an extra argument EulerianModel to
the subroutine InitDispOpts. The global variable EulerianModelGlobal is also
set to the same value here, but in the longer term this should be removed and
DispOpts%EulerianModel should be used directly.

New variable EulerianField added to the DispState_ type to store Eulerian fields.
This is initialised by a new subroutine SetUpEulerianField which is called from
PrepareForNextCase. Changes have been made to RunToSyncTimeOrMetFlowUpdateOrEndOfCase
to call the semi-Lagrangian advection scheme.
New subroutine Particles2Fields to coordinate the transfer of mass on particles to
the Eulerian fields after a specified transition time, and then remove the relevant
particles.
Updated subroutine CalcEulerianResults to calculate outputs from Eulerian fields
(as well as the existing outputs from chemistry fields). DispState is now passed as
an argument to the subroutine CalcEulerianResults. The relevant grids are identified
(according to whether Eulerian fields or chemistry fields are being requested) and
the concentration values are extracted from the relevant array.

Particle.F90
New subroutine ParticleSourceTermForFields added to calculate the contribution to
Eulerian fields from a particle.

Output.F90
Added extra quantity to the list of output field requests, "Eulerian Concentration".

GridAndDomain.F90
Added new subroutine InterpolateField to perform linear time-interpolation of
an Eulerian field.

Input.F90
Updated the pair of subroutines DispOptsesInputNames and Tokens2DispOptses to include
the keyword variable 'Eulerian Model?' in the 'Sets of Dispersion Options:' input
block. This variable has a default of No. The input value is passed as an extra
argument in the call to InitDispOpts.

FlowAndFlowProfile.F90
Added new variable EtaDot to the Flow_ type.

NWPMet.F90
Added new global variable EulerianModelGlobal to control the Eulerian advection
calculations. This should be replaced by DispOpts%EulerianModel in due course.
Added new pointers for allocatable arrays EtaDot and EtaDotNoTFix to the NWPMet_ type,
which are allocated and used only when the Eulerian advection scheme is applied.
The subroutine CalcZAboveGroundDot has been modified to enable calculation of eta dot
(instead of rate of change of height above ground) for the semi-Lagrangian scheme.

NWPFlow.F90
Added call to interpolate eta dot in the flow information when using Eulerian grids.

NameIII_sources
Added the new module files EulerianInterface.F90 and SemiLagrangian.F90 to the
list of source files processed by the Makefile.

Ben Devenish

!-------------------------------------------------------------------------------------

22/02/2013

LinuxIntelRelease
LinuxIntelRelease_GribAPI
LinuxIntelDebug
Included the new module files EulerianInterface.F90 and SemiLagrangian.F90 into the
Linux compilation scripts.

Ben Devenish

!-------------------------------------------------------------------------------------

22/02/2013

Case.F90
Bug fix in PrepareForNextCase. The call to set up Eulerian fields is now only made
if the Eulerian advection scheme is being used (i.e. DispOpts%EulerianModel is true).

Ben Devenish

!-------------------------------------------------------------------------------------

04/03/2013

Ticket #4: Allow more flexibility for units of output fields

Added ability to output chemistry field species as volume mixing ratios.

Output.F90
Added extra output quantity, "E Mixing Ratio", where the "E" stands for "Eulerian".
Much of the code for EMixingRatio has been copied and modified from the code
developed by Eike for the variable MixingRatio, so there are many similarities.
The variable iChemField has been introduced to the FieldReq_ type, which replicates
the role of iAirConc for MixingRatio.
A new subroutine DeriveEMixingRatio has been created to do the conversion from air
concentration to ppb or ppm. Note that in order to get this to work the molecular
masses of the current chemistry field species have been hardwired in this routine.
The subroutine OutputFields has been updated to write appropriate units for the
EMixingRatio outputs.

Claire Witham

!-------------------------------------------------------------------------------------

06/03/2013

Ticket #81: Minor tweaks to wet scavenging coefficients for in-cloud ice

Particle.F90
In the subroutine WetDeposition, the in-cloud parameterisation has been changed to
use the rain scavenging parameters above 273.15K, the ice scavenging parameters
below 238.15K and in between, in the mixed phase, to interpolate between the ice
and rain scavenging coefficients.

The in-cloud ice A scavenging parameter has also been revised for various species
(see /Resources/Defns/Changes.txt for details).

Helen Webster

!-------------------------------------------------------------------------------------

13/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

Minor corrections and additions following a review of all existing changes since
version 6.2.

Chemistry.F90:
Further changes have been included to consolidate the changes of 09/01/2013
(removal of the "Plume Particles" option for modelling ozone).
The 2-d arrays O3DryDeposition and BLOld have been removed from the ChemistryState
derived type as these arrays were obsolete. Similarly the two local parameters
VdOverLand and VdOverSea are no longer required and have been removed.

Input.F90:
In the subroutine ChemOptsInputNames, the default value for 'Ozone Modelling Method'
in the 'Chemistry Options' input block has been changed from "Plume Particles"
to "Ozone Field".

GlobalParameters.F90:
The global parameters MinZForUniformChemLevels and MaxdZForUniformChemLevels have
been removed. These parameters were previously used with the "Plume Particles"
chemistry option to test that chemistry layers had a uniform depth up to a certain
altitude. This test is no longer required.

Source.F90:
Revised the special treatment of a time dependency for an ammonia source in the
subroutine ParticleReleaseInfo to use case-insensitive tests on the names of the
time dependency and species. The revised code performs a case-insensitive test
for a time dependency called "AMMONIA" and will then only apply that time variation
to the ammonia species. This is more consistent with the general approach in NAME
and will help to avoid incorrect behaviour when, e.g., users call their dependency
"ammonia" or "Ammonia".

GridAndDomain.F90:
Minor changes to comments in new subroutine CalcArea.
The subroutine InterpolateField has been removed as it is not used.

SemiLagrangian.F90:
Use of the Global Parameters module has been replaced by the Service module, as
the Service module is specifically intended to provide the basic set of core
functionality to the other modules.
Removed the local definition of Pi as a parameter, because Pi is set globally in
the Maths module.

Particle.F90:
Renamed the subroutine ParticleSourceTermForFields as ParticleEulerianFields, which is
more consistent with the established naming convention in this section of the code.
Also updated this subroutine to use the new subroutine CalcArea to calculate the area
of a grid box (similar to the change recently implemented in ParticleConc).
The code has also been tidied up, removing the logical variable 'Unstructured' (as
this is not used here) and improving the code structure when testing for a variable
vertical grid.

Case.F90:
In Particles2Fields, the call to the subroutine ParticleSourceTermForFields has been
updated to the revised name of this subroutine, ParticleEulerianFields.
Removed the duplicated assignment of pointers for chemistry fields.

NWPMet.F90:
Revised the subroutine UpdateNWPMet to correctly allocate and assign the two arrays
EtaDot and EtaDotNoTFix in an instance of the NWPMet_ type. Minor changes elsewhere
to improve code readability and include some additional comments.

Andrew Jones

!-------------------------------------------------------------------------------------

20/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

CatCode and CatCode.bat:
Updated these two scripts for concatenating the NAME source code under Linux and
Windows, respectively, to account for new modules recently added.

Andrew Jones

!-------------------------------------------------------------------------------------

20/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

GlobalParameters.F90
Updated the 'ModelVersion' parameter to "version 6.3" and switched the label from
the 'development version' to the 'frozen version'.

Andrew Jones

!-------------------------------------------------------------------------------------

21/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

EulerianInterface.F90
Wrapped the argument list of the subroutine EulerianFlowField onto two lines, as
the original list exceeded the recommended maximum line length.

EulerianInterface.F90
SemiLagrangian.F90
Cleaned up trailing spaces in the lines of source code for these two modules.

Andrew Jones

!-------------------------------------------------------------------------------------

22/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

NameIII.vfproj
Added the two new module files EulerianInterface.F90 and SemiLagrangian.F90 to
the list of source files for NAME compilation using the Intel Fortran compiler
on Windows.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.3 of NAME III released 26/03/2013.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

26/03/2013

Ticket #82: Activities associated with freezing of version 6.3.

GlobalParameters.F90
Switched the 'ModelVersion' parameter to "NAME III (development version 6.3+)"
in preparation for future development activities on the code trunk.

!-------------------------------------------------------------------------------------

17/07/2013

Ticket #85: Chemistry Restructure.

The treatment of chemistry has been restructured to enable alternative chemistry 
schemes to be used relatively easily.

The Chemistry.F90 module has been split into Chemistry.F90 and ChemistryScheme.F90.
ChemistryScheme.F90 contains the explicit information particular to the chemistry 
scheme and is the module that can be replaced with alternative schemes. The array
'Conc' is passed from Chemistry.F90 to subroutine ChemistryScheme in 
ChemistryScheme.F90 and contains all the species concentration information, from both 
species carried on particles and fields. Any hardwiring for a specific chemistry 
scheme outside the ChemistryScheme.F90 file has been, with some minor exceptions (e.g. 
relaxation of ozone to background if there are no particles in the grid box), removed. 
In particular, each of the various species used by the chemistry scheme can be carried 
on either particles or on a field, although of course not all choices here may be 
appropriate, at least until an option to advect the fields is added (the fields used 
here are currently distinct from the advected Eulerian fields).

A new type called 'FieldSpecies', identical in structure to 'Species', has been 
introduced, along with 'FieldSpecieses', identical to 'Specieses'. These are for 
storing information on the species which are carried on fields. 

In the type ChemOpts, the type component "OzoneMethod" has been removed and the code 
relating to the 'O3 on background particles' and 'O3 as a field' options has been 
removed. The equivalent functionality is now controlled by whether ozone is listed in 
the Specieses or FieldSpecieses types.

GlobalParameters.F90: MaxFieldSpecies has been added, and MaxChemFields has been 
removed.

In the mass assignment, when the precursor species is held on a field the species is
distributed uniformly over the available particles.

The mass assignment for CH3CHO has been changed - instead of fractions 0.4, 0.3 and 
0.3 assigned to NO, O3 and C3H6 particles, we have fractions 0.5 and 0.5 assigned to 
NO and C3H6 particles. The change was made to avoid CH3CHO being lost if O3 is held on 
fields, although in fact, after the chemistry restructuring described here, in this 
case the fraction that would have gone to O3 would have been distributed uniformly 
across particles.

The user must be aware that, as was previously the case, only species on particles are 
subject to deposition processes.

An error in the deposition calculation has been corrected in Particle.F90. The default
laminar sublayer resistance (8/u*) has been moved inside the species loop so that it
is reset to the default after being altered by any species which uses a different 
value.

To run with Chemistry, the user now needs to include in the input file(s) a "Species:"
block and a "FieldSpecies:" block, giving the species to be stored on particles and 
fields respectively. Additional species not used by the chemistry scheme can be 
included and the order in which the species are listed is no longer important. The 
various example species files for chemistry runs given in the Defns folder (e.g. 
NAMEChemistrySpecies.txt) now include both "Species:" and "FieldsSpecies:" blocks.

In the "FieldSpecies:" block, the quantity 'Category' is used to indicate if a species 
is one which must be initialised from a field read from a file. Currently only H2O2 
and O3 have this possibility in the code, and they are then read in from the STOCHEM 
fields as before. The category must be set to 'CHEMISTRY-FIELD-INIT' if the field is 
to be initialised from a file and to 'CHEMISTRY-FIELD' if the field is to be 
initialised to zero. (Species on particles have category 'CHEMISTRY-SPECIES' as 
before, although, again as before, the category has no effect for species on particles 
except that it is reproduced in the output.) The "FieldSpecies:" block only needs to 
contain "Name", "Category", "Molecular Weight" and "Material Unit".

In the "Chemistry Options:" block, 'Ozone modelling method' has been removed as the 
equivalent functionality is now controlled by whether ozone is listed in the 
"Species:" or "FieldSpecies:" blocks. 

As part of the chemistry work it has been necessary to make some changes to the way
the physical units conversions for output are handled. The main motivation was to 
remove the hard coding of molecular weights which are used for converting 
concentration to mixing ratio for the chemistry field output and which was necessary 
for the flexible chemistry framework. However as part of this we have also 
rationalised a number of other aspects:
  Chemistry Field output - units for time integrated values corrected;
  Chemistry Field output - unit conversions now supported;
  Mixing Ratio and E Mixing Ratio output - default units used if not user specified.
  Mixing Ratio and E Mixing Ratio output - probabilities and percentiles now work;
  Eulerian Concentration output - unit conversions now supported;
  Probability distributions of non-convertable quantities such as met quantities - 
    attempt to convert these removed.
  Two requests for time averaged mixing ratio which are identical except for units
    - corrected so that both are output in the correct units rather than both 
    following the units of the first request.
  Two air concentration requests which are identical except for units, with both given 
    the same name (i.e. not unnamed) - corrected so that the second one is no longer 
    completely ignored. These last two issues were due to FieldReqEq not checking the 
    units. 

Note the unit conversions only apply to the following output quantities:
  Air Concentration
  Dry Deposition Rate
  Wet Deposition Rate
  Deposition Rate
  Chemistry Field
  Eulerian Concentration
  Mixing Ratio
  E Mixing Ratio
The unit conversions are carried out at the following points:
  Mixing Ratio and E Mixing Ratio - at the point of calculating the mixing ratio.
  Probabilities (but not for mixing ratios) - at the point the probabilities are 
    calculated.
  Other quantities (including percentiles) - at the end of the processing of the 
    output.
Chemistry Field and E Mixing Ratio use the FieldSpecieses derived type and the
other quantities use the Specieses derived type.

Files for Microsoft Developer Studio (used by Compaq Fortran) updated to reflect
addition of the files EulerianInterface.F90, SemiLagrangian.F90 and 
ChemistryScheme.F90 and to include the addition of the UseConvert directive in the
release version of NameIII. Files for the Microsoft Visual Studio (used by Intel
Fortran) updated to reflect addition of ChemistryScheme.F90.

Alison Redington and Dave Thomson

!-------------------------------------------------------------------------------------

15/08/2013

Ticket #89: Bug fix - outputting soil moisture

Added missing coding to populate the output field with soil moisture values when
this is requested as an output.

Case.F90
Added Q_SoilMoisture to list of parameters used from OutputModule.
Added Q_SoilMoisture to case statement which populates the output value with a
large negative number if the SurfaceErrorCode is greater than 0 (i.e. no surface
data is available).
Populated the output value with Surface%SoilMoisture for case Q_SoilMoisture.

Helen Webster

!-------------------------------------------------------------------------------------

10/09/2013

Ticket #84: Update NAME to treat cloud properly under PC2

Background: Under PC2 (global from 14 July 2010 (part way through UMG_Mk6)) and
for ECMWF data, resolved cloud (previously referred to as dynamic cloud) is, in
fact, total cloud. For these models resolved precipitation is still, however, the 
dynamic / large-scale component and not total. Some changes are therefore required to 
NAME to ensure that total cloud is not, in these cases, calculated by combining the 
resolved and convective components. Note that UKV data also provides total cloud but 
also total precipitation since there are no convective components to either. [Here 
'resolved' refers to the total-or-dynamic cloud output by these models - there is no
ideal single word for this.]

User requirements: The only user requirements are to use up to date met definition
files with altered names for what used to be the dynamic cloud fields (see list of 
names below) and with the additional column "Field Qualifiers" (see description 
below) in the NWP Met File Structure Definition block.

Details:

Throughout (includes NAME code innards, met definition files and output requests) 
we have changed the names of dynamic cloud objects to reflect that these could
be dynamic or total cloud objects (e.g. Dyn --> TotalOrDyn). 

Added an additional column "Field Qualifiers" to the NWP Met File Structure 
Definition block. This column is relevant to the high, medium and low (total or 
dynamic) cloud amount and (total or dynamic) cloud liquid water / ice fields. For 
PC2 and for ECMWF and UKV data, Field Qualifiers is 'Total'; for other (older) data
Field Qualifiers is 'Dynamic'. The code checks that all the cloud fields 
associated with a met definition have consistent Field Qualifiers. Field 
Qualifiers can be entered as a semicolon separated list (currently up to 4 Field 
Qualifiers per field are allowed) allowing this column to be used in future for 
other things (Next heat flux etc.) although currently only 'Total' or 'Dynamic' 
are permitted values (but not both). If no Field Qualifiers are specified for
cloud stashes then NAME assumes they are dynamic. Parameter MaxFieldQualifiers added
to GlobalParameters.F90.

Changed the NWPMet derived type to have total cloud amounts (3d and 2d) and
convective cloud amount (2d) but not dynamic cloud amounts (2d and 3d) and not 3d 
convective cloud amount. Added a logical flag TotalCloudFlag to denote if 
TotalOrDyn cloud stashes (cloud liquid water, cloud ice, cloud base, cloud top and
low, medium and high cloud amounts) are total (TotalCloudFlag is true) or dynamic 
(TotalCloudFlag is false) values. 


NWPMet_ type:
=============
Original                               New
--------                               ---
Read in from met: DynHCloud            Read in from met: TotalOrDynHCloud
                  DynMCloud                              TotalOrDynMCloud
                  DynLCloud                              TotalOrDynLCloud
                  ConCloud                               ConCloud
                  ConCloudBase                           ConCloudBase
                  ConCloudTop                            ConCloudTop
                  DynCloudWater                          TotalOrDynCloudWater
                  DynCloudIce                            TotalOrDynCloudIce
                                                         TotalCloudFlag
Calculated:       DynCloud             Calculated:       
                  DynCloudBase                           TotalOrDynCloudBase
                  DynCloudTop                            TotalOrDynCloudTop
                  DynCloud3d                             
                  ConCloud3d                             
                                                         Cloud
                                                         Cloud3d
                                                        
The Cloud derived type is also similar to the above:

Cloud_ type:
============
Original            New
--------            ---
ConCloud            ConCloud
ConCloudBase        ConCloudBase
ConCloudTop         ConCloudTop
DynCloudWater       TotalOrDynCloudWater
DynCloudIce         TotalOrDynCloudIce
DynCloud            
DynCloudBase        TotalOrDynCloudBase
DynCloudTop         TotalOrDynCloudTop
DynCloud3d          
ConCloud3d          
Cloud               Cloud
Cloud3d             Cloud3d
                    TotalCloudFlag (Note that this is currently not used although
                                    defined)
                    

The occult deposition scheme has been changed to use total 3d cloud amount
(instead of dynamic 3d cloud amount). Other schemes (e.g., wet deposition) which use
some of the TotalOrDyn cloud data (i.e., TotalOrDynCloudWater, TotalOrDynCloudIce,
TotalOrDynCloudBase or TotalOrDynCloudTop) will in some cases use total values and in
some cases use dynamic values but since only one value (dynamic or total) is available
and never both, this is the best that can be done.

Further Details:

Throughout (including in NWPMet and Cloud derived types), renamed dynamic cloud 
names to reflect that these could be either total cloud or dynamic cloud:
Q_DynCloudWater --> Q_TotalOrDynCloudWater
Q_DynCloudIce   --> Q_TotalOrDynCloudIce
DynCloudWater   --> TotalOrDynCloudWater
DynCloudIce     --> TotalOrDynCloudIce
DynCloudBase    --> TotalOrDynCloudBase
DynCloudTop     --> TotalOrDynCloudTop
DynHCloud       --> TotalOrDynHCloud
DynMCloud       --> TotalOrDynMCloud
DynLCloud       --> TotalOrDynLCloud
F_DynCloudWater --> F_TotalOrDynCloudWater
F_DynCloudIce   --> F_TotalOrDynCloudIce
F_DynHCloud     --> F_TotalOrDynHCloud
F_DynMCloud     --> F_TotalOrDynMCloud
F_DynLCloud     --> F_TotalOrDynLCloud

Changes to 2d and 3d field names (in NWPMet.F90 and in met definition file):

dynamic cloud liquid water (kg/kg) --> cloud liquid water (kg/kg)
dynamic cloud ice (kg/kg)          --> cloud ice (kg/kg)
dynamic high cloud amount (0-1)    --> high cloud amount (0-1)
dynamic medium cloud amount (0-1)  --> medium cloud amount (0-1)
dynamic low cloud amount (0-1)     --> low cloud amount (0-1)

Information on whether the field is dynamic or total is now given in the Field 
Qualifiers column of the NWP Met File Structure Definition block.

Changes to output quantity requests:
Dyn Cloud Water (kg/kg) --> Cloud Water (kg/kg)
Dyn Cloud Ice (kg/kg)   --> Cloud Ice (kg/kg)
Note that these could be dynamic or total values depending on TotalCloudFlag.

In subroutine CalcCloudInfo in NWPMet.F90, parameters LCloudBotZSea, LCloudTopZSea, 
MCloudTopZSea and HCloudTopZSea have been corrected to exact values (111.0, 1949.0, 
5574.0 and 13608.0, respectively). 

Helen Webster

!-------------------------------------------------------------------------------------

17/12/2013

Ticket #83: New version of Eulerian model.

Principal additions:

SemiLagrangian.F90 - made changes that allow for limited area model.

EulerianInterface.F90 - changes to initialisation of EulerianField derived type 
                        including differentiation between gaseous and solid species
                        and solid species with multiple sizes
                      - absorbing boundary conditions for limited area model
                      - sedimentation of fields representing solid species
                      - Crank-Nicolson solver for vertical diffusion of scalar fields. 

Case.F90 - separate calls to Eulerian solver for gaseous and solid species
         - Particles2Fields now uses a source-dependent transition time from 
           Lagrangian particles to Eulerian field; subroutine selects for transition 
           only the species permitted on the Eulerian field
         - CalcEulerianResults sums over solid species with multiple sizes.

Input.F90, Source.F90 - handling user-defined time for transition from Lagrangian 
                        particles to Eulerian fields.

Species.F90 - introduced a 'species use' type with various attributes necessary for
              running Eulerian model e.g. species-dependent density and particle size 
              bins. NB: These are separate from the similar quantities in the Species 
              input block (this block contains a diameter which, even for Lagrangian 
              calculations, doesn't influence sedimentation and so it seems 
              inappropriate to use that for Eulerian sedimentation) and in the source 
              block (this block has a density and diameter or diameter distribution, 
              but the values can vary from particle to particle). Also these 'species 
              use' quantities are not yet input to the code.

GlobalParameters.F90 - increased the global parameter MaxColumnKeys from 72 to 73.

Input changes: The quantity "Lagrangian-Eulerian Time", specified in the "Sources" 
block is used to control the travel time at which material is moved onto the Eulerian 
field.

Ben Devenish

!-------------------------------------------------------------------------------------

18/09/2014

Ticket #100: Improving pole treatment

Particle trajectories calculated by converting to Cartesian coordinates when in a 
lat-long coordinate system to give more realistic trajectories near the pole.
Subroutine TrajectoryCalc added to Particle.F90 called from subroutine EvolveParticle.

No input changes required.

Vibha Selvaratnam

!-------------------------------------------------------------------------------------

10/10/2014

Ticket #104: Read UKPP and EuroPP Precipitation

Reading of radar met data has been made more flexible and aligns the handling of
radar met more closely with that of NWP met data (in particular, by the use of
a 'definition file' to describe the radar data set and how it should be treated
by NAME). The changes have specific application to enable NAME to read radar-derived
fields from the Met Office's UKPP and EuroPP precipitation analyses. Additionally,
the same interpolation routines used for the NWP met variables are now used for the
radar precipitation field. The revised code replaces existing, and rather inflexible,
code to read instantaneous precipitation from a 'Nimrod' radar file.

The above changes to the model code are general enough so that we are able to read
precipitation, precipitation type, cloud, snow probability, etc. from the UKPP and
EuroPP datasets into NAME. However at present NAME can only use precipitation rates
and, although the mechanism is now in place to read other fields, there is no NAME
code yet in place to utilise them.

A summary of the code changes is given below:

GlobalParameters.F90
New parameters MaxRadarMetFields, MaxRadarMetDefns and MaxRadarMetDefn2s have been
introduced to read radar met definitions. The existing global parameters
MaxRadarMets and MaxRadarFlows have been increased from 1 to 2 to allow multiple
instances of a radar met and flow module.

Input.F90, RadarMet.F90
New input blocks "Radar Met Definitions:" and "Radar Met File Structure Definition:"
have been added to read radar met definitions. The existing "Radar Met Instances:"
block has been revised and is now similar to the corresponding NWP met instances
block (e.g. with functionality to allow restore or delete of radar met files).
All structural information on the radar met data is now stored as part of the
radar met definition.

Further changes to RadarMet.F90
New set up routine "SetUpRadarMet_CoordsEtc" added for handling the radar met
module. The subroutine "ReadFFE" has been replaced by a new subroutine "ReadRadarMet"
which has the same structure as the routine for reading NWP met fields. Note that
'skipping' of missing radar files is supported by the new code. The specific
routine for reading NIMROD-formatted files "NIMROD_OPEN_IREAD" has been replaced by
a new, more flexible, subroutine "ReadRadarField". Note that code exists within
the "ReadRadarMet" and "ReadRadarField" subroutines to support reading GRIB format
radar files if the upstream processing systems move to GRIB.

MainNameIII.F90
New controlled messages have been introduced for "Inconsistent radar validity time",
"Inconsistent radar met header" and "Missing radar met field".

RadarFlow.F90
Initialisation of the 'common flow' details has been moved from the function
"InitRadarFlow" to a new subroutine "SetUpRadarFlow_MetsCoordsEtc". The subroutine
"GetRadarRain" for extracting rain information at a particular position has been
revised. The routine now uses the same interpolation routines as used for NWP met
fields (previously the nearest Nimrod grid point was used).

Mets.P90, Flows.P90
Added calls to set up routines for Radar Met data.

Ian Edmond and Andrew Jones

!-------------------------------------------------------------------------------------

15/10/2014

Ticket #101: New Convection Scheme.

Main changes in Particle.F90 with the addition of new subroutines DeepConvectionNew, 
Subsidence, Updraughts and Polint. The existing subroutine DeepConvection has been
renamed DeepConvectionOld.

Other changes in NWPMet.F90, NWPFlow.F90, FlowAndFlowProfile.F90, Case.F90,
Input.F90, Flows.P90 and Output.F90 are summarised below.

a) Calculation of Cloud%ConCloudBasePa and Cloud%ConCloudTopPa (in NWPMet.F90), 
   interpolation to particle position (in NWPFlow.F90) and addition to the derived 
   type Cloud_ (in FlowAndFlowProfile.F90).

b) Added freezing level to type NWPMet_ (in NWPMet.F90), interpolation to particle 
   position (in NWPFlow.F90) and addition to the derived type Flow_ 
   (in FlowAndFlowProfile.F90).

c) Calculation of particle position in pressure coordinate, XPa, in Case.F90.

d) In Case.F90, both calls to DeepConvectionOld and DeepConvectionNew 
   (these subroutine being mutually exclusive) are inserted after call to DryDeposition 
   and WetDeposition (this is done only for particles but not for puffs where the 
   location of the call to DeepConvectionOld has been left unchanged). 
   A test is added before the call to DeepConvectionNew to activate the call
   only if Rain%ConPpt > 0.0 and both Cloud%ConCloudBasePa and Cloud%ConCloudTopPa > -1 
   at the particle position.

e) The option to run NAME with the new convection scheme in Backwards mode has been 
   temporarily disabled (an error message will appear on the screen and the run will be 
   stopped if the user attempts to request it). Changes made in: Particle.F90, 
   FlowAndFlowProfile.F90 and Flows.P90.

Input changes required:

Acceptable options for user to enter under the block 'Sets of Dispersion Options', 
keyword: 'Deep Convection?' have been altered from 'Yes' or 'No'/blank space to 
'Old'/'New' or 'No' in order to allow the user to make a choice between the two
convective schemes currently available (changes made in Case.F90, Input.F90).
As part of this change, the variable DispOpts%DeepConvection has been changed from
a logical to a character type.

Output changes (optional):

'Convective Cloud Base' and 'Convective Cloud Top' have been added as possible
output requests under the block 'Output Requirements - Fields:'.
Values are returned in m agl. Changes made in Case.F90, Output.F90.

Elena Meneguz

!-------------------------------------------------------------------------------------

21/10/2014

Ticket #90: Combining Chemistry and Eulerian Model.
Ticket #91: Dry deposition velocity restructuring.
Ticket #92: Making deposition velocity accessible to Eulerian model.
Ticket #93: Wet deposition scavenging coefficient restructuring.
Ticket #94: Wet deposition in Eulerian Model.
Ticket #95: Allow particle with multiple species to continue to exist once some 
            species' mass transferred to field.
Ticket #96: Correct various errors regarding species' indices.
Ticket #97: Updates to Eulerian model and bug fix.

This changes item is a summary of changes made from 18/12/2013 to date aimed mainly at
rationalising the chemistry and Eulerian models and the way they work together, as 
well as enhancing the Eulerian model. Various associated minor changes and tidying up 
of code are not listed explicitly.

(i) In ChemistryUpdate, column information was replaced by single grid point 
information and the two Z-loops merged. This reflects the absence of a need to treat a 
column at a time following the removal of the "plume particles" chemistry method.

(ii) A single species list has been introduced with subsets for species stored on 
particles and on fields, and with the latter split into advected and static fields. 
The possible uses of a given species are stored in a SpeciesUses type (introduced 
previously - see change dated 17/12/2013 above - but in a different form with more 
limited functionality). 

In detail, code was written for input of information on "Species Uses", for storing 
this information in an array of SpeciesUses types in the Specieses structure, and for 
making use of the information. Indices were set up in Specieses for relating species, 
species uses, species on particles, and species on fields. Changes to the rest of the 
code were made to allow the species carried by particles to be a subset of all the 
species. In particular DispState%ParticleMasses, and DispState%PuffMasses now store 
masses for only a subset of the species. DispState%MaxSpecieses, renamed 
Dispstate%nParticleSpecieses, holds the number of species in this subset. This change 
also propagates extensively to various routines and variables. The FieldSpecies 
structure and associated code has been removed. MaxSpecieses increased to 52 and 
MaxFieldSpecieses removed. 

(iii) Particle size distribution code moved to its own module. It is now possible to 
include densities and representative diameters for each size range. The densities and 
representative diameters are only used (at present) with advected fields.

(iv) Species category is now output in the column headers for "Chemistry Fields" and 
"E Mixing Ratio".

(v) Static chemistry and advected fields unified and stored together. The zero height 
level on the main Eulerian grid (i.e. the one without the "Z on boundaries" flag) has 
been removed with associated changes to the grid level index used to calculate the 
deposition velocity. Chemistry calculations now use the same grid as the Eulerian 
model. The set-up routines in Chemistry.F90 and the ChemistryDefn_ and Specieses_ 
derived types have been rationalised. ChemistryUpdate renamed UpdateChemistry. 
Initialisation of chemistry fields and chemistry background fields moved to 
UpdateChemistry. Chemistry restart read/write routines updated consistently with the 
chemistry changes. Parameter added in Species.F90 to allow concentration fields to be 
Real(8) or Real(4) for reproducibility of chemistry runs with previous results. The 
Eulerian code has been modified to allow the presence of static fields in its arrays. 
iOld/iNew logic for Eulerian fields revised, in particular to work with static fields.
The EulerianModel switch has been removed, with the decision to run the Eulerian code 
now different for different parts of the code. E.g. some allocations needed even if 
only static fields present, some parts only needed if advected fields are present. 

(vi) Chemistry code adapted to work with z-based eta coordinate systems. Hence 
advection of fields used with chemistry is now possible if such a coordinate system is 
used (note that only if the coord system specificed is a z-based eta system can fields 
be advected). But there may still be difficulties with advecting fields for species 
used in chemistry which are held on both particles and fields (due to issues in the 
routine UpdateParticleMasses and the need to assign the mass back to some mixture of 
the particles and the field). 

(vii) Output of combined particle and field concentration added. The field component 
is always calculated at sync times while the particle component can, under user 
control, be calculated at sync times or not.

(viii) Dry Deposition restructuring:

Move of the dry deposition velocity calculation (including the contribution due to
sedimentation) and the surface resistance calculation for the land use dry deposition
scheme out of Particle.F90 to Species.F90 so that it can be accessed by the Eulerian 
model. Various associated minor changes made.

(ix) Wet deposition restructuring:

Calculation of a scavenging coefficient moved from the WetDeposition subroutine
in Particle.F90 into a function CalcWetScavCoeff in Species.F90 so that the
calculation of a scavenging coefficent can be accessed by the Eulerian model. 
The CalcWetScavCoeff function also includes the fix ups for cloud base and cloud
top if there is no cloud but non-zero precipitation (i.e. cloud and
precipitation are out of sync). (Note that these fix ups are not new but just 
moved from the WetDeposition subroutine in Particle.F90).

(x) Eulerian model changes:

Eulerian model adapted to make use of the deposition velocity calculation code, to 
store the deposition velocity, and to use it in the vertical diffusion calculation.

Changes to EulerianVerticalDiffusion subroutine to allow for variable air density. 

Added the capability to calculate wet deposition from a scalar field. Scavenging 
coefficient calculated in subroutine 'EulerianFlowField' using the CalcWetScavCoeff 
subroutine and stored in EulerianField type. Calculation of change in scalar 
concentration performed in subroutine 'RunToSyncTimeOrMetFlowUpdateOrEndOfCase' in 
Case.F90. 

Output of Eulerian fields is now based not on nearest grid point in the vertical but 
on the boundary levels between which the point lies (as was the case previously for 
chemistry fields).

Restartability implemented for Eulerian model.

Note advection of fields will only work on a z-based eta grid (as before). 

Once the transition time to fields has been reached, a particle is no longer killed 
off if the particle is carrying species or particles sizes which are not set up to 
be carried on fields; these species will remain on the particle. 

Eulerian model bug fixes: the indexing used to relate species and fields corrected; 
Concentration array in ParticleEulerianFields declared as (-1:,-1:,:,:,:) to cope with 
"halo"; lower bounds of dummy arguments in EulerianVerticalDiffusion corrected to cope 
with halo; halo added for EulerianField%ModifiedW; halo treatment in FillGlobalHalo 
corrected (it shouldn't be periodic in latitude); change in SemiLagrangian module to 
prevent trajectories passing through the ground undetected and without correction;
sign of sedimentation velocity corrected.

(xi) UseConvert flag added to Windows debug version with Intel compiler. This aligns
debug and release versions.

(xii) Controlling end of run:

Use of the "E" option in Output Format removed. Runs now always continue to the end 
of the output request (or the end of the computational domain if earlier).
 
Met is now always read (or prepared for reading if update-on-demand is used) for as 
long as the run continues. This is an efficiency loss for runs which have potential to 
be long but lose all their particles early, but using update-on-demand would probably 
be a satisfactory solution in such cases. 

The reduced complexity benefits of this simplification (these features have caused 
problems in the past and would need modifying and making more complex to support 
Eulerian fields when there are no particles present) probably out-weigh the efficiency 
loss.

(xiii) Cloud gamma calculations when no cloud gamma parameters specified have been 
improved (result is now 0 and a warning is issued). Previously the code might have 
failed or have given unpredictable results (depending on compilers, compiler options 
etc).

(xiv) Input changes required for the above:

The FieldSpecies input block must no longer be used and all species used (on particles 
or fields) must now be listed in the "Species" input block. 

The user now needs to provide a "Species Uses" block in the input file. The allowed
column headers are "Species", "On Particles?", "On Fields?", "Advect Field?" and 
"Particle Size Distribution For Fields". This is used to indicate which species can be 
held on particles and on fields and whether a field is advected or static. Puffs carry 
the same species as particles. If it is required that a species should sediment on 
fields, then this is indicated by naming a particle size distribution in the "Species 
Uses" block. The cumulative fraction information in this particle size distribution 
plays no role in controlling the sedimentation of the fields, but the diameter range 
boundaries are used in grouping the material into particle size "bins" which are held 
on separate fields. Information on the particle density must also be included in the 
particle size distribution and a representative diameter for each size range can be 
included (see below for more information on the way the "Particle Size Distribution" 
input block has been revised to include density and representative diameter 
information). Of course this does not alter the way particle size distributions can be 
used to control the release of particles via information in the "Sources" block. Also 
the particle size distribution used to control the grouping of material into bins for 
use with fields can be, but doesn't have to be, the same distribution used to control 
the release of particles.

The "Particle Size Distribution" block now has headers "Diameter Range Boundary", 
"Cumulative Fraction", "Density" and "Representative Diameter" with "Diameter Range 
Boundary" and "Cumulative Fraction" used for particle releases (via the "Sources" 
input block) and "Diameter Range Boundary", "Density" and (optionally - if not present 
the geometric mean of the diameter boundaries is used) "Representative Diameter" used 
to control the treatment of particulates on fields (via the "Species Uses" input 
block). Note "Diameter Range Boundary" replaces the previous column header "Diameter" 
to avoid confusion with "Representative Diameter". Also note the i-th "Density" and 
"Representative Diameter" correspond to the size range between the i-th and (i+1)-th 
values of "Diameter Range Boundary".

The "Eulerian Model?" flag is no longer needed in the "Dispersion Options" input block
to run the Eulerian model. Having "Advect Field?" set to yes for a species will ensure 
it is run.

For Eulerian model runs the previously-required zero height level on the main Eulerian 
grid (i.e. the one without the "Z on boundaries" flag) must be removed. In this regard 
the grid is similar to the previous chemistry grids. 

For chemistry calculations the Eulerian model grid must be set up as this is now used 
instead of the old chemistry grid. Note grid names for the Eulerian model grid are (as 
before) "Eulerian HGrid", "Eulerian ZGrid" and "Eulerian ZGridBoundary". Note the 
"Eulerian ZGridBoundary" grid must use the "Z on boundaries" flag (as previously) - 
this is slightly different from the old chemistry vertical "interface" grid. The grids 
must use a z-based eta coord system if advecting fields.

Output of combined particle and field can be obtained by asking for "Concentration" to 
be output. The value of Sync? will be used for the part of the concentration due to 
particles.

Dave Thomson, Ben Devenish and Helen Webster

!-------------------------------------------------------------------------------------

28/10/2014

Ticket #107: Functionality and efficiency changes requested by PHE.

Improvements to efficiency of cloud gamma calculation.

Some simple code changes to improve efficiency of the cloud gamma calculation were
recommended by Eike back in 2011, see ticket #37. These were implemented and tested
within a development branch (changeset 172) but were not incorporated into the trunk
at that time. The change involves moving some if-tests to a higher level subroutine
thereby avoiding repetition of the same calculation.

CoordinateSystem.F90
The tests on the input horizontal and vertical coordinate systems have been removed
from the subroutine CalcDistanceBetweenTwoPoints.

Particle.F90
The horizontal and vertical coordinate systems are now checked within the higher level
subroutine ParticleCloudGamma before calling the CalcDistanceBetweenTwoPoints routine.

Andrew Jones

!-------------------------------------------------------------------------------------

29/10/2014

Ticket #108: Activities associated with freezing of version 6.4.

All code changes since v6.3 have been reviewed and the following minor corrections
and changes have been included.

Case.F90
Added clauses in the subroutine CalcFlowResults to set missing values for the two
quantities "Q_ConCloudBase" and "Q_ConCloudTop" in the absence of cloud information.
Introduced a new local variable "iZCoordPa" in the subroutine OneParticleTimeStep
to avoid repetition of calls to FindZCoordIndex.

Input.F90
Corrected an 'if' test in the subroutine Tokens2NWPMetDefn2 that checks for the
recognised field qualifiers "Total" and "Dynamic" ("i" has been corrected to
"iFieldQualifier").

Chemistry.F90
In the subroutine SetBackgroundFieldsFromSTOCHEM, the background chemistry fields
were being incorrectly set to zero on level 1. This has now been corrected and the
field takes the correct STOCHEM value.

Andrew Jones

!-------------------------------------------------------------------------------------

29/10/2014

Ticket #108: Activities associated with freezing of version 6.4.

GlobalParameters.F90
Updated the 'ModelVersion' parameter to "version 6.4", introduced a new label for a
"beta release" and switched active label from 'development version' to 'beta version'.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.4 beta of NAME III released 29/10/2014.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

21/11/2014

Ticket #108: Activities associated with freezing of version 6.4.

Bug fixes and some other minor code edits.

Output.F90
Corrected a minor bug in the subroutine FirstLastReqTimes when requesting trajectory
output: an 'if' test was incorrect when checking for the presence of a time grid
for a PP info request.

Particle.F90
Local variables have been added for the convective cloud base and cloud top in the
new convective mixing subroutine DeepConvectionNew, which allows these values to be
modified locally (e.g. if the cloud base pressure is greater than the value of the
surface pressure). The use of local variables here has also improved code readability.
The subroutine Subsidence used in the new convective mixing scheme has also been
updated to reflect particles at the surface. Some general tidying of code
(such as removing space at end of lines) was also done. 

Case.F90
Removed the requirement for a 'dummy field' when running chemistry. The call to the
subroutine UpdateChemistry in the subroutine RunToSyncTimeOrMetFlowUpdateOrEndOfCase
has been revised to avoid the need for a dummy field.

Species.F90
The function definition CalcVD has been renamed CalcVd (note the lower case 'd') for
consistency with the function calls in Particle.F90 and EulerianInterface.F90.
This change has no material effect as Fortran is case insensitive.

LinuxIntelDebug, Makefile
The standard 'debug' build for the Intel Fortran compiler has historically generated
warning messages when temporary arrays are created for arguments passed into routines.
The warnings have been disabled by adding the compiler option -check noarg_temp_created
into the 'debug' compilation script and the relevant section of the makefile.

Andrew Jones

!-------------------------------------------------------------------------------------

10/12/2014

Ticket #108: Activities associated with freezing of version 6.4.

Bug fixes and some other minor code edits.

Case.F90
Bug fix when calling the new deep convection scheme. A check of the error code from
the vertical coordinate conversion has now been added to avoid attempting to convert
to pressure for a particle that goes outside the flow domain during the advection and
turbulence step. Previously the conversion to pressure could sometimes fail in
an uncontrolled manner when running the new convection scheme.
The test of the input value for 'Deep Convection?' has also been made case-insensitive.

Particle.F90
Minor revision to the new trajectory calculation, with a call to the intrinsic
subroutine ATan2 in the subroutine TrajectoryCalc replaced by an equivalent call
to its local NAME extension ATan2ZeroTest, which will return a value in the event
that a particle horizontal velocity components are both exactly zero (as the native
ATan2 subroutine would fail in this situation).

Andrew Jones

!-------------------------------------------------------------------------------------

18/12/2014

Ticket #108: Activities associated with freezing of version 6.4.

Bug fix for a potential failure when using chemistry with the new convective mixing
scheme.

Chemistry.F90
In the subroutine InitChemistryGridboxes, the particle height is left in pressure
when running with the new convective mixing scheme and the conversion back to the
chemistry vertical coordinate failed if the particle was above the chemistry domain.
The gridboxID for the particle is now set to -1 in this situation (which is the
same behaviour as for the old convection scheme when a particle gets convected
above the chemistry grid).

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.4 of NAME III released 18/12/2014.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

23/12/2014

Ticket #108: Activities associated with freezing of version 6.4.

Removed author details from the header section of all source files and scripts.

The author and date have also been removed from the top header in this Changes file
and in the ReadMe file for this folder. Authors are now listed collectively in the
file Contributors.txt in the top-level NAME folder.

Andrew Jones

!-------------------------------------------------------------------------------------

17/01/2015

Ticket #113: Met dependent meander scheme

Two extra column headers have been added to the NWP Met Definitions block in the met
definition file ('Mesoscale SigU' and 'Mesoscale TauU') for storing the met dependent
default variables for parameterising unresolved mesoscale motions (previously known as
the meander parametrization). SigUUM (Mesoscale SigU)**2 and TauUUM (Mesoscale TauU)
have been added to the NWPMetDefn derived type to store these values. Note that values
must be given for these variables in the NWP Met definitions block and cannot be
omitted or left blank. Alternative values to the default values can still be given,
if required, by the user in the NWP Met Module Instances block.

In line with the above, the following column headers have been renamed as follows:-
 a) In the Single Site Met Module Instances block and in the NWP Met Module Instances
    block:
      Meander SigU -> Mesoscale SigU
      Meander TauU -> Mesoscale TauU
 b) In the Sets of Dispersion Options block:
      Meander? -> Mesoscale Motions?
      Meander Velocity Memory Time -> Mesoscale Velocity Memory Time

Furthermore, the output request quantity 'Meander Sigma VV' has been changed to
'Mesoscale Sigma VV'.

If values are given by the user for 'Mesoscale SigU' and 'Mesoscale TauU' in the NWP
Met Module Instances block, they will be stored in the NWPMet derived type and used.
(Note that both values must be given or left blank. If only one is specified NAME will
fail with a fatal error.) If no values are given, then the default met dependent
values specified in the NWP Met Definitions block will be used. The NWP met definition
files have been updated accordingly and the user will need to use these updated files.

No changes have been made to the parametrisation of unresolved mesoscale motions when
using single site meteorology except some renaming of variables to remove the
reference to 'meander'. The values given by the user for 'Mesoscale SigU' and
'Mesoscale TauU' in the Single Site Met Module Instances block are used. If no values
are given, default values of sigma_u = 0.5 m/s and tau_u = 7200 s are used.

Within NAME there has been some renaming of variables and editing of the comments
to remove any references to 'meander'. The logical flag 'Meander' has been changed to
'MesoscaleMotions' and the code 'Q_MeanderSigmaVV' has been renamed to
'Q_MesoscaleSigmaVV'.

Helen Webster

!-------------------------------------------------------------------------------------

27/01/2015

Ticket #118: Iodine Chemistry

There is now an alternative chemistry scheme that can be used (with radioactive decay)
to model the conversion of gaseous Iodine to particulate Iodine.

Chemistry.F90
The code now checks that the units of any species used in the chemistry scheme are
either 'g' or 'Bq' (previously it only checked that the species units were 'g').
If a species unit is 'Bq', logical flags ChangeUnitsParticle(i) and ChangeUnitsField(i)
are set when the species is modelled on particles and/or fields, respectively.
These ChangeUnitsParticle and ChangeUnitsField arrays are stored in the ChemistryDefn
type along with the inverse half-lives of the species in the corresponding Real(8)
arrays ParticleSpeciesInvHalfLife and FieldSpeciesInvHalfLife.

If the release is in Bq, and chemistry is true, the code now converts from Bq to mass
in g and then to molecules/cm3 in the two subroutines ConvertChemFieldtoConc and
ConvertMassToConc, and then back again after the chemistry has taken place in
the two subroutines ConvertConcToMass and ConvertConctoChemField.

Removed the 'if conc > 2.0 (molecules/cm3)' test in ConvertConcToMass as it could
cause a negative mass problem and its purpose had already been queried.

ChemistrySchemeIodine.F90 contains the code to convert gaseous Iodine to particulate 
Iodine.
ChemistryScheme.F90 contains the standard tropospheric chemistry.

Instructions for using the new Iodine chemistry scheme:
Set up your species file as you would for a normal run with radioactive species
- i.e., species category is RADIONUCLIDE and not CHEMISTRY-SPECIES. Then set both
"Radioactive Decay?" and "Chemistry?" to 'Yes' in "Sets of Dispersion Options".
To compile the code with Iodine chemistry, you must first rename the file
ChemistrySchemeIodine.F90 to ChemistryScheme.F90 (after you have renamed the
standard scheme to something suitable so that the original file is not overwritten).

Alison Redington

!-------------------------------------------------------------------------------------

02/02/2015

Ticket #120: Bug fix to Chemistry.F90

A few lines of code at the end of subroutine ConvertChemFieldToConc were accidentally
removed in the change of 27/01/2015. These lines have been reinstated.

Alison Redington

!-------------------------------------------------------------------------------------

13/02/2015

Ticket #126: Deposition from Eulerian model

Calculation and output of dry, wet and total deposition.
Note that dry deposition is performed in two steps: the first accounts for deposition
due to sedimentation, if appropriate, and the second accounts for deposition according
to the deposition velocity. Wet deposition is the (vertically) integrated loss of
material due to wet scavenging. Both wet and dry deposition are calculated in the new
subroutine EulerianDeposition within the EulerianInterface module.

Deposition outputs are requested as the quantities:

 - 'Eulerian Dry Deposition Rate'
 - 'Eulerian Wet Deposition Rate'
 - 'Eulerian Total Deposition Rate'
 
for dry, wet and total deposition, respectively.

Ben Devenish

!-------------------------------------------------------------------------------------

15/02/2015

Ticket #114: Minor tidying.

Convection scheme choice controlled by integer instead of character string (for
efficiency).

Some tidying of Input.F90 including better error messages. Also check added for
truncation of input lines.

Some module variables given the "save" attribute or made into parameters.

Testing the water with some Fortran 2003 constructions.

Three bugs in SemiLagrangian.F90 fixed.

Traceback information produced when there is a trapped fatal error in the debug
version (for some platforms and compilers).

Removal of obsolete input variables "Screen?", "Disk?" and "Graph?" from Field and 
Particle/Puff requirement input blocks. Use of these variables in any legacy user
files should be replaced by the "Output Route" variable.

Descriptions of the column header lines added to the field output so it's clear what
each line describes. An option "Pre 6.5 Format?" has been added to the "Output
Options" input block to enable/disable this, but the "Pre 6.5 Format?" flag is set
to "Yes" by default (so that the new format is disabled). This option is transitional
and will be removed in due course.

Preliminary work in preparation for size-segregated output quantities. The last index
in a field array now represents the component and size range indices. Also some
simplification of the code for writing output files with replacement of multiple
'else if' blocks by use of 'case' statements.

Dave Thomson

!-------------------------------------------------------------------------------------

09/03/2015

Ticket #125: Radioactive decay of Eulerian fields

Allow radioactive decay of Eulerian fields (including decay chains).
The Eulerian model accesses the subroutine RadioactiveDecay in Particle.F90.
Some minor modifications to this subroutine including the addition of a flag
to indicate whether the routine is dealing with fields or particles.
The decay chain for fields only works if the particle size distribution associated
with a daughter species is the same as that of the parent species.
Minor changes in Species.F90, EulerianInterface.F90 and MainNameIII.F90.

Ben Devenish

!-------------------------------------------------------------------------------------

23/03/2015

Ticket #110: Addition of particle shape dependent Sedimentation Schemes

Introduction of sedimentation schemes to consider the fall velocity of non-spherical
volcanic ash particles: Wilson and Huang 1979 and Ganser 1974.

The user identifies the sedimentation scheme through the "Sources" input block using
the keyword "Sedimentation Scheme", which can be 'Ganser' (for Ganser 1974),
'WH' (for Wilson and Huang 1979) or 'White' (or left blank) for the standard
shape-independent fall scheme.

The "Particle Shape" value can be entered either via the "Sources" block (in which
case this single shape value is assigned to all particles from that source) or via
the "Particle Size Distribution" block (in which case particle shape is a function
of the size range). A size range specific "Particle Density" can also now be entered
via the "Particle Size Distribution" block. Any values given as a part of the
particle size distribution will take precedence over those in the source definition.

Frances Beckett

!-------------------------------------------------------------------------------------

31/03/2015

Ticket #111: Reading packed pp data

Added support for reading WGDOS-packed pp files from the Met Office Unified Model.

The UM WGDOS unpacking subroutine Xpnd_all has been incorporated into a new module
NWPUtilities.F90, which is intended to store any 'utility' routines associated with
the handling of NWP met data. The subroutine Xpnd_all is called automatically
from Read2dField (in NWPMet.F90) when packed pp files are being read.

Information on whether the data is packed, and on the packing accuracy that is used,
is contained within the pp header details and is used automatically within NAME,
and so no user input is needed when reading packed pp files.

Ian Edmond

!-------------------------------------------------------------------------------------

31/03/2015

Ticket #124: Particle size distribution output

Particle size-segregated output can now be requested for the following quantities:

 - 'Air Concentration'
 - 'Dry Deposition Rate'
 - 'Wet Deposition Rate'
 - 'Deposition Rate'
 - '# Particles'
 - '# Particles By Species'
 - 'Mass'
 - 'Mean Z'
 - 'Sigma Z'
 - 'Mean Travel Time'
 - 'Mixing Ratio'

The required particle size distribution for the output segregation is specified
using the keyword "Particle Size Distribution" in the output field requirement.
Note that only the Diameter Range Boundaries in the size distribution play a role
when a size distribution is used to control size-segregated output. The size
distribution itself is not important and values of Cumulative Fraction are ignored.

The size range bin within the size distribution is identified in the output file
headers using a new row labelled as "Particle Size Range". This is suppressed
when "Pre 6.5 Format?" is set to "Yes" (as it is by default).

Lois Huggett

!-------------------------------------------------------------------------------------

15/04/2015

Ticket #127: Agent decay of Eulerian fields

Added support for agent decay of Eulerian fields.

The Eulerian model accesses a modified form of the subroutine AgentDecay
via a new subroutine EulerianAgentDecay in EulerianInterface.F90.

Ben Devenish

!-------------------------------------------------------------------------------------

01/05/2015

Ticket #116: Porting to Cray compiler on Cray Linux Environment.

Various code changes associated with the porting of NAME to run under the
Cray Linux Environment (Cray HPC platforms). NAME is now supported for both
the Intel Fortran compiler and the native Cray Fortran compiler on Cray systems.

These are porting changes only. There are no changes to model functionality or
to user inputs.

The main changes that have been required are as follows:

 a) Explicit declaration of character string length when passing an array of character
    strings as an argument in certain functions. Note that ordinarily the Character(*)
    form would be used in the declaration of the dummy argument, but this fails in
    several places with the Intel compiler on the Cray (possibly a compiler bug?).

 b) OpenMP changes: Replacement of '#ifdef' compiler-specific directives to invoke
    OpenMP functionality with the '!$' sentinel (which is a generic OpenMP construct
    that is only interpreted when the source is compiled with an openmp flag).
    The 'MetLocks' and 'FlowLocks' public declarations are also now handled by a
    '!$' sentinel. These changes have been recommended by Maff Glover in the HPC
    optimisation team.

 c) Use of a 'Cycle' statement fails on parallelised named loops with the native Cray
    compiler. A compiler bug has been reported. The relevant instances where the code
    fails (three occurences in the subroutine 'OutputFields' in Output.F90) have been
    revised to replace the 'Cycle' with 'Go To' (this will be changed back once the
    compiler issue is resolved).

 d) The formulation of reaction 43 (NITRATE AEROSOL) in the subroutine 'CHEMCO'
    in ChemistryScheme.F90 has been revised so as to give the intended result.
    The old calculation as
      
      9.07E-83 * DEXP(49057.0/T)
      
    evaluates to zero because 9.07E-83 is identically zero in "single precision".
    It has now been written using the explicit kind=8 qualifier '_P64' as 9.07E-83_P64.
    In addition, to reduce the chances of overflow the calculation has been replaced by
    the equivalent, but more robust, form
      
      EXP(49057.0_P64/T + LOG(9.07E-83_P64)).

 e) New compiler-specific code blocks added for the native Cray compiler using an
    '#ifdef CrayCLECompiler' directive.

 f) Updates to use intrinsic systems calls.
    The function 'Command_Argument_Count' and the subroutine 'Get_Command_Argument'
    are intrinsic in Fortran 2003. The code has been updated to use these new methods
    for accessing command line arguments instead of relying on older compiler-specific
    portability routines.
    Similarly the subroutine 'Execute_Command_Line' is an intrinsic in Fortran 2008
    and will be available from v15 of the Intel Fortran compiler. The code has been
    updated to use this new intrinsic subroutine as the standard method to submit
    system commands, but the call to a portability function has been retained for
    the current version of the Intel compiler.

 g) Miscellaneous minor code changes and bug fixes. These also include reformatting
    code to remove overly long lines and removing whitespace at ends of lines.

 h) The "Makefile" has been updated to include appropriate compilation options for
    the Cray HPC (with the assistance of Maff Glover and Douglas Boyd).
    Compiler options added for:
      'IntelCLE '(Intel compiler on Cray Linux Environment), and
      'CrayCLE'  (Cray  compiler on Cray Linux Environment).

 i) Added new compilation scripts for compiling 'release' and 'debug' versions of NAME
    with the native Cray compiler. Note that the preferred method of compilation is
    to use the Makefile, but these standalone scripts are supplied in order to provide
    compiler options and flags in a simple compilation script.

      CrayCLEDebug
      CrayCLERelease
      CrayCLERelease_GribAPI

Finally, note that the default behaviour with the native Cray compiler is to compile
with OpenMP and the compiler option '-xomp' is used to disable the option.

Andrew Jones, Maff Glover and Douglas Boyd

!-------------------------------------------------------------------------------------

08/05/2015

Ticket #112: Enable NAME to read NetCDF met files

Added support for reading NWP met and topography files in NetCDF format.

The NetCDF name of a met variable can now be read as part of the NWP met file
structure definition, specified using the keyword variable "NC Field Name" in
the "NWP Met File Structure Definition" input block. These names are then
stored in the array NCFieldNames in the NWPMetDefn2_ derived type.

A compiler directive "#ifdef NetCDFsupport ..." has been used within the code
to include NetCDF-specific source lines. These are activated by compiling NAME
with the "USENETCDF" option in the makefile, which also instructs NAME to link
with (external) NetCDF libraries. See top-level ReadMe file for further details
on using NetCDF libraries with NAME.

NetCDF-specific code sections added for opening, reading and closing NetCDF files
in the subroutines ReadTopog and ReadNWPMet (and Read2dField). These statements
call the appropriate external NetCDF library routines.

Note that the topography field needs to have a NetCDF name of "topography".
A command line editing tool, such as 'nco -ncrename', can be used to change the
NetCDF name of the variable in the topography file to match this requirement
if necessary.

Compilation scripts for Linux and Cray HPC environments have also been updated
to include the recent "NWPUtilities.F90" module and a revised ordering of the
compilation associated with changes in the interaction between the Eulerian model
and chemistry.

Ian Edmond

!-------------------------------------------------------------------------------------

08/05/2015

Ticket #114: Minor tidying.

Work completed in Input.F90 in connection with using integer parameters instead of
hard-coded numbers and using Tokens2Std instead of Char2Std in order to give better
error messages.

Power law decay option added (via AgentDecay) using variables "Power Law Decay
Exponent" and "Power Law Decay Delay" in the "Species" input block.

Field output column headers reviewed, with the 'D across' line behaviour presence or
absence changed to match the 'X/Y/Z/T across' lines when 'Pre 6.5 Format?' is set to
'No'.

After chemistry calculation, any species which are held on both particles and fields
are now put back on to fields. The checks on the species category have now been
relaxed. All that is now needed is that the species category must be
'CHEMISTRY-FIELD-INIT' if the field is to be initialised. Chemistry should now work
(although not fully tested) when there are some species which are held on both
particles and fields.

The run termination behaviour with Intel compiler on Windows (final message,
whether the window closes, and control of this via the '-ClosePromptLevel=' option)
is now aligned with that previously obtained under the Compaq compiler. A compiler
directive 'IntelWin' has been introduced for this purpose.

Dave Thomson

!-------------------------------------------------------------------------------------

22/06/2015

Ticket #130/#131: Iterative plume-rise model

Iterative plume-rise model added to NAME primarily to enable refinement of Mastin
et al.'s empirical formula (relating rise height of a volcanic plume to its source
mass flux) according to prevailing meteorology. (It is envisaged that it can also be
used more generally.)

The iterative plume-rise model compares observed (target) height with

 min(z_max(U=0), z_max + b_max)

where b_max is the radius at the maximum rise height.

The plume-rise model is activated by specifying 'Iterative Plume Rise Model' under
"Met-dependent Source Type" in the "Sources" input block. Several new variables
have also been included in the "Sources" block to enable users to provide other inputs
for the plume-rise model: "Dry Gas Mass Fraction", "Water Vapour Mass Fraction",
"Plume Rise Height" (i.e., target plume rise height), "Summit Elevation" (i.e., source
height) and "Distal Fine Ash Fraction". A user-defined vertical grid for use in the
plume-rise scheme calculations, "Z-Grid Iterative Plume Rise", is also a necessary
user input when running the scheme.

Output is requested using the quantities 'Original Source Strength' for Mastin et al.
empirical formula and 'Revised Source Strength' for the iterative plume model output.
Time-integrated or time-averaged source strength, as well as instantaneous values,
can be requested.

Ben Devenish

!-------------------------------------------------------------------------------------

30/06/2015

Ticket #134: Activities associated with freezing of version 6.5.

GlobalParameters.F90:

There are two global parameter changes for version 6.5.

 1) 'MaxTokenLength' increased from 200 to 300. This sets the maximum length for
    block keywords, block names, column keywords and data items in the headed
    input files. The increase is a request from PHE CRCE related to use of the
    column keyword "Species" in the "Output Requirements - Fields:" block, which
    can be a (potentially long) semicolon-separated species list for outputs.

 2) 'MaxFieldReqsPerReqInfo' increased from 350 to 600. This is again related to
    increasing the number of radionuclides that can be included in a model run.

Neither of these increases is expected to have a significant impact on other users
in terms of memory overhead.

Andrew Jones

!-------------------------------------------------------------------------------------

30/06/2015

Ticket #134: Activities associated with freezing of version 6.5.

Minor code corrections and other changes following a review of changes to the trunk
since version 6.4. Many of these edits are only cosmetic (code alignment issues,
removal of tab characters, extraneous white space at ends of lines) or are small
changes in comments, etc. See ticket for full list of changes, but those that are
thought to be more substantial are noted here:

Minor bug corrected in the subroutine SetUpChemistryDefns in Chemistry.F90.
The array ChangeUnitsField had not been initialised.

In the conversion subroutines (ConvertMassToConc, etc.) in Chemistry.F90, the code has
been simplified by introducing a second "conversion factor" for g <--> Bq conversions.
This makes it easier to follow the calculation steps involved here. The forward and
backward conversion routines have also been revised in terms of their 'if test'
structures to make the processing similar in both directions.

Minor correction in functions CalciLast, CalciComponent and CalciRange in Output.F90,
where the lower index bounds should be 1 rather than 0.

In Physics.F90, the declaration of sedimentation scheme parameters has been
corrected from "Integer(Std)" to "Integer".

The subroutine CalculateParticleDiameter in Source.F90 has been renamed as
CalculateParticleDiameterEtc (as it now returns the density and particle shape too).

Minor revisions in NWPMet.F90 to remove inconsistencies in the placement of the
"#ifdef NetCDFsupport" directive relative to the corresponding 'if' block.
The "#ifdef" is now always contained within the if test (as with GRIB specific code). 

Compaq specific compiler directives for met and flow locks in Flows.P90 and OpenMP.F90
have been removed (as, if openmp could be enabled in Compaq, these would be declared
twice).

In the AgentDecay subroutine in Particle.F90, the code now traps if the optional
argument TravelTime is not present when it is needed.

Updated Intel Windows project file NameIII.vfproj (and other compilation scripts
for Linux, etc.) to include the new module IterativePlumeModel.F90. Also updated
CatCode and CatCode.bat to include both this module and the NWPUtilities.F90 module.

Andrew Jones

!-------------------------------------------------------------------------------------

30/06/2015

Ticket #134: Activities associated with freezing of version 6.5.

GlobalParameters.F90
Updated the 'ModelVersion' parameter to "version 6.5" and switched the active label
from 'development version' to 'beta version'.

Andrew Jones

!-------------------------------------------------------------------------------------

01/07/2015

Ticket #134: Activities associated with freezing of version 6.5.

Source.F90
Output.F90
IterativePlumeRiseModel.F90

Minor bug fixes and code edits required to compile with the Cray compiler.

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.5 beta of NAME III released 01/07/2015.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

31/07/2015

Ticket #134: Activities associated with freezing of version 6.5.

GlobalParameters.F90
ReadMe.txt
Source.F90
Particle.F90

Minor bug fixes and other minor changes for inclusion in the final release of v6.5:

The global parameters 'MaxReqInfoTimes' and 'MaxReqInfoTravelTimes' have been reduced
from 60 to 45 in order to compensate for the previous increase in the parameter
'MaxFieldReqsPerReqInfo' (see earlier change of 30/06/2015). Parallel NAME runs
will now keep within the default stack size limit for additional threads of 4 MB
(otherwise the user needs to explicitly set the OMP_STACKSIZE environment variable).
Setting the OMP_STACKSIZE environment variable is recommended when running NAME
in parallel (see ReadMe.txt for further details).

Bug fix in the subroutine SetUpSources in Source.F90. Processing of the particle shape
and density inputs has been moved inside the loop over sources. Also updated some
error messages to account for the change in description of "Particle Shape Scheme"
to "Sedimentation Scheme".

Minor bug fix in deep convection scheme in Particle.F90. In the subroutine Subsidence,
the treatment of particles near to the surface has been modified. Previously,
particles were reflected at the ground but this behaviour has been changed so that
any particles that have subsided below the cloud base are randomly redistributed
within the lowest cloud layer.

Andrew Jones

!-------------------------------------------------------------------------------------

31/07/2015

Ticket #134: Activities associated with freezing of version 6.5.

NameIII.vfproj
Updated the Visual Studio project file for compiling with the Intel Fortran compiler
under Windows. 64-bit configurations with OpenMP parallelisation have been added to
the existing 32-bit serial build options. The folder configuration has also been
changed to use separate "Win32" and "x64" compilation directories (each with
subdirectories "Release" and "Debug"). The names of the executables in
/Executables_Win have also been revised for consistency with the Linux filename
convention (e.g., use of "_64bit" for 64-bit executables).

Andrew Jones

!-------------------------------------------------------------------------------------

31/07/2015

Ticket #134: Activities associated with freezing of version 6.5.

GlobalParameters.F90
Updated the 'ModelVersion' parameter to the final release for "version 6.5".

Andrew Jones

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------

Version 6.5 of NAME III released 31/07/2015.

!-------------------------------------------------------------------------------------
!-------------------------------------------------------------------------------------
