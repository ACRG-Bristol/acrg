; Configuration file for HBMCMC code
; Required inputs are marked as such.
; All other inputs are optional (defaults will be used)

[INPUT.MEASUREMENTS]
; Input values for extracting observations
; species (str) - species name (see species_info.json in openghg/supplementary_data for options) e.g. "ch4"
; sites (list) - site codes as a list (see site_info.json in openghg/supplementary_data for options) e.g. ["MHD"]
; meas_period (list) - Time periods for measurements as a list (must match length of sites)
; start_date (str) - Start of observations to extract (format YYYY-MM-DD)
; end_date (str) - End of observations to extract (format YYYY-MM-DD) (non-inclusive)

species = ''      ; (required)
sites = []        ; (required)
meas_period = []  ; (required)
start_date = ''   ; (required - but can be specified on command line instead)
end_date = ''     ; (required - but can be specified on command line instead)

; inlet (list/None) - Specific inlet height for the site (list - must match number of sites)
; instrument (list/None) - Specific instrument for the site (list - must match number of sites)
; obs_directory (str/None) - Directory containing the obs data (with site codes as subdirectories)

inlet = None
instrument = None
obs_directory = None

[INPUT.PRIORS]
; Input values for extracting footprints, emissions and boundary conditions files (also uses values from INPUT.MEASUREMENTS)
; domain (str) - Name of inversion spatial domain e.g. "EUROPE"
; fpheight (dict/None) - Release height for footprints. e.g. fpheight = {"TAC":"185m"} (must match number of sites).
; met_model (dict/str/None) - either dict corresponding to sites, str. e.g., 'UKV' or None if applies to all sites
; emissions_name (dict/None) - Name for specific emissions source. this should be a dictionary with {source_name: emissions_file_identifier} (e.g. {'anth':'co2-ff-mth'})
; fp_directory (str/None) - Directory containing the footprints files (with domain name as subdirectories)
; flux_directory (str/None) - Directory containing the emissions files (with domain name as subdirectories)

domain = ''           ; (required) 
met_model = None      
fpheight = None
emissions_name = None
fp_directory = None
flux_directory = None

[INPUT.BASIS_CASE]
; Input values to extract the basis cases to use within the inversion for boundary conditions and emissions
; bc_basis_case (str) - boundary conditions basis, defaults to "NESW" (looks for file format {bc_basis_case}_{domain}_*.nc)
; fp_basis_case (str/None) - emissions bases:
; - if specified, looks for file format {fp_basis_case}_{domain}_*.nc
; - if None, creates basis function using quadtree algorithm and associated parameters
;   - nbasis - Number of basis functions to use for quadtree derived basis function (rounded to %4)
; basis_directory (str/None) - Directory containing the basis functions (with domain name as subdirectories)

bc_basis_case = "NESW"

fp_basis_case = None
quadtree_basis = True
nbasis = 100
basis_directory = None

[MCMC.TYPE]
; Which MCMC setup to use. This defines the function which will be called and the expected inputs.
; Options include:
; "fixed_basis"

mcmc_type = "fixed_basis"

[MCMC.PDF]
; Definitions of PDF shape and parameters for inputs
; - xprior (dict) - emissions
; - bcprior (dict) - boundary conditions
; - sigprior (dict) - model error

; Each of these inputs should be dictionary with the name of probability distribution and shape parameters.
; See https://docs.pymc.io/api/distributions/continuous.html
; Current options for the "pdf" parameter include:

; - "lognormal" - Log-normal log-likelihood.
;  - "mu" (float) - Location parameter
;  - "sd" or "sigma" (float) - Standard deviation (> 0)
; e.g. {"pdf":"lognormal", "mu":1, "sd":1}

; - "uniform" - Continuous uniform log-likelihood.
;  - "lower" (float) - Lower limit
;  - "upper" (float) - Upper limit
; e.g. {"pdf":"uniform", "lower":0.5, "upper":3}

; - "halfflat" - Improper flat prior over the positive reals. (no additional parameters necessary)
; e.g. {"pdf":"halfflat"}


xprior = {"pdf":"lognormal", "mu":1, "sd":1}
bcprior = {"pdf":"lognormal", "mu":0.004, "sd":0.02}
sigprior = {"pdf":"uniform", "lower":0.5, "upper":3}


[MCMC.BC_SPLIT]
; Boundary conditions setup
; - bc_freq - The period over which the baseline is estimated. e.g.
;  - None - one scaling for the whole inversion
;  - "monthly" - per calendar monthly
;  - "*D" (e.g. "30D") - per number of days (e.g. 30 days)

bc_freq = None
sigma_freq = None
sigma_per_site = True

[MCMC.ITERATIONS]
; Iteration parameters
; nit (int) - Number of iterations for MCMC
; burn (int) - Number of iterations to burn in MCMC
; tune (int) - Number of iterations to use to tune step size

nit = 2.5e5
burn = 50000
tune = 1.25e5

[MCMC.NCHAIN]
; Number of chains to run simultaneously. Must be >=2 to allow convergence to be checked.

nchain = 2

[MCMC.ADD_ERROR]
; Add variability in averaging period to the measurement error

averagingerror = True

[MCMC.OUTPUT]
; Details of where to write the output
; outputpath (str) - directory to write output
; outputname (str) - unique identifier for output/run name.

outputpath = ''  ; (required)
outputname = ''  ; (required)

