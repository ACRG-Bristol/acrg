; Configuration file for HBMCMC code
; Required inputs are marked as such.
; All other inputs are optional (defaults will be used)

[INPUT.MEASUREMENTS]
; Input values for extracting observations
; species (str) - species name (see acrg_species_info.json for options) e.g. "ch4"
; sites (list) - site codes as a list (see acrg_site_info.json for options) e.g. ["MHD"]
; meas_period (list) - Time periods for measurements as a list (must match length of sites)
; start_date (str) - Start of observations to extract (format YYYY-MM-DD)
; end_date (str) - End of observations to extract (format YYYY-MM-DD) (non-inclusive)

species = ''      ; (required)
sites = []        ; (required)
meas_period = []  ; (required)
start_date = ''   ; (required)
end_date = ''     ; (required)

; inlet (list/None) - Specific inlet height for the site (list - must match number of sites)
; instrument (list/None) - Specific instrument for the site (list - must match number of sites)
; obs_directory (str/None) - Directory containing the obs data (with site codes as subdirectories)

inlet = None
instrument = None
obs_directory = None

[INPUT.PRIORS]
; Input values for extracting footprints, emissions and boundary conditions files (also uses values from INPUT.MEASUREMENTS)
; domain (str) - Name of inversion spatial domain e.g. "EUROPE"
; fpheight (dict/None) - Release height for footprints. e.g. fpheight = {"TAC":"185m"} (must match number of sites).
; emissions_name (dict/None) - Name for specific emissions source. this should be a dictionary with {source_name: emissions_file_identifier} (e.g. {'anth':'co2-ff-mth'})

domain = ''           ; (required) 
fpheight = None
emissions_name = None

[INPUT.BASIS_CASE]
; Input values to extract the basis cases to use within the inversion for boundary conditions and emissions
; bc_basis_case (str) - boundary conditions basis, defaults to "NESW" (looks for file format {bc_basis_case}_{domain}_*.nc)
; fp_basis_case (str/None) - emissions bases:
; - if specified, looks for file format {fp_basis_case}_{domain}_*.nc
; - if None, creates basis function using quadtree algorithm and associated parameters
;   - nbasis - Number of basis functions to use for quadtree derived basis function (rounded to %4)

bc_basis_case = "NESW"

fp_basis_case = None
quadtree_basis = True
nbasis = 100

[MCMC.PDF]
; Definitions of PDF shape and parameters for inputs
; - xprior (dict) - emissions
; - bcprior (dict) - boundary conditions
; - sigprior (dict) - model error

; Each of these inputs should be dictionary with the name of probability distribution and shape parameters.
; See https://docs.pymc.io/api/distributions/continuous.html
; Current options for the "pdf" parameter include:

; - "lognormal" - Log-normal log-likelihood.
;  - "mu" (float) - Location parameter
;  - "sd" or "sigma" (float) - Standard deviation (> 0)
; e.g. {"pdf":"lognormal", "mu":1, "sd":1}

; - "uniform" - Continuous uniform log-likelihood.
;  - "lower" (float) - Lower limit
;  - "upper" (float) - Upper limit
; e.g. {"pdf":"uniform", "lower":0.5, "upper":3}

; - "halfflat" - Improper flat prior over the positive reals. (no additional parameters necessary)
; e.g. {"pdf":"halfflat"}


xprior = {"pdf":"lognormal", "mu":1, "sd":1}
bcprior = {"pdf":"lognormal", "mu":0.004, "sd":0.02}
sigprior = {"pdf":"uniform", "lower":0.5, "upper":3}


[MCMC.BC_NUM]
; Calculate a separate scaling for the boundary conditions for every month (for each direction) or one scaling for the entire inversion period (for each direction). This is only relevant if the inversion period > 1 month.

bc_monthly = True

[MCMC.ITERATIONS]
; Iteration parameters
; nit (int) - Number of iterations for MCMC
; burn (int) - Number of iterations to burn in MCMC
; tune (int) - Number of iterations to use to tune step size

nit = 2.5e5
burn = 50000
tune = 1.25e5

[MCMC.NCHAIN]
; Number of chains to run simultaneously. Must be >=2 to allow convergence to be checked.

nchain = 2

[MCMC.ADD_ERROR]
; Add variability in averaging period to the measurement error

averagingerror = True

[MCMC.OUTPUT]
; Details of where to write the output
; outputpath (str) - directory to write output
; outputname (str) - unique identifier for output/run name.

outputpath = ''  ; (required)
outputname = ''  ; (required)

